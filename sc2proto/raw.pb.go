// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.0
// source: raw.proto

package sc2proto

import (
	"reflect"
	"sync"

	"google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DisplayType int32

const (
	DisplayType_Visible     DisplayType = 1 // Fully visible
	DisplayType_Snapshot    DisplayType = 2 // Dimmed version of unit left behind after entering fog of war
	DisplayType_Hidden      DisplayType = 3 // Fully hidden
	DisplayType_Placeholder DisplayType = 4 // Building that hasn't started construction.
)

// Enum value maps for DisplayType.
var (
	DisplayType_name = map[int32]string{
		1: "Visible",
		2: "Snapshot",
		3: "Hidden",
		4: "Placeholder",
	}
	DisplayType_value = map[string]int32{
		"Visible":     1,
		"Snapshot":    2,
		"Hidden":      3,
		"Placeholder": 4,
	}
)

func (x DisplayType) Enum() *DisplayType {
	p := new(DisplayType)
	*p = x
	return p
}

func (x DisplayType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DisplayType) Descriptor() protoreflect.EnumDescriptor {
	return file_raw_proto_enumTypes[0].Descriptor()
}

func (DisplayType) Type() protoreflect.EnumType {
	return &file_raw_proto_enumTypes[0]
}

func (x DisplayType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DisplayType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DisplayType(num)
	return nil
}

// Deprecated: Use DisplayType.Descriptor instead.
func (DisplayType) EnumDescriptor() ([]byte, []int) {
	return file_raw_proto_rawDescGZIP(), []int{0}
}

type Alliance int32

const (
	Alliance_Self    Alliance = 1
	Alliance_Ally    Alliance = 2
	Alliance_Neutral Alliance = 3
	Alliance_Enemy   Alliance = 4
)

// Enum value maps for Alliance.
var (
	Alliance_name = map[int32]string{
		1: "Self",
		2: "Ally",
		3: "Neutral",
		4: "Enemy",
	}
	Alliance_value = map[string]int32{
		"Self":    1,
		"Ally":    2,
		"Neutral": 3,
		"Enemy":   4,
	}
)

func (x Alliance) Enum() *Alliance {
	p := new(Alliance)
	*p = x
	return p
}

func (x Alliance) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Alliance) Descriptor() protoreflect.EnumDescriptor {
	return file_raw_proto_enumTypes[1].Descriptor()
}

func (Alliance) Type() protoreflect.EnumType {
	return &file_raw_proto_enumTypes[1]
}

func (x Alliance) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Alliance) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Alliance(num)
	return nil
}

// Deprecated: Use Alliance.Descriptor instead.
func (Alliance) EnumDescriptor() ([]byte, []int) {
	return file_raw_proto_rawDescGZIP(), []int{1}
}

type CloakState int32

const (
	CloakState_CloakedUnknown  CloakState = 0 // Under the fog, so unknown whether it's cloaked or not.
	CloakState_Cloaked         CloakState = 1
	CloakState_CloakedDetected CloakState = 2
	CloakState_NotCloaked      CloakState = 3
	CloakState_CloakedAllied   CloakState = 4
)

// Enum value maps for CloakState.
var (
	CloakState_name = map[int32]string{
		0: "CloakedUnknown",
		1: "Cloaked",
		2: "CloakedDetected",
		3: "NotCloaked",
		4: "CloakedAllied",
	}
	CloakState_value = map[string]int32{
		"CloakedUnknown":  0,
		"Cloaked":         1,
		"CloakedDetected": 2,
		"NotCloaked":      3,
		"CloakedAllied":   4,
	}
)

func (x CloakState) Enum() *CloakState {
	p := new(CloakState)
	*p = x
	return p
}

func (x CloakState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CloakState) Descriptor() protoreflect.EnumDescriptor {
	return file_raw_proto_enumTypes[2].Descriptor()
}

func (CloakState) Type() protoreflect.EnumType {
	return &file_raw_proto_enumTypes[2]
}

func (x CloakState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CloakState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CloakState(num)
	return nil
}

// Deprecated: Use CloakState.Descriptor instead.
func (CloakState) EnumDescriptor() ([]byte, []int) {
	return file_raw_proto_rawDescGZIP(), []int{2}
}

type StartRaw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapSize        *Size2DI    `protobuf:"bytes,1,opt,name=map_size,json=mapSize" json:"map_size,omitempty"`                      // Width and height of the map.
	PathingGrid    *ImageData  `protobuf:"bytes,2,opt,name=pathing_grid,json=pathingGrid" json:"pathing_grid,omitempty"`          // 1 bit bitmap of the pathing grid.
	TerrainHeight  *ImageData  `protobuf:"bytes,3,opt,name=terrain_height,json=terrainHeight" json:"terrain_height,omitempty"`    // 1 byte bitmap of the terrain height.
	PlacementGrid  *ImageData  `protobuf:"bytes,4,opt,name=placement_grid,json=placementGrid" json:"placement_grid,omitempty"`    // 1 bit bitmap of the building placement grid.
	PlayableArea   *RectangleI `protobuf:"bytes,5,opt,name=playable_area,json=playableArea" json:"playable_area,omitempty"`       // The playable cells.
	StartLocations []*Point2D  `protobuf:"bytes,6,rep,name=start_locations,json=startLocations" json:"start_locations,omitempty"` // Possible start locations for players.
}

func (x *StartRaw) Reset() {
	*x = StartRaw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartRaw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRaw) ProtoMessage() {}

func (x *StartRaw) ProtoReflect() protoreflect.Message {
	mi := &file_raw_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRaw.ProtoReflect.Descriptor instead.
func (*StartRaw) Descriptor() ([]byte, []int) {
	return file_raw_proto_rawDescGZIP(), []int{0}
}

func (x *StartRaw) GetMapSize() *Size2DI {
	if x != nil {
		return x.MapSize
	}
	return nil
}

func (x *StartRaw) GetPathingGrid() *ImageData {
	if x != nil {
		return x.PathingGrid
	}
	return nil
}

func (x *StartRaw) GetTerrainHeight() *ImageData {
	if x != nil {
		return x.TerrainHeight
	}
	return nil
}

func (x *StartRaw) GetPlacementGrid() *ImageData {
	if x != nil {
		return x.PlacementGrid
	}
	return nil
}

func (x *StartRaw) GetPlayableArea() *RectangleI {
	if x != nil {
		return x.PlayableArea
	}
	return nil
}

func (x *StartRaw) GetStartLocations() []*Point2D {
	if x != nil {
		return x.StartLocations
	}
	return nil
}

type ObservationRaw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player   *PlayerRaw   `protobuf:"bytes,1,opt,name=player" json:"player,omitempty"`
	Units    []*Unit      `protobuf:"bytes,2,rep,name=units" json:"units,omitempty"`
	MapState *MapState    `protobuf:"bytes,3,opt,name=map_state,json=mapState" json:"map_state,omitempty"` // Fog of war, creep and so on. Board stuff that changes per frame.
	Event    *Event       `protobuf:"bytes,4,opt,name=event" json:"event,omitempty"`
	Effects  []*Effect    `protobuf:"bytes,5,rep,name=effects" json:"effects,omitempty"`
	Radar    []*RadarRing `protobuf:"bytes,6,rep,name=radar" json:"radar,omitempty"`
}

func (x *ObservationRaw) Reset() {
	*x = ObservationRaw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservationRaw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationRaw) ProtoMessage() {}

func (x *ObservationRaw) ProtoReflect() protoreflect.Message {
	mi := &file_raw_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationRaw.ProtoReflect.Descriptor instead.
func (*ObservationRaw) Descriptor() ([]byte, []int) {
	return file_raw_proto_rawDescGZIP(), []int{1}
}

func (x *ObservationRaw) GetPlayer() *PlayerRaw {
	if x != nil {
		return x.Player
	}
	return nil
}

func (x *ObservationRaw) GetUnits() []*Unit {
	if x != nil {
		return x.Units
	}
	return nil
}

func (x *ObservationRaw) GetMapState() *MapState {
	if x != nil {
		return x.MapState
	}
	return nil
}

func (x *ObservationRaw) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *ObservationRaw) GetEffects() []*Effect {
	if x != nil {
		return x.Effects
	}
	return nil
}

func (x *ObservationRaw) GetRadar() []*RadarRing {
	if x != nil {
		return x.Radar
	}
	return nil
}

type RadarRing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos    *Point   `protobuf:"bytes,1,opt,name=pos" json:"pos,omitempty"`
	Radius *float32 `protobuf:"fixed32,2,opt,name=radius" json:"radius,omitempty"`
}

func (x *RadarRing) Reset() {
	*x = RadarRing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadarRing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadarRing) ProtoMessage() {}

func (x *RadarRing) ProtoReflect() protoreflect.Message {
	mi := &file_raw_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadarRing.ProtoReflect.Descriptor instead.
func (*RadarRing) Descriptor() ([]byte, []int) {
	return file_raw_proto_rawDescGZIP(), []int{2}
}

func (x *RadarRing) GetPos() *Point {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *RadarRing) GetRadius() float32 {
	if x != nil && x.Radius != nil {
		return *x.Radius
	}
	return 0
}

type PowerSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos    *Point   `protobuf:"bytes,1,opt,name=pos" json:"pos,omitempty"`
	Radius *float32 `protobuf:"fixed32,2,opt,name=radius" json:"radius,omitempty"`
	Tag    *uint64  `protobuf:"varint,3,opt,name=tag" json:"tag,omitempty"`
}

func (x *PowerSource) Reset() {
	*x = PowerSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerSource) ProtoMessage() {}

func (x *PowerSource) ProtoReflect() protoreflect.Message {
	mi := &file_raw_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerSource.ProtoReflect.Descriptor instead.
func (*PowerSource) Descriptor() ([]byte, []int) {
	return file_raw_proto_rawDescGZIP(), []int{3}
}

func (x *PowerSource) GetPos() *Point {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *PowerSource) GetRadius() float32 {
	if x != nil && x.Radius != nil {
		return *x.Radius
	}
	return 0
}

func (x *PowerSource) GetTag() uint64 {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return 0
}

type PlayerRaw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PowerSources []*PowerSource `protobuf:"bytes,1,rep,name=power_sources,json=powerSources" json:"power_sources,omitempty"`
	Camera       *Point         `protobuf:"bytes,2,opt,name=camera" json:"camera,omitempty"`
	UpgradeIds   []uint32       `protobuf:"varint,3,rep,name=upgrade_ids,json=upgradeIds" json:"upgrade_ids,omitempty"` // TODO: Add to UI observation?
}

func (x *PlayerRaw) Reset() {
	*x = PlayerRaw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerRaw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerRaw) ProtoMessage() {}

func (x *PlayerRaw) ProtoReflect() protoreflect.Message {
	mi := &file_raw_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerRaw.ProtoReflect.Descriptor instead.
func (*PlayerRaw) Descriptor() ([]byte, []int) {
	return file_raw_proto_rawDescGZIP(), []int{4}
}

func (x *PlayerRaw) GetPowerSources() []*PowerSource {
	if x != nil {
		return x.PowerSources
	}
	return nil
}

func (x *PlayerRaw) GetCamera() *Point {
	if x != nil {
		return x.Camera
	}
	return nil
}

func (x *PlayerRaw) GetUpgradeIds() []uint32 {
	if x != nil {
		return x.UpgradeIds
	}
	return nil
}

type UnitOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AbilityId *uint32 `protobuf:"varint,1,opt,name=ability_id,json=abilityId" json:"ability_id,omitempty"`
	// Types that are assignable to Target:
	//	*UnitOrder_TargetWorldSpacePos
	//	*UnitOrder_TargetUnitTag
	Target   isUnitOrder_Target `protobuf_oneof:"target"`
	Progress *float32           `protobuf:"fixed32,4,opt,name=progress" json:"progress,omitempty"` // Progress of train abilities. Range: [0.0, 1.0]
}

func (x *UnitOrder) Reset() {
	*x = UnitOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnitOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnitOrder) ProtoMessage() {}

func (x *UnitOrder) ProtoReflect() protoreflect.Message {
	mi := &file_raw_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnitOrder.ProtoReflect.Descriptor instead.
func (*UnitOrder) Descriptor() ([]byte, []int) {
	return file_raw_proto_rawDescGZIP(), []int{5}
}

func (x *UnitOrder) GetAbilityId() uint32 {
	if x != nil && x.AbilityId != nil {
		return *x.AbilityId
	}
	return 0
}

func (m *UnitOrder) GetTarget() isUnitOrder_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (x *UnitOrder) GetTargetWorldSpacePos() *Point {
	if x, ok := x.GetTarget().(*UnitOrder_TargetWorldSpacePos); ok {
		return x.TargetWorldSpacePos
	}
	return nil
}

func (x *UnitOrder) GetTargetUnitTag() uint64 {
	if x, ok := x.GetTarget().(*UnitOrder_TargetUnitTag); ok {
		return x.TargetUnitTag
	}
	return 0
}

func (x *UnitOrder) GetProgress() float32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

type isUnitOrder_Target interface {
	isUnitOrder_Target()
}

type UnitOrder_TargetWorldSpacePos struct {
	TargetWorldSpacePos *Point `protobuf:"bytes,2,opt,name=target_world_space_pos,json=targetWorldSpacePos,oneof"`
}

type UnitOrder_TargetUnitTag struct {
	TargetUnitTag uint64 `protobuf:"varint,3,opt,name=target_unit_tag,json=targetUnitTag,oneof"`
}

func (*UnitOrder_TargetWorldSpacePos) isUnitOrder_Target() {}

func (*UnitOrder_TargetUnitTag) isUnitOrder_Target() {}

type PassengerUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag       *uint64  `protobuf:"varint,1,opt,name=tag" json:"tag,omitempty"`
	Health    *float32 `protobuf:"fixed32,2,opt,name=health" json:"health,omitempty"`
	HealthMax *float32 `protobuf:"fixed32,3,opt,name=health_max,json=healthMax" json:"health_max,omitempty"`
	Shield    *float32 `protobuf:"fixed32,4,opt,name=shield" json:"shield,omitempty"`
	ShieldMax *float32 `protobuf:"fixed32,7,opt,name=shield_max,json=shieldMax" json:"shield_max,omitempty"`
	Energy    *float32 `protobuf:"fixed32,5,opt,name=energy" json:"energy,omitempty"`
	EnergyMax *float32 `protobuf:"fixed32,8,opt,name=energy_max,json=energyMax" json:"energy_max,omitempty"`
	UnitType  *uint32  `protobuf:"varint,6,opt,name=unit_type,json=unitType" json:"unit_type,omitempty"`
}

func (x *PassengerUnit) Reset() {
	*x = PassengerUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassengerUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassengerUnit) ProtoMessage() {}

func (x *PassengerUnit) ProtoReflect() protoreflect.Message {
	mi := &file_raw_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassengerUnit.ProtoReflect.Descriptor instead.
func (*PassengerUnit) Descriptor() ([]byte, []int) {
	return file_raw_proto_rawDescGZIP(), []int{6}
}

func (x *PassengerUnit) GetTag() uint64 {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return 0
}

func (x *PassengerUnit) GetHealth() float32 {
	if x != nil && x.Health != nil {
		return *x.Health
	}
	return 0
}

func (x *PassengerUnit) GetHealthMax() float32 {
	if x != nil && x.HealthMax != nil {
		return *x.HealthMax
	}
	return 0
}

func (x *PassengerUnit) GetShield() float32 {
	if x != nil && x.Shield != nil {
		return *x.Shield
	}
	return 0
}

func (x *PassengerUnit) GetShieldMax() float32 {
	if x != nil && x.ShieldMax != nil {
		return *x.ShieldMax
	}
	return 0
}

func (x *PassengerUnit) GetEnergy() float32 {
	if x != nil && x.Energy != nil {
		return *x.Energy
	}
	return 0
}

func (x *PassengerUnit) GetEnergyMax() float32 {
	if x != nil && x.EnergyMax != nil {
		return *x.EnergyMax
	}
	return 0
}

func (x *PassengerUnit) GetUnitType() uint32 {
	if x != nil && x.UnitType != nil {
		return *x.UnitType
	}
	return 0
}

type RallyTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Point *Point  `protobuf:"bytes,1,opt,name=point" json:"point,omitempty"` // Will always be filled.
	Tag   *uint64 `protobuf:"varint,2,opt,name=tag" json:"tag,omitempty"`    // Only if it's targeting a unit.
}

func (x *RallyTarget) Reset() {
	*x = RallyTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RallyTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RallyTarget) ProtoMessage() {}

func (x *RallyTarget) ProtoReflect() protoreflect.Message {
	mi := &file_raw_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RallyTarget.ProtoReflect.Descriptor instead.
func (*RallyTarget) Descriptor() ([]byte, []int) {
	return file_raw_proto_rawDescGZIP(), []int{7}
}

func (x *RallyTarget) GetPoint() *Point {
	if x != nil {
		return x.Point
	}
	return nil
}

func (x *RallyTarget) GetTag() uint64 {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return 0
}

type Unit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fields are populated based on type/alliance
	DisplayType        *DisplayType `protobuf:"varint,1,opt,name=display_type,json=displayType,enum=sc2proto.DisplayType" json:"display_type,omitempty"`
	Alliance           *Alliance    `protobuf:"varint,2,opt,name=alliance,enum=sc2proto.Alliance" json:"alliance,omitempty"`
	Tag                *uint64      `protobuf:"varint,3,opt,name=tag" json:"tag,omitempty"` // Unique identifier for a unit
	UnitType           *uint32      `protobuf:"varint,4,opt,name=unit_type,json=unitType" json:"unit_type,omitempty"`
	Owner              *int32       `protobuf:"varint,5,opt,name=owner" json:"owner,omitempty"`
	Pos                *Point       `protobuf:"bytes,6,opt,name=pos" json:"pos,omitempty"`
	Facing             *float32     `protobuf:"fixed32,7,opt,name=facing" json:"facing,omitempty"`
	Radius             *float32     `protobuf:"fixed32,8,opt,name=radius" json:"radius,omitempty"`
	BuildProgress      *float32     `protobuf:"fixed32,9,opt,name=build_progress,json=buildProgress" json:"build_progress,omitempty"` // Range: [0.0, 1.0]
	Cloak              *CloakState  `protobuf:"varint,10,opt,name=cloak,enum=sc2proto.CloakState" json:"cloak,omitempty"`
	BuffIds            []uint32     `protobuf:"varint,27,rep,name=buff_ids,json=buffIds" json:"buff_ids,omitempty"`
	DetectRange        *float32     `protobuf:"fixed32,31,opt,name=detect_range,json=detectRange" json:"detect_range,omitempty"`
	RadarRange         *float32     `protobuf:"fixed32,32,opt,name=radar_range,json=radarRange" json:"radar_range,omitempty"`
	IsSelected         *bool        `protobuf:"varint,11,opt,name=is_selected,json=isSelected" json:"is_selected,omitempty"`
	IsOnScreen         *bool        `protobuf:"varint,12,opt,name=is_on_screen,json=isOnScreen" json:"is_on_screen,omitempty"` // Visible and within the camera frustrum.
	IsBlip             *bool        `protobuf:"varint,13,opt,name=is_blip,json=isBlip" json:"is_blip,omitempty"`               // Detected by sensor tower
	IsPowered          *bool        `protobuf:"varint,35,opt,name=is_powered,json=isPowered" json:"is_powered,omitempty"`
	IsActive           *bool        `protobuf:"varint,39,opt,name=is_active,json=isActive" json:"is_active,omitempty"` // Building is training/researching (ie animated).
	AttackUpgradeLevel *int32       `protobuf:"varint,40,opt,name=attack_upgrade_level,json=attackUpgradeLevel" json:"attack_upgrade_level,omitempty"`
	ArmorUpgradeLevel  *int32       `protobuf:"varint,41,opt,name=armor_upgrade_level,json=armorUpgradeLevel" json:"armor_upgrade_level,omitempty"`
	ShieldUpgradeLevel *int32       `protobuf:"varint,42,opt,name=shield_upgrade_level,json=shieldUpgradeLevel" json:"shield_upgrade_level,omitempty"`
	// Not populated for snapshots
	Health          *float32 `protobuf:"fixed32,14,opt,name=health" json:"health,omitempty"`
	HealthMax       *float32 `protobuf:"fixed32,15,opt,name=health_max,json=healthMax" json:"health_max,omitempty"`
	Shield          *float32 `protobuf:"fixed32,16,opt,name=shield" json:"shield,omitempty"`
	ShieldMax       *float32 `protobuf:"fixed32,36,opt,name=shield_max,json=shieldMax" json:"shield_max,omitempty"`
	Energy          *float32 `protobuf:"fixed32,17,opt,name=energy" json:"energy,omitempty"`
	EnergyMax       *float32 `protobuf:"fixed32,37,opt,name=energy_max,json=energyMax" json:"energy_max,omitempty"`
	MineralContents *int32   `protobuf:"varint,18,opt,name=mineral_contents,json=mineralContents" json:"mineral_contents,omitempty"`
	VespeneContents *int32   `protobuf:"varint,19,opt,name=vespene_contents,json=vespeneContents" json:"vespene_contents,omitempty"`
	IsFlying        *bool    `protobuf:"varint,20,opt,name=is_flying,json=isFlying" json:"is_flying,omitempty"`
	IsBurrowed      *bool    `protobuf:"varint,21,opt,name=is_burrowed,json=isBurrowed" json:"is_burrowed,omitempty"`
	IsHallucination *bool    `protobuf:"varint,38,opt,name=is_hallucination,json=isHallucination" json:"is_hallucination,omitempty"` // Unit is your own or detected as a hallucination.
	// Not populated for enemies
	Orders             []*UnitOrder     `protobuf:"bytes,22,rep,name=orders" json:"orders,omitempty"`
	AddOnTag           *uint64          `protobuf:"varint,23,opt,name=add_on_tag,json=addOnTag" json:"add_on_tag,omitempty"`
	Passengers         []*PassengerUnit `protobuf:"bytes,24,rep,name=passengers" json:"passengers,omitempty"`
	CargoSpaceTaken    *int32           `protobuf:"varint,25,opt,name=cargo_space_taken,json=cargoSpaceTaken" json:"cargo_space_taken,omitempty"`
	CargoSpaceMax      *int32           `protobuf:"varint,26,opt,name=cargo_space_max,json=cargoSpaceMax" json:"cargo_space_max,omitempty"`
	AssignedHarvesters *int32           `protobuf:"varint,28,opt,name=assigned_harvesters,json=assignedHarvesters" json:"assigned_harvesters,omitempty"`
	IdealHarvesters    *int32           `protobuf:"varint,29,opt,name=ideal_harvesters,json=idealHarvesters" json:"ideal_harvesters,omitempty"`
	WeaponCooldown     *float32         `protobuf:"fixed32,30,opt,name=weapon_cooldown,json=weaponCooldown" json:"weapon_cooldown,omitempty"`
	EngagedTargetTag   *uint64          `protobuf:"varint,34,opt,name=engaged_target_tag,json=engagedTargetTag" json:"engaged_target_tag,omitempty"`
	BuffDurationRemain *int32           `protobuf:"varint,43,opt,name=buff_duration_remain,json=buffDurationRemain" json:"buff_duration_remain,omitempty"` // How long a buff or unit is still around (eg mule, broodling, chronoboost).
	BuffDurationMax    *int32           `protobuf:"varint,44,opt,name=buff_duration_max,json=buffDurationMax" json:"buff_duration_max,omitempty"`          // How long the buff or unit is still around (eg mule, broodling, chronoboost).
	RallyTargets       []*RallyTarget   `protobuf:"bytes,45,rep,name=rally_targets,json=rallyTargets" json:"rally_targets,omitempty"`
}

func (x *Unit) Reset() {
	*x = Unit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Unit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Unit) ProtoMessage() {}

func (x *Unit) ProtoReflect() protoreflect.Message {
	mi := &file_raw_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Unit.ProtoReflect.Descriptor instead.
func (*Unit) Descriptor() ([]byte, []int) {
	return file_raw_proto_rawDescGZIP(), []int{8}
}

func (x *Unit) GetDisplayType() DisplayType {
	if x != nil && x.DisplayType != nil {
		return *x.DisplayType
	}
	return DisplayType_Visible
}

func (x *Unit) GetAlliance() Alliance {
	if x != nil && x.Alliance != nil {
		return *x.Alliance
	}
	return Alliance_Self
}

func (x *Unit) GetTag() uint64 {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return 0
}

func (x *Unit) GetUnitType() uint32 {
	if x != nil && x.UnitType != nil {
		return *x.UnitType
	}
	return 0
}

func (x *Unit) GetOwner() int32 {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return 0
}

func (x *Unit) GetPos() *Point {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *Unit) GetFacing() float32 {
	if x != nil && x.Facing != nil {
		return *x.Facing
	}
	return 0
}

func (x *Unit) GetRadius() float32 {
	if x != nil && x.Radius != nil {
		return *x.Radius
	}
	return 0
}

func (x *Unit) GetBuildProgress() float32 {
	if x != nil && x.BuildProgress != nil {
		return *x.BuildProgress
	}
	return 0
}

func (x *Unit) GetCloak() CloakState {
	if x != nil && x.Cloak != nil {
		return *x.Cloak
	}
	return CloakState_CloakedUnknown
}

func (x *Unit) GetBuffIds() []uint32 {
	if x != nil {
		return x.BuffIds
	}
	return nil
}

func (x *Unit) GetDetectRange() float32 {
	if x != nil && x.DetectRange != nil {
		return *x.DetectRange
	}
	return 0
}

func (x *Unit) GetRadarRange() float32 {
	if x != nil && x.RadarRange != nil {
		return *x.RadarRange
	}
	return 0
}

func (x *Unit) GetIsSelected() bool {
	if x != nil && x.IsSelected != nil {
		return *x.IsSelected
	}
	return false
}

func (x *Unit) GetIsOnScreen() bool {
	if x != nil && x.IsOnScreen != nil {
		return *x.IsOnScreen
	}
	return false
}

func (x *Unit) GetIsBlip() bool {
	if x != nil && x.IsBlip != nil {
		return *x.IsBlip
	}
	return false
}

func (x *Unit) GetIsPowered() bool {
	if x != nil && x.IsPowered != nil {
		return *x.IsPowered
	}
	return false
}

func (x *Unit) GetIsActive() bool {
	if x != nil && x.IsActive != nil {
		return *x.IsActive
	}
	return false
}

func (x *Unit) GetAttackUpgradeLevel() int32 {
	if x != nil && x.AttackUpgradeLevel != nil {
		return *x.AttackUpgradeLevel
	}
	return 0
}

func (x *Unit) GetArmorUpgradeLevel() int32 {
	if x != nil && x.ArmorUpgradeLevel != nil {
		return *x.ArmorUpgradeLevel
	}
	return 0
}

func (x *Unit) GetShieldUpgradeLevel() int32 {
	if x != nil && x.ShieldUpgradeLevel != nil {
		return *x.ShieldUpgradeLevel
	}
	return 0
}

func (x *Unit) GetHealth() float32 {
	if x != nil && x.Health != nil {
		return *x.Health
	}
	return 0
}

func (x *Unit) GetHealthMax() float32 {
	if x != nil && x.HealthMax != nil {
		return *x.HealthMax
	}
	return 0
}

func (x *Unit) GetShield() float32 {
	if x != nil && x.Shield != nil {
		return *x.Shield
	}
	return 0
}

func (x *Unit) GetShieldMax() float32 {
	if x != nil && x.ShieldMax != nil {
		return *x.ShieldMax
	}
	return 0
}

func (x *Unit) GetEnergy() float32 {
	if x != nil && x.Energy != nil {
		return *x.Energy
	}
	return 0
}

func (x *Unit) GetEnergyMax() float32 {
	if x != nil && x.EnergyMax != nil {
		return *x.EnergyMax
	}
	return 0
}

func (x *Unit) GetMineralContents() int32 {
	if x != nil && x.MineralContents != nil {
		return *x.MineralContents
	}
	return 0
}

func (x *Unit) GetVespeneContents() int32 {
	if x != nil && x.VespeneContents != nil {
		return *x.VespeneContents
	}
	return 0
}

func (x *Unit) GetIsFlying() bool {
	if x != nil && x.IsFlying != nil {
		return *x.IsFlying
	}
	return false
}

func (x *Unit) GetIsBurrowed() bool {
	if x != nil && x.IsBurrowed != nil {
		return *x.IsBurrowed
	}
	return false
}

func (x *Unit) GetIsHallucination() bool {
	if x != nil && x.IsHallucination != nil {
		return *x.IsHallucination
	}
	return false
}

func (x *Unit) GetOrders() []*UnitOrder {
	if x != nil {
		return x.Orders
	}
	return nil
}

func (x *Unit) GetAddOnTag() uint64 {
	if x != nil && x.AddOnTag != nil {
		return *x.AddOnTag
	}
	return 0
}

func (x *Unit) GetPassengers() []*PassengerUnit {
	if x != nil {
		return x.Passengers
	}
	return nil
}

func (x *Unit) GetCargoSpaceTaken() int32 {
	if x != nil && x.CargoSpaceTaken != nil {
		return *x.CargoSpaceTaken
	}
	return 0
}

func (x *Unit) GetCargoSpaceMax() int32 {
	if x != nil && x.CargoSpaceMax != nil {
		return *x.CargoSpaceMax
	}
	return 0
}

func (x *Unit) GetAssignedHarvesters() int32 {
	if x != nil && x.AssignedHarvesters != nil {
		return *x.AssignedHarvesters
	}
	return 0
}

func (x *Unit) GetIdealHarvesters() int32 {
	if x != nil && x.IdealHarvesters != nil {
		return *x.IdealHarvesters
	}
	return 0
}

func (x *Unit) GetWeaponCooldown() float32 {
	if x != nil && x.WeaponCooldown != nil {
		return *x.WeaponCooldown
	}
	return 0
}

func (x *Unit) GetEngagedTargetTag() uint64 {
	if x != nil && x.EngagedTargetTag != nil {
		return *x.EngagedTargetTag
	}
	return 0
}

func (x *Unit) GetBuffDurationRemain() int32 {
	if x != nil && x.BuffDurationRemain != nil {
		return *x.BuffDurationRemain
	}
	return 0
}

func (x *Unit) GetBuffDurationMax() int32 {
	if x != nil && x.BuffDurationMax != nil {
		return *x.BuffDurationMax
	}
	return 0
}

func (x *Unit) GetRallyTargets() []*RallyTarget {
	if x != nil {
		return x.RallyTargets
	}
	return nil
}

type MapState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Visibility *ImageData `protobuf:"bytes,1,opt,name=visibility" json:"visibility,omitempty"` // 1 byte visibility layer.
	Creep      *ImageData `protobuf:"bytes,2,opt,name=creep" json:"creep,omitempty"`           // 1 bit creep layer.
}

func (x *MapState) Reset() {
	*x = MapState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapState) ProtoMessage() {}

func (x *MapState) ProtoReflect() protoreflect.Message {
	mi := &file_raw_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapState.ProtoReflect.Descriptor instead.
func (*MapState) Descriptor() ([]byte, []int) {
	return file_raw_proto_rawDescGZIP(), []int{9}
}

func (x *MapState) GetVisibility() *ImageData {
	if x != nil {
		return x.Visibility
	}
	return nil
}

func (x *MapState) GetCreep() *ImageData {
	if x != nil {
		return x.Creep
	}
	return nil
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeadUnits []uint64 `protobuf:"varint,1,rep,name=dead_units,json=deadUnits" json:"dead_units,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_raw_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_raw_proto_rawDescGZIP(), []int{10}
}

func (x *Event) GetDeadUnits() []uint64 {
	if x != nil {
		return x.DeadUnits
	}
	return nil
}

type Effect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EffectId *uint32    `protobuf:"varint,1,opt,name=effect_id,json=effectId" json:"effect_id,omitempty"`
	Pos      []*Point2D `protobuf:"bytes,2,rep,name=pos" json:"pos,omitempty"` // Effect may impact multiple locations. (eg. Lurker attack)
	Alliance *Alliance  `protobuf:"varint,3,opt,name=alliance,enum=sc2proto.Alliance" json:"alliance,omitempty"`
	Owner    *int32     `protobuf:"varint,4,opt,name=owner" json:"owner,omitempty"`
	Radius   *float32   `protobuf:"fixed32,5,opt,name=radius" json:"radius,omitempty"`
}

func (x *Effect) Reset() {
	*x = Effect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Effect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Effect) ProtoMessage() {}

func (x *Effect) ProtoReflect() protoreflect.Message {
	mi := &file_raw_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Effect.ProtoReflect.Descriptor instead.
func (*Effect) Descriptor() ([]byte, []int) {
	return file_raw_proto_rawDescGZIP(), []int{11}
}

func (x *Effect) GetEffectId() uint32 {
	if x != nil && x.EffectId != nil {
		return *x.EffectId
	}
	return 0
}

func (x *Effect) GetPos() []*Point2D {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *Effect) GetAlliance() Alliance {
	if x != nil && x.Alliance != nil {
		return *x.Alliance
	}
	return Alliance_Self
}

func (x *Effect) GetOwner() int32 {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return 0
}

func (x *Effect) GetRadius() float32 {
	if x != nil && x.Radius != nil {
		return *x.Radius
	}
	return 0
}

type ActionRaw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Action:
	//	*ActionRaw_UnitCommand
	//	*ActionRaw_CameraMove
	//	*ActionRaw_ToggleAutocast
	Action isActionRaw_Action `protobuf_oneof:"action"`
}

func (x *ActionRaw) Reset() {
	*x = ActionRaw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionRaw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionRaw) ProtoMessage() {}

func (x *ActionRaw) ProtoReflect() protoreflect.Message {
	mi := &file_raw_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionRaw.ProtoReflect.Descriptor instead.
func (*ActionRaw) Descriptor() ([]byte, []int) {
	return file_raw_proto_rawDescGZIP(), []int{12}
}

func (m *ActionRaw) GetAction() isActionRaw_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *ActionRaw) GetUnitCommand() *ActionRawUnitCommand {
	if x, ok := x.GetAction().(*ActionRaw_UnitCommand); ok {
		return x.UnitCommand
	}
	return nil
}

func (x *ActionRaw) GetCameraMove() *ActionRawCameraMove {
	if x, ok := x.GetAction().(*ActionRaw_CameraMove); ok {
		return x.CameraMove
	}
	return nil
}

func (x *ActionRaw) GetToggleAutocast() *ActionRawToggleAutocast {
	if x, ok := x.GetAction().(*ActionRaw_ToggleAutocast); ok {
		return x.ToggleAutocast
	}
	return nil
}

type isActionRaw_Action interface {
	isActionRaw_Action()
}

type ActionRaw_UnitCommand struct {
	UnitCommand *ActionRawUnitCommand `protobuf:"bytes,1,opt,name=unit_command,json=unitCommand,oneof"`
}

type ActionRaw_CameraMove struct {
	CameraMove *ActionRawCameraMove `protobuf:"bytes,2,opt,name=camera_move,json=cameraMove,oneof"`
}

type ActionRaw_ToggleAutocast struct {
	ToggleAutocast *ActionRawToggleAutocast `protobuf:"bytes,3,opt,name=toggle_autocast,json=toggleAutocast,oneof"`
}

func (*ActionRaw_UnitCommand) isActionRaw_Action() {}

func (*ActionRaw_CameraMove) isActionRaw_Action() {}

func (*ActionRaw_ToggleAutocast) isActionRaw_Action() {}

type ActionRawUnitCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AbilityId *int32 `protobuf:"varint,1,opt,name=ability_id,json=abilityId" json:"ability_id,omitempty"`
	// Types that are assignable to Target:
	//	*ActionRawUnitCommand_TargetWorldSpacePos
	//	*ActionRawUnitCommand_TargetUnitTag
	Target       isActionRawUnitCommand_Target `protobuf_oneof:"target"`
	UnitTags     []uint64                      `protobuf:"varint,4,rep,name=unit_tags,json=unitTags" json:"unit_tags,omitempty"`
	QueueCommand *bool                         `protobuf:"varint,5,opt,name=queue_command,json=queueCommand" json:"queue_command,omitempty"`
}

func (x *ActionRawUnitCommand) Reset() {
	*x = ActionRawUnitCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionRawUnitCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionRawUnitCommand) ProtoMessage() {}

func (x *ActionRawUnitCommand) ProtoReflect() protoreflect.Message {
	mi := &file_raw_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionRawUnitCommand.ProtoReflect.Descriptor instead.
func (*ActionRawUnitCommand) Descriptor() ([]byte, []int) {
	return file_raw_proto_rawDescGZIP(), []int{13}
}

func (x *ActionRawUnitCommand) GetAbilityId() int32 {
	if x != nil && x.AbilityId != nil {
		return *x.AbilityId
	}
	return 0
}

func (m *ActionRawUnitCommand) GetTarget() isActionRawUnitCommand_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (x *ActionRawUnitCommand) GetTargetWorldSpacePos() *Point2D {
	if x, ok := x.GetTarget().(*ActionRawUnitCommand_TargetWorldSpacePos); ok {
		return x.TargetWorldSpacePos
	}
	return nil
}

func (x *ActionRawUnitCommand) GetTargetUnitTag() uint64 {
	if x, ok := x.GetTarget().(*ActionRawUnitCommand_TargetUnitTag); ok {
		return x.TargetUnitTag
	}
	return 0
}

func (x *ActionRawUnitCommand) GetUnitTags() []uint64 {
	if x != nil {
		return x.UnitTags
	}
	return nil
}

func (x *ActionRawUnitCommand) GetQueueCommand() bool {
	if x != nil && x.QueueCommand != nil {
		return *x.QueueCommand
	}
	return false
}

type isActionRawUnitCommand_Target interface {
	isActionRawUnitCommand_Target()
}

type ActionRawUnitCommand_TargetWorldSpacePos struct {
	TargetWorldSpacePos *Point2D `protobuf:"bytes,2,opt,name=target_world_space_pos,json=targetWorldSpacePos,oneof"`
}

type ActionRawUnitCommand_TargetUnitTag struct {
	TargetUnitTag uint64 `protobuf:"varint,3,opt,name=target_unit_tag,json=targetUnitTag,oneof"`
}

func (*ActionRawUnitCommand_TargetWorldSpacePos) isActionRawUnitCommand_Target() {}

func (*ActionRawUnitCommand_TargetUnitTag) isActionRawUnitCommand_Target() {}

type ActionRawCameraMove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CenterWorldSpace *Point `protobuf:"bytes,1,opt,name=center_world_space,json=centerWorldSpace" json:"center_world_space,omitempty"`
}

func (x *ActionRawCameraMove) Reset() {
	*x = ActionRawCameraMove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionRawCameraMove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionRawCameraMove) ProtoMessage() {}

func (x *ActionRawCameraMove) ProtoReflect() protoreflect.Message {
	mi := &file_raw_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionRawCameraMove.ProtoReflect.Descriptor instead.
func (*ActionRawCameraMove) Descriptor() ([]byte, []int) {
	return file_raw_proto_rawDescGZIP(), []int{14}
}

func (x *ActionRawCameraMove) GetCenterWorldSpace() *Point {
	if x != nil {
		return x.CenterWorldSpace
	}
	return nil
}

type ActionRawToggleAutocast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AbilityId *int32   `protobuf:"varint,1,opt,name=ability_id,json=abilityId" json:"ability_id,omitempty"`
	UnitTags  []uint64 `protobuf:"varint,2,rep,name=unit_tags,json=unitTags" json:"unit_tags,omitempty"`
}

func (x *ActionRawToggleAutocast) Reset() {
	*x = ActionRawToggleAutocast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionRawToggleAutocast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionRawToggleAutocast) ProtoMessage() {}

func (x *ActionRawToggleAutocast) ProtoReflect() protoreflect.Message {
	mi := &file_raw_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionRawToggleAutocast.ProtoReflect.Descriptor instead.
func (*ActionRawToggleAutocast) Descriptor() ([]byte, []int) {
	return file_raw_proto_rawDescGZIP(), []int{15}
}

func (x *ActionRawToggleAutocast) GetAbilityId() int32 {
	if x != nil && x.AbilityId != nil {
		return *x.AbilityId
	}
	return 0
}

func (x *ActionRawToggleAutocast) GetUnitTags() []uint64 {
	if x != nil {
		return x.UnitTags
	}
	return nil
}

var File_raw_proto protoreflect.FileDescriptor

var file_raw_proto_rawDesc = []byte{
	0x0a, 0x09, 0x72, 0x61, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73, 0x63, 0x32,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xdf, 0x02, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x61, 0x77,
	0x12, 0x2c, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69,
	0x7a, 0x65, 0x32, 0x44, 0x49, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x36,
	0x0a, 0x0c, 0x70, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x72, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x70, 0x61, 0x74, 0x68, 0x69,
	0x6e, 0x67, 0x47, 0x72, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x0e, 0x74, 0x65, 0x72, 0x72, 0x61, 0x69,
	0x6e, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0d, 0x74, 0x65, 0x72, 0x72, 0x61, 0x69, 0x6e, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x67, 0x72, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x32,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0d, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x69, 0x64, 0x12, 0x39,
	0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x49, 0x52, 0x0c, 0x70, 0x6c, 0x61,
	0x79, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x65, 0x61, 0x12, 0x3a, 0x0a, 0x0f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x32, 0x44, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x92, 0x02, 0x0a, 0x0e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x77, 0x12, 0x2b, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x61, 0x77, 0x52, 0x06, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x55, 0x6e, 0x69, 0x74, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x09, 0x6d,
	0x61, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x05,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x63,
	0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x12,
	0x29, 0x0a, 0x05, 0x72, 0x61, 0x64, 0x61, 0x72, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x64, 0x61, 0x72, 0x52,
	0x69, 0x6e, 0x67, 0x52, 0x05, 0x72, 0x61, 0x64, 0x61, 0x72, 0x22, 0x46, 0x0a, 0x09, 0x52, 0x61,
	0x64, 0x61, 0x72, 0x52, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61,
	0x64, 0x69, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x72, 0x61, 0x64, 0x69,
	0x75, 0x73, 0x22, 0x5a, 0x0a, 0x0b, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x21, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x03, 0x70, 0x6f, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x91,
	0x01, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x61, 0x77, 0x12, 0x3a, 0x0a, 0x0d,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0c, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x63, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x49,
	0x64, 0x73, 0x22, 0xc2, 0x01, 0x0a, 0x09, 0x55, 0x6e, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x46, 0x0a, 0x16, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x50, 0x6f, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x00, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x61,
	0x67, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x42, 0x08, 0x0a,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0xe3, 0x01, 0x0a, 0x0d, 0x50, 0x61, 0x73, 0x73,
	0x65, 0x6e, 0x67, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x6d, 0x61,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x4d,
	0x61, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x06, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09,
	0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x65,
	0x72, 0x67, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x65, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4d, 0x61, 0x78,
	0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x46, 0x0a,
	0x0b, 0x52, 0x61, 0x6c, 0x6c, 0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x05,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x63,
	0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x05, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0xef, 0x0c, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x38,
	0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x61, 0x6c, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x73, 0x63, 0x32,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08,
	0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e,
	0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x75,
	0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x21, 0x0a,
	0x03, 0x70, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x63, 0x32,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x03, 0x70, 0x6f, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x06, 0x66, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x69,
	0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x61, 0x6b,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x61, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x63, 0x6c,
	0x6f, 0x61, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x1b, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x75, 0x66, 0x66, 0x49, 0x64, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x64, 0x61, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x72, 0x61, 0x64, 0x61, 0x72, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4f, 0x6e, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x62, 0x6c, 0x69, 0x70,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x42, 0x6c, 0x69, 0x70, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x65, 0x64, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x65, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x13,
	0x61, 0x72, 0x6d, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x61, 0x72, 0x6d, 0x6f, 0x72,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x30, 0x0a, 0x14,
	0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x73, 0x68, 0x69, 0x65,
	0x6c, 0x64, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x5f, 0x6d, 0x61, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x4d, 0x61, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x09, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x78, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x65, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x6d,
	0x61, 0x78, 0x18, 0x25, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x4d, 0x61, 0x78, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d,
	0x69, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x76, 0x65, 0x73, 0x70, 0x65, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x76, 0x65, 0x73, 0x70, 0x65, 0x6e,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f,
	0x66, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x46, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x62, 0x75, 0x72,
	0x72, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x42,
	0x75, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x68, 0x61,
	0x6c, 0x6c, 0x75, 0x63, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x69, 0x73, 0x48, 0x61, 0x6c, 0x6c, 0x75, 0x63, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x16, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e,
	0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x1c, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x5f, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x61, 0x64, 0x64, 0x4f, 0x6e, 0x54, 0x61, 0x67, 0x12, 0x37, 0x0a,
	0x0a, 0x70, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x73,
	0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73,
	0x65, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x53, 0x70, 0x61, 0x63, 0x65, 0x54, 0x61, 0x6b,
	0x65, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x61, 0x72,
	0x67, 0x6f, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x69,
	0x64, 0x65, 0x61, 0x6c, 0x5f, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x69, 0x64, 0x65, 0x61, 0x6c, 0x48, 0x61, 0x72, 0x76,
	0x65, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0e, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x12,
	0x2c, 0x0a, 0x12, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x22, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x65, 0x6e, 0x67,
	0x61, 0x67, 0x65, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x61, 0x67, 0x12, 0x30, 0x0a,
	0x14, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x62, 0x75, 0x66,
	0x66, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x2a, 0x0a, 0x11, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x61, 0x78, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x62, 0x75, 0x66, 0x66,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x12, 0x3a, 0x0a, 0x0d, 0x72,
	0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x2d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61,
	0x6c, 0x6c, 0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x0c, 0x72, 0x61, 0x6c, 0x6c, 0x79,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x22, 0x6a, 0x0a, 0x08, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x63, 0x72, 0x65, 0x65,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x63, 0x72,
	0x65, 0x65, 0x70, 0x22, 0x26, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x64, 0x65, 0x61, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x09, 0x64, 0x65, 0x61, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x06,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x32, 0x44, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x61, 0x6c, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x73, 0x63, 0x32,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08,
	0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06,
	0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x22, 0xea, 0x01, 0x0a, 0x09, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x61, 0x77, 0x12, 0x43, 0x0a, 0x0c, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x63, 0x32,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x77, 0x55,
	0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x6e,
	0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x61, 0x77, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x6f, 0x76, 0x65, 0x48, 0x00, 0x52,
	0x0a, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x6f, 0x76, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x74,
	0x6f, 0x67, 0x67, 0x6c, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x63, 0x61, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x77, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x41,
	0x75, 0x74, 0x6f, 0x63, 0x61, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x6f, 0x67, 0x67, 0x6c,
	0x65, 0x41, 0x75, 0x74, 0x6f, 0x63, 0x61, 0x73, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xf5, 0x01, 0x0a, 0x14, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61,
	0x77, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x16, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x63,
	0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x32, 0x44, 0x48, 0x00,
	0x52, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x50, 0x6f, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00,
	0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x61, 0x67, 0x12,
	0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x54, 0x61, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x42, 0x08, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x54, 0x0a, 0x13, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x77, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x6f,
	0x76, 0x65, 0x12, 0x3d, 0x0a, 0x12, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x77, 0x6f, 0x72,
	0x6c, 0x64, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x10, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x22, 0x55, 0x0a, 0x17, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x77, 0x54, 0x6f,
	0x67, 0x67, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x63, 0x61, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x6e, 0x69, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x08,
	0x75, 0x6e, 0x69, 0x74, 0x54, 0x61, 0x67, 0x73, 0x2a, 0x45, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x10, 0x03, 0x12, 0x0f,
	0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x10, 0x04, 0x2a,
	0x36, 0x0a, 0x08, 0x41, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x53,
	0x65, 0x6c, 0x66, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x6c, 0x6c, 0x79, 0x10, 0x02, 0x12,
	0x0b, 0x0a, 0x07, 0x4e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05,
	0x45, 0x6e, 0x65, 0x6d, 0x79, 0x10, 0x04, 0x2a, 0x65, 0x0a, 0x0a, 0x43, 0x6c, 0x6f, 0x61, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x6c, 0x6f, 0x61, 0x6b, 0x65, 0x64,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x6c, 0x6f,
	0x61, 0x6b, 0x65, 0x64, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x6c, 0x6f, 0x61, 0x6b, 0x65,
	0x64, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4e,
	0x6f, 0x74, 0x43, 0x6c, 0x6f, 0x61, 0x6b, 0x65, 0x64, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x43,
	0x6c, 0x6f, 0x61, 0x6b, 0x65, 0x64, 0x41, 0x6c, 0x6c, 0x69, 0x65, 0x64, 0x10, 0x04, 0x42, 0x2c,
	0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x69, 0x6e,
	0x77, 0x75, 0x7a, 0x68, 0x61, 0x6f, 0x2f, 0x73, 0x63, 0x32, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_raw_proto_rawDescOnce sync.Once
	file_raw_proto_rawDescData = file_raw_proto_rawDesc
)

func file_raw_proto_rawDescGZIP() []byte {
	file_raw_proto_rawDescOnce.Do(func() {
		file_raw_proto_rawDescData = protoimpl.X.CompressGZIP(file_raw_proto_rawDescData)
	})
	return file_raw_proto_rawDescData
}

var file_raw_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_raw_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_raw_proto_goTypes = []interface{}{
	(DisplayType)(0),                // 0: sc2proto.DisplayType
	(Alliance)(0),                   // 1: sc2proto.Alliance
	(CloakState)(0),                 // 2: sc2proto.CloakState
	(*StartRaw)(nil),                // 3: sc2proto.StartRaw
	(*ObservationRaw)(nil),          // 4: sc2proto.ObservationRaw
	(*RadarRing)(nil),               // 5: sc2proto.RadarRing
	(*PowerSource)(nil),             // 6: sc2proto.PowerSource
	(*PlayerRaw)(nil),               // 7: sc2proto.PlayerRaw
	(*UnitOrder)(nil),               // 8: sc2proto.UnitOrder
	(*PassengerUnit)(nil),           // 9: sc2proto.PassengerUnit
	(*RallyTarget)(nil),             // 10: sc2proto.RallyTarget
	(*Unit)(nil),                    // 11: sc2proto.Unit
	(*MapState)(nil),                // 12: sc2proto.MapState
	(*Event)(nil),                   // 13: sc2proto.Event
	(*Effect)(nil),                  // 14: sc2proto.Effect
	(*ActionRaw)(nil),               // 15: sc2proto.ActionRaw
	(*ActionRawUnitCommand)(nil),    // 16: sc2proto.ActionRawUnitCommand
	(*ActionRawCameraMove)(nil),     // 17: sc2proto.ActionRawCameraMove
	(*ActionRawToggleAutocast)(nil), // 18: sc2proto.ActionRawToggleAutocast
	(*Size2DI)(nil),                 // 19: sc2proto.Size2DI
	(*ImageData)(nil),               // 20: sc2proto.ImageData
	(*RectangleI)(nil),              // 21: sc2proto.RectangleI
	(*Point2D)(nil),                 // 22: sc2proto.Point2D
	(*Point)(nil),                   // 23: sc2proto.Point
}
var file_raw_proto_depIdxs = []int32{
	19, // 0: sc2proto.StartRaw.map_size:type_name -> sc2proto.Size2DI
	20, // 1: sc2proto.StartRaw.pathing_grid:type_name -> sc2proto.ImageData
	20, // 2: sc2proto.StartRaw.terrain_height:type_name -> sc2proto.ImageData
	20, // 3: sc2proto.StartRaw.placement_grid:type_name -> sc2proto.ImageData
	21, // 4: sc2proto.StartRaw.playable_area:type_name -> sc2proto.RectangleI
	22, // 5: sc2proto.StartRaw.start_locations:type_name -> sc2proto.Point2D
	7,  // 6: sc2proto.ObservationRaw.player:type_name -> sc2proto.PlayerRaw
	11, // 7: sc2proto.ObservationRaw.units:type_name -> sc2proto.Unit
	12, // 8: sc2proto.ObservationRaw.map_state:type_name -> sc2proto.MapState
	13, // 9: sc2proto.ObservationRaw.event:type_name -> sc2proto.Event
	14, // 10: sc2proto.ObservationRaw.effects:type_name -> sc2proto.Effect
	5,  // 11: sc2proto.ObservationRaw.radar:type_name -> sc2proto.RadarRing
	23, // 12: sc2proto.RadarRing.pos:type_name -> sc2proto.Point
	23, // 13: sc2proto.PowerSource.pos:type_name -> sc2proto.Point
	6,  // 14: sc2proto.PlayerRaw.power_sources:type_name -> sc2proto.PowerSource
	23, // 15: sc2proto.PlayerRaw.camera:type_name -> sc2proto.Point
	23, // 16: sc2proto.UnitOrder.target_world_space_pos:type_name -> sc2proto.Point
	23, // 17: sc2proto.RallyTarget.point:type_name -> sc2proto.Point
	0,  // 18: sc2proto.Unit.display_type:type_name -> sc2proto.DisplayType
	1,  // 19: sc2proto.Unit.alliance:type_name -> sc2proto.Alliance
	23, // 20: sc2proto.Unit.pos:type_name -> sc2proto.Point
	2,  // 21: sc2proto.Unit.cloak:type_name -> sc2proto.CloakState
	8,  // 22: sc2proto.Unit.orders:type_name -> sc2proto.UnitOrder
	9,  // 23: sc2proto.Unit.passengers:type_name -> sc2proto.PassengerUnit
	10, // 24: sc2proto.Unit.rally_targets:type_name -> sc2proto.RallyTarget
	20, // 25: sc2proto.MapState.visibility:type_name -> sc2proto.ImageData
	20, // 26: sc2proto.MapState.creep:type_name -> sc2proto.ImageData
	22, // 27: sc2proto.Effect.pos:type_name -> sc2proto.Point2D
	1,  // 28: sc2proto.Effect.alliance:type_name -> sc2proto.Alliance
	16, // 29: sc2proto.ActionRaw.unit_command:type_name -> sc2proto.ActionRawUnitCommand
	17, // 30: sc2proto.ActionRaw.camera_move:type_name -> sc2proto.ActionRawCameraMove
	18, // 31: sc2proto.ActionRaw.toggle_autocast:type_name -> sc2proto.ActionRawToggleAutocast
	22, // 32: sc2proto.ActionRawUnitCommand.target_world_space_pos:type_name -> sc2proto.Point2D
	23, // 33: sc2proto.ActionRawCameraMove.center_world_space:type_name -> sc2proto.Point
	34, // [34:34] is the sub-list for method output_type
	34, // [34:34] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_raw_proto_init() }
func file_raw_proto_init() {
	if File_raw_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_raw_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartRaw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservationRaw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RadarRing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PowerSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerRaw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnitOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassengerUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RallyTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Unit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Effect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionRaw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionRawUnitCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionRawCameraMove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionRawToggleAutocast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_raw_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*UnitOrder_TargetWorldSpacePos)(nil),
		(*UnitOrder_TargetUnitTag)(nil),
	}
	file_raw_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*ActionRaw_UnitCommand)(nil),
		(*ActionRaw_CameraMove)(nil),
		(*ActionRaw_ToggleAutocast)(nil),
	}
	file_raw_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*ActionRawUnitCommand_TargetWorldSpacePos)(nil),
		(*ActionRawUnitCommand_TargetUnitTag)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_raw_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_raw_proto_goTypes,
		DependencyIndexes: file_raw_proto_depIdxs,
		EnumInfos:         file_raw_proto_enumTypes,
		MessageInfos:      file_raw_proto_msgTypes,
	}.Build()
	File_raw_proto = out.File
	file_raw_proto_rawDesc = nil
	file_raw_proto_goTypes = nil
	file_raw_proto_depIdxs = nil
}
