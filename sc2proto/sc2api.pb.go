// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.0
// source: sc2api.proto

package sc2proto

import (
	"reflect"
	"sync"

	"google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Status int32

const (
	Status_launched  Status = 1  // Game has been launch and is not yet doing anything.
	Status_init_game Status = 2  // Create game has been called, and the host is awaiting players.
	Status_in_game   Status = 3  // In a single or multiplayer game.
	Status_in_replay Status = 4  // In a replay.
	Status_ended     Status = 5  // Game has ended, can still request game info, but ready for a new game.
	Status_quit      Status = 6  // Application is shutting down.
	Status_unknown   Status = 99 // Should not happen, but indicates an error if it occurs.
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		1:  "launched",
		2:  "init_game",
		3:  "in_game",
		4:  "in_replay",
		5:  "ended",
		6:  "quit",
		99: "unknown",
	}
	Status_value = map[string]int32{
		"launched":  1,
		"init_game": 2,
		"in_game":   3,
		"in_replay": 4,
		"ended":     5,
		"quit":      6,
		"unknown":   99,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_sc2api_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_sc2api_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Status) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Status(num)
	return nil
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{0}
}

type Difficulty int32

const (
	Difficulty_VeryEasy    Difficulty = 1
	Difficulty_Easy        Difficulty = 2
	Difficulty_Medium      Difficulty = 3
	Difficulty_MediumHard  Difficulty = 4
	Difficulty_Hard        Difficulty = 5
	Difficulty_Harder      Difficulty = 6
	Difficulty_VeryHard    Difficulty = 7
	Difficulty_CheatVision Difficulty = 8
	Difficulty_CheatMoney  Difficulty = 9
	Difficulty_CheatInsane Difficulty = 10
)

// Enum value maps for Difficulty.
var (
	Difficulty_name = map[int32]string{
		1:  "VeryEasy",
		2:  "Easy",
		3:  "Medium",
		4:  "MediumHard",
		5:  "Hard",
		6:  "Harder",
		7:  "VeryHard",
		8:  "CheatVision",
		9:  "CheatMoney",
		10: "CheatInsane",
	}
	Difficulty_value = map[string]int32{
		"VeryEasy":    1,
		"Easy":        2,
		"Medium":      3,
		"MediumHard":  4,
		"Hard":        5,
		"Harder":      6,
		"VeryHard":    7,
		"CheatVision": 8,
		"CheatMoney":  9,
		"CheatInsane": 10,
	}
)

func (x Difficulty) Enum() *Difficulty {
	p := new(Difficulty)
	*p = x
	return p
}

func (x Difficulty) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Difficulty) Descriptor() protoreflect.EnumDescriptor {
	return file_sc2api_proto_enumTypes[1].Descriptor()
}

func (Difficulty) Type() protoreflect.EnumType {
	return &file_sc2api_proto_enumTypes[1]
}

func (x Difficulty) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Difficulty) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Difficulty(num)
	return nil
}

// Deprecated: Use Difficulty.Descriptor instead.
func (Difficulty) EnumDescriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{1}
}

type PlayerType int32

const (
	PlayerType_Participant PlayerType = 1
	PlayerType_Computer    PlayerType = 2
	PlayerType_Observer    PlayerType = 3
)

// Enum value maps for PlayerType.
var (
	PlayerType_name = map[int32]string{
		1: "Participant",
		2: "Computer",
		3: "Observer",
	}
	PlayerType_value = map[string]int32{
		"Participant": 1,
		"Computer":    2,
		"Observer":    3,
	}
)

func (x PlayerType) Enum() *PlayerType {
	p := new(PlayerType)
	*p = x
	return p
}

func (x PlayerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerType) Descriptor() protoreflect.EnumDescriptor {
	return file_sc2api_proto_enumTypes[2].Descriptor()
}

func (PlayerType) Type() protoreflect.EnumType {
	return &file_sc2api_proto_enumTypes[2]
}

func (x PlayerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PlayerType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PlayerType(num)
	return nil
}

// Deprecated: Use PlayerType.Descriptor instead.
func (PlayerType) EnumDescriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{2}
}

type AIBuild int32

const (
	AIBuild_RandomBuild AIBuild = 1
	AIBuild_Rush        AIBuild = 2
	AIBuild_Timing      AIBuild = 3
	AIBuild_Power       AIBuild = 4
	AIBuild_Macro       AIBuild = 5
	AIBuild_Air         AIBuild = 6
)

// Enum value maps for AIBuild.
var (
	AIBuild_name = map[int32]string{
		1: "RandomBuild",
		2: "Rush",
		3: "Timing",
		4: "Power",
		5: "Macro",
		6: "Air",
	}
	AIBuild_value = map[string]int32{
		"RandomBuild": 1,
		"Rush":        2,
		"Timing":      3,
		"Power":       4,
		"Macro":       5,
		"Air":         6,
	}
)

func (x AIBuild) Enum() *AIBuild {
	p := new(AIBuild)
	*p = x
	return p
}

func (x AIBuild) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AIBuild) Descriptor() protoreflect.EnumDescriptor {
	return file_sc2api_proto_enumTypes[3].Descriptor()
}

func (AIBuild) Type() protoreflect.EnumType {
	return &file_sc2api_proto_enumTypes[3]
}

func (x AIBuild) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AIBuild) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AIBuild(num)
	return nil
}

// Deprecated: Use AIBuild.Descriptor instead.
func (AIBuild) EnumDescriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{3}
}

type Alert int32

const (
	Alert_AlertError             Alert = 3
	Alert_AddOnComplete          Alert = 4
	Alert_BuildingComplete       Alert = 5
	Alert_BuildingUnderAttack    Alert = 6
	Alert_LarvaHatched           Alert = 7
	Alert_MergeComplete          Alert = 8
	Alert_MineralsExhausted      Alert = 9
	Alert_MorphComplete          Alert = 10
	Alert_MothershipComplete     Alert = 11
	Alert_MULEExpired            Alert = 12
	Alert_NuclearLaunchDetected  Alert = 1
	Alert_NukeComplete           Alert = 13
	Alert_NydusWormDetected      Alert = 2
	Alert_ResearchComplete       Alert = 14
	Alert_TrainError             Alert = 15
	Alert_TrainUnitComplete      Alert = 16
	Alert_TrainWorkerComplete    Alert = 17
	Alert_TransformationComplete Alert = 18
	Alert_UnitUnderAttack        Alert = 19
	Alert_UpgradeComplete        Alert = 20
	Alert_VespeneExhausted       Alert = 21
	Alert_WarpInComplete         Alert = 22
)

// Enum value maps for Alert.
var (
	Alert_name = map[int32]string{
		3:  "AlertError",
		4:  "AddOnComplete",
		5:  "BuildingComplete",
		6:  "BuildingUnderAttack",
		7:  "LarvaHatched",
		8:  "MergeComplete",
		9:  "MineralsExhausted",
		10: "MorphComplete",
		11: "MothershipComplete",
		12: "MULEExpired",
		1:  "NuclearLaunchDetected",
		13: "NukeComplete",
		2:  "NydusWormDetected",
		14: "ResearchComplete",
		15: "TrainError",
		16: "TrainUnitComplete",
		17: "TrainWorkerComplete",
		18: "TransformationComplete",
		19: "UnitUnderAttack",
		20: "UpgradeComplete",
		21: "VespeneExhausted",
		22: "WarpInComplete",
	}
	Alert_value = map[string]int32{
		"AlertError":             3,
		"AddOnComplete":          4,
		"BuildingComplete":       5,
		"BuildingUnderAttack":    6,
		"LarvaHatched":           7,
		"MergeComplete":          8,
		"MineralsExhausted":      9,
		"MorphComplete":          10,
		"MothershipComplete":     11,
		"MULEExpired":            12,
		"NuclearLaunchDetected":  1,
		"NukeComplete":           13,
		"NydusWormDetected":      2,
		"ResearchComplete":       14,
		"TrainError":             15,
		"TrainUnitComplete":      16,
		"TrainWorkerComplete":    17,
		"TransformationComplete": 18,
		"UnitUnderAttack":        19,
		"UpgradeComplete":        20,
		"VespeneExhausted":       21,
		"WarpInComplete":         22,
	}
)

func (x Alert) Enum() *Alert {
	p := new(Alert)
	*p = x
	return p
}

func (x Alert) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Alert) Descriptor() protoreflect.EnumDescriptor {
	return file_sc2api_proto_enumTypes[4].Descriptor()
}

func (Alert) Type() protoreflect.EnumType {
	return &file_sc2api_proto_enumTypes[4]
}

func (x Alert) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Alert) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Alert(num)
	return nil
}

// Deprecated: Use Alert.Descriptor instead.
func (Alert) EnumDescriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{4}
}

type Result int32

const (
	Result_Victory   Result = 1
	Result_Defeat    Result = 2
	Result_Tie       Result = 3
	Result_Undecided Result = 4
)

// Enum value maps for Result.
var (
	Result_name = map[int32]string{
		1: "Victory",
		2: "Defeat",
		3: "Tie",
		4: "Undecided",
	}
	Result_value = map[string]int32{
		"Victory":   1,
		"Defeat":    2,
		"Tie":       3,
		"Undecided": 4,
	}
)

func (x Result) Enum() *Result {
	p := new(Result)
	*p = x
	return p
}

func (x Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Result) Descriptor() protoreflect.EnumDescriptor {
	return file_sc2api_proto_enumTypes[5].Descriptor()
}

func (Result) Type() protoreflect.EnumType {
	return &file_sc2api_proto_enumTypes[5]
}

func (x Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Result(num)
	return nil
}

// Deprecated: Use Result.Descriptor instead.
func (Result) EnumDescriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{5}
}

type ResponseCreateGame_Error int32

const (
	ResponseCreateGame_MissingMap             ResponseCreateGame_Error = 1
	ResponseCreateGame_InvalidMapPath         ResponseCreateGame_Error = 2
	ResponseCreateGame_InvalidMapData         ResponseCreateGame_Error = 3
	ResponseCreateGame_InvalidMapName         ResponseCreateGame_Error = 4
	ResponseCreateGame_InvalidMapHandle       ResponseCreateGame_Error = 5
	ResponseCreateGame_MissingPlayerSetup     ResponseCreateGame_Error = 6
	ResponseCreateGame_InvalidPlayerSetup     ResponseCreateGame_Error = 7
	ResponseCreateGame_MultiplayerUnsupported ResponseCreateGame_Error = 8 // Multiplayer is not supported in the current build.
)

// Enum value maps for ResponseCreateGame_Error.
var (
	ResponseCreateGame_Error_name = map[int32]string{
		1: "MissingMap",
		2: "InvalidMapPath",
		3: "InvalidMapData",
		4: "InvalidMapName",
		5: "InvalidMapHandle",
		6: "MissingPlayerSetup",
		7: "InvalidPlayerSetup",
		8: "MultiplayerUnsupported",
	}
	ResponseCreateGame_Error_value = map[string]int32{
		"MissingMap":             1,
		"InvalidMapPath":         2,
		"InvalidMapData":         3,
		"InvalidMapName":         4,
		"InvalidMapHandle":       5,
		"MissingPlayerSetup":     6,
		"InvalidPlayerSetup":     7,
		"MultiplayerUnsupported": 8,
	}
)

func (x ResponseCreateGame_Error) Enum() *ResponseCreateGame_Error {
	p := new(ResponseCreateGame_Error)
	*p = x
	return p
}

func (x ResponseCreateGame_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseCreateGame_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_sc2api_proto_enumTypes[6].Descriptor()
}

func (ResponseCreateGame_Error) Type() protoreflect.EnumType {
	return &file_sc2api_proto_enumTypes[6]
}

func (x ResponseCreateGame_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ResponseCreateGame_Error) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ResponseCreateGame_Error(num)
	return nil
}

// Deprecated: Use ResponseCreateGame_Error.Descriptor instead.
func (ResponseCreateGame_Error) EnumDescriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{4, 0}
}

type ResponseJoinGame_Error int32

const (
	ResponseJoinGame_MissingParticipation    ResponseJoinGame_Error = 1
	ResponseJoinGame_InvalidObservedPlayerId ResponseJoinGame_Error = 2
	ResponseJoinGame_MissingOptions          ResponseJoinGame_Error = 3
	ResponseJoinGame_MissingPorts            ResponseJoinGame_Error = 4
	ResponseJoinGame_GameFull                ResponseJoinGame_Error = 5
	ResponseJoinGame_LaunchError             ResponseJoinGame_Error = 6
	// Multiplayer specific.
	ResponseJoinGame_FeatureUnsupported ResponseJoinGame_Error = 7 // Multiplayer is not supported in the current build for the requested features.
	ResponseJoinGame_NoSpaceForUser     ResponseJoinGame_Error = 8
	ResponseJoinGame_MapDoesNotExist    ResponseJoinGame_Error = 9
	ResponseJoinGame_CannotOpenMap      ResponseJoinGame_Error = 10
	ResponseJoinGame_ChecksumError      ResponseJoinGame_Error = 11
	ResponseJoinGame_NetworkError       ResponseJoinGame_Error = 12
	ResponseJoinGame_OtherError         ResponseJoinGame_Error = 13
)

// Enum value maps for ResponseJoinGame_Error.
var (
	ResponseJoinGame_Error_name = map[int32]string{
		1:  "MissingParticipation",
		2:  "InvalidObservedPlayerId",
		3:  "MissingOptions",
		4:  "MissingPorts",
		5:  "GameFull",
		6:  "LaunchError",
		7:  "FeatureUnsupported",
		8:  "NoSpaceForUser",
		9:  "MapDoesNotExist",
		10: "CannotOpenMap",
		11: "ChecksumError",
		12: "NetworkError",
		13: "OtherError",
	}
	ResponseJoinGame_Error_value = map[string]int32{
		"MissingParticipation":    1,
		"InvalidObservedPlayerId": 2,
		"MissingOptions":          3,
		"MissingPorts":            4,
		"GameFull":                5,
		"LaunchError":             6,
		"FeatureUnsupported":      7,
		"NoSpaceForUser":          8,
		"MapDoesNotExist":         9,
		"CannotOpenMap":           10,
		"ChecksumError":           11,
		"NetworkError":            12,
		"OtherError":              13,
	}
)

func (x ResponseJoinGame_Error) Enum() *ResponseJoinGame_Error {
	p := new(ResponseJoinGame_Error)
	*p = x
	return p
}

func (x ResponseJoinGame_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseJoinGame_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_sc2api_proto_enumTypes[7].Descriptor()
}

func (ResponseJoinGame_Error) Type() protoreflect.EnumType {
	return &file_sc2api_proto_enumTypes[7]
}

func (x ResponseJoinGame_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ResponseJoinGame_Error) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ResponseJoinGame_Error(num)
	return nil
}

// Deprecated: Use ResponseJoinGame_Error.Descriptor instead.
func (ResponseJoinGame_Error) EnumDescriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{7, 0}
}

type ResponseRestartGame_Error int32

const (
	ResponseRestartGame_LaunchError ResponseRestartGame_Error = 1
)

// Enum value maps for ResponseRestartGame_Error.
var (
	ResponseRestartGame_Error_name = map[int32]string{
		1: "LaunchError",
	}
	ResponseRestartGame_Error_value = map[string]int32{
		"LaunchError": 1,
	}
)

func (x ResponseRestartGame_Error) Enum() *ResponseRestartGame_Error {
	p := new(ResponseRestartGame_Error)
	*p = x
	return p
}

func (x ResponseRestartGame_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseRestartGame_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_sc2api_proto_enumTypes[8].Descriptor()
}

func (ResponseRestartGame_Error) Type() protoreflect.EnumType {
	return &file_sc2api_proto_enumTypes[8]
}

func (x ResponseRestartGame_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ResponseRestartGame_Error) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ResponseRestartGame_Error(num)
	return nil
}

// Deprecated: Use ResponseRestartGame_Error.Descriptor instead.
func (ResponseRestartGame_Error) EnumDescriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{9, 0}
}

type ResponseStartReplay_Error int32

const (
	ResponseStartReplay_MissingReplay           ResponseStartReplay_Error = 1
	ResponseStartReplay_InvalidReplayPath       ResponseStartReplay_Error = 2
	ResponseStartReplay_InvalidReplayData       ResponseStartReplay_Error = 3
	ResponseStartReplay_InvalidMapData          ResponseStartReplay_Error = 4
	ResponseStartReplay_InvalidObservedPlayerId ResponseStartReplay_Error = 5
	ResponseStartReplay_MissingOptions          ResponseStartReplay_Error = 6
	ResponseStartReplay_LaunchError             ResponseStartReplay_Error = 7
)

// Enum value maps for ResponseStartReplay_Error.
var (
	ResponseStartReplay_Error_name = map[int32]string{
		1: "MissingReplay",
		2: "InvalidReplayPath",
		3: "InvalidReplayData",
		4: "InvalidMapData",
		5: "InvalidObservedPlayerId",
		6: "MissingOptions",
		7: "LaunchError",
	}
	ResponseStartReplay_Error_value = map[string]int32{
		"MissingReplay":           1,
		"InvalidReplayPath":       2,
		"InvalidReplayData":       3,
		"InvalidMapData":          4,
		"InvalidObservedPlayerId": 5,
		"MissingOptions":          6,
		"LaunchError":             7,
	}
)

func (x ResponseStartReplay_Error) Enum() *ResponseStartReplay_Error {
	p := new(ResponseStartReplay_Error)
	*p = x
	return p
}

func (x ResponseStartReplay_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseStartReplay_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_sc2api_proto_enumTypes[9].Descriptor()
}

func (ResponseStartReplay_Error) Type() protoreflect.EnumType {
	return &file_sc2api_proto_enumTypes[9]
}

func (x ResponseStartReplay_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ResponseStartReplay_Error) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ResponseStartReplay_Error(num)
	return nil
}

// Deprecated: Use ResponseStartReplay_Error.Descriptor instead.
func (ResponseStartReplay_Error) EnumDescriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{11, 0}
}

type ResponseMapCommand_Error int32

const (
	ResponseMapCommand_NoTriggerError ResponseMapCommand_Error = 1
)

// Enum value maps for ResponseMapCommand_Error.
var (
	ResponseMapCommand_Error_name = map[int32]string{
		1: "NoTriggerError",
	}
	ResponseMapCommand_Error_value = map[string]int32{
		"NoTriggerError": 1,
	}
)

func (x ResponseMapCommand_Error) Enum() *ResponseMapCommand_Error {
	p := new(ResponseMapCommand_Error)
	*p = x
	return p
}

func (x ResponseMapCommand_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseMapCommand_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_sc2api_proto_enumTypes[10].Descriptor()
}

func (ResponseMapCommand_Error) Type() protoreflect.EnumType {
	return &file_sc2api_proto_enumTypes[10]
}

func (x ResponseMapCommand_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ResponseMapCommand_Error) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ResponseMapCommand_Error(num)
	return nil
}

// Deprecated: Use ResponseMapCommand_Error.Descriptor instead.
func (ResponseMapCommand_Error) EnumDescriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{13, 0}
}

type ResponseReplayInfo_Error int32

const (
	ResponseReplayInfo_MissingReplay     ResponseReplayInfo_Error = 1
	ResponseReplayInfo_InvalidReplayPath ResponseReplayInfo_Error = 2
	ResponseReplayInfo_InvalidReplayData ResponseReplayInfo_Error = 3
	ResponseReplayInfo_ParsingError      ResponseReplayInfo_Error = 4
	ResponseReplayInfo_DownloadError     ResponseReplayInfo_Error = 5
)

// Enum value maps for ResponseReplayInfo_Error.
var (
	ResponseReplayInfo_Error_name = map[int32]string{
		1: "MissingReplay",
		2: "InvalidReplayPath",
		3: "InvalidReplayData",
		4: "ParsingError",
		5: "DownloadError",
	}
	ResponseReplayInfo_Error_value = map[string]int32{
		"MissingReplay":     1,
		"InvalidReplayPath": 2,
		"InvalidReplayData": 3,
		"ParsingError":      4,
		"DownloadError":     5,
	}
)

func (x ResponseReplayInfo_Error) Enum() *ResponseReplayInfo_Error {
	p := new(ResponseReplayInfo_Error)
	*p = x
	return p
}

func (x ResponseReplayInfo_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseReplayInfo_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_sc2api_proto_enumTypes[11].Descriptor()
}

func (ResponseReplayInfo_Error) Type() protoreflect.EnumType {
	return &file_sc2api_proto_enumTypes[11]
}

func (x ResponseReplayInfo_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ResponseReplayInfo_Error) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ResponseReplayInfo_Error(num)
	return nil
}

// Deprecated: Use ResponseReplayInfo_Error.Descriptor instead.
func (ResponseReplayInfo_Error) EnumDescriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{39, 0}
}

type ResponseSaveMap_Error int32

const (
	ResponseSaveMap_InvalidMapData ResponseSaveMap_Error = 1
)

// Enum value maps for ResponseSaveMap_Error.
var (
	ResponseSaveMap_Error_name = map[int32]string{
		1: "InvalidMapData",
	}
	ResponseSaveMap_Error_value = map[string]int32{
		"InvalidMapData": 1,
	}
)

func (x ResponseSaveMap_Error) Enum() *ResponseSaveMap_Error {
	p := new(ResponseSaveMap_Error)
	*p = x
	return p
}

func (x ResponseSaveMap_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseSaveMap_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_sc2api_proto_enumTypes[12].Descriptor()
}

func (ResponseSaveMap_Error) Type() protoreflect.EnumType {
	return &file_sc2api_proto_enumTypes[12]
}

func (x ResponseSaveMap_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ResponseSaveMap_Error) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ResponseSaveMap_Error(num)
	return nil
}

// Deprecated: Use ResponseSaveMap_Error.Descriptor instead.
func (ResponseSaveMap_Error) EnumDescriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{43, 0}
}

type ActionChat_Channel int32

const (
	ActionChat_Broadcast ActionChat_Channel = 1
	ActionChat_Team      ActionChat_Channel = 2
)

// Enum value maps for ActionChat_Channel.
var (
	ActionChat_Channel_name = map[int32]string{
		1: "Broadcast",
		2: "Team",
	}
	ActionChat_Channel_value = map[string]int32{
		"Broadcast": 1,
		"Team":      2,
	}
)

func (x ActionChat_Channel) Enum() *ActionChat_Channel {
	p := new(ActionChat_Channel)
	*p = x
	return p
}

func (x ActionChat_Channel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionChat_Channel) Descriptor() protoreflect.EnumDescriptor {
	return file_sc2api_proto_enumTypes[13].Descriptor()
}

func (ActionChat_Channel) Type() protoreflect.EnumType {
	return &file_sc2api_proto_enumTypes[13]
}

func (x ActionChat_Channel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ActionChat_Channel) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ActionChat_Channel(num)
	return nil
}

// Deprecated: Use ActionChat_Channel.Descriptor instead.
func (ActionChat_Channel) EnumDescriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{55, 0}
}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//	*Request_CreateGame
	//	*Request_JoinGame
	//	*Request_RestartGame
	//	*Request_StartReplay
	//	*Request_LeaveGame
	//	*Request_QuickSave
	//	*Request_QuickLoad
	//	*Request_Quit
	//	*Request_GameInfo
	//	*Request_Observation
	//	*Request_Action
	//	*Request_ObsAction
	//	*Request_Step
	//	*Request_Data
	//	*Request_Query
	//	*Request_SaveReplay
	//	*Request_MapCommand
	//	*Request_ReplayInfo
	//	*Request_AvailableMaps
	//	*Request_SaveMap
	//	*Request_Ping
	//	*Request_Debug
	Request isRequest_Request `protobuf_oneof:"request"`
	Id      *uint32           `protobuf:"varint,97,opt,name=id" json:"id,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{0}
}

func (m *Request) GetRequest() isRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *Request) GetCreateGame() *RequestCreateGame {
	if x, ok := x.GetRequest().(*Request_CreateGame); ok {
		return x.CreateGame
	}
	return nil
}

func (x *Request) GetJoinGame() *RequestJoinGame {
	if x, ok := x.GetRequest().(*Request_JoinGame); ok {
		return x.JoinGame
	}
	return nil
}

func (x *Request) GetRestartGame() *RequestRestartGame {
	if x, ok := x.GetRequest().(*Request_RestartGame); ok {
		return x.RestartGame
	}
	return nil
}

func (x *Request) GetStartReplay() *RequestStartReplay {
	if x, ok := x.GetRequest().(*Request_StartReplay); ok {
		return x.StartReplay
	}
	return nil
}

func (x *Request) GetLeaveGame() *RequestLeaveGame {
	if x, ok := x.GetRequest().(*Request_LeaveGame); ok {
		return x.LeaveGame
	}
	return nil
}

func (x *Request) GetQuickSave() *RequestQuickSave {
	if x, ok := x.GetRequest().(*Request_QuickSave); ok {
		return x.QuickSave
	}
	return nil
}

func (x *Request) GetQuickLoad() *RequestQuickLoad {
	if x, ok := x.GetRequest().(*Request_QuickLoad); ok {
		return x.QuickLoad
	}
	return nil
}

func (x *Request) GetQuit() *RequestQuit {
	if x, ok := x.GetRequest().(*Request_Quit); ok {
		return x.Quit
	}
	return nil
}

func (x *Request) GetGameInfo() *RequestGameInfo {
	if x, ok := x.GetRequest().(*Request_GameInfo); ok {
		return x.GameInfo
	}
	return nil
}

func (x *Request) GetObservation() *RequestObservation {
	if x, ok := x.GetRequest().(*Request_Observation); ok {
		return x.Observation
	}
	return nil
}

func (x *Request) GetAction() *RequestAction {
	if x, ok := x.GetRequest().(*Request_Action); ok {
		return x.Action
	}
	return nil
}

func (x *Request) GetObsAction() *RequestObserverAction {
	if x, ok := x.GetRequest().(*Request_ObsAction); ok {
		return x.ObsAction
	}
	return nil
}

func (x *Request) GetStep() *RequestStep {
	if x, ok := x.GetRequest().(*Request_Step); ok {
		return x.Step
	}
	return nil
}

func (x *Request) GetData() *RequestData {
	if x, ok := x.GetRequest().(*Request_Data); ok {
		return x.Data
	}
	return nil
}

func (x *Request) GetQuery() *RequestQuery {
	if x, ok := x.GetRequest().(*Request_Query); ok {
		return x.Query
	}
	return nil
}

func (x *Request) GetSaveReplay() *RequestSaveReplay {
	if x, ok := x.GetRequest().(*Request_SaveReplay); ok {
		return x.SaveReplay
	}
	return nil
}

func (x *Request) GetMapCommand() *RequestMapCommand {
	if x, ok := x.GetRequest().(*Request_MapCommand); ok {
		return x.MapCommand
	}
	return nil
}

func (x *Request) GetReplayInfo() *RequestReplayInfo {
	if x, ok := x.GetRequest().(*Request_ReplayInfo); ok {
		return x.ReplayInfo
	}
	return nil
}

func (x *Request) GetAvailableMaps() *RequestAvailableMaps {
	if x, ok := x.GetRequest().(*Request_AvailableMaps); ok {
		return x.AvailableMaps
	}
	return nil
}

func (x *Request) GetSaveMap() *RequestSaveMap {
	if x, ok := x.GetRequest().(*Request_SaveMap); ok {
		return x.SaveMap
	}
	return nil
}

func (x *Request) GetPing() *RequestPing {
	if x, ok := x.GetRequest().(*Request_Ping); ok {
		return x.Ping
	}
	return nil
}

func (x *Request) GetDebug() *RequestDebug {
	if x, ok := x.GetRequest().(*Request_Debug); ok {
		return x.Debug
	}
	return nil
}

func (x *Request) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type isRequest_Request interface {
	isRequest_Request()
}

type Request_CreateGame struct {
	// Game Setup
	CreateGame *RequestCreateGame `protobuf:"bytes,1,opt,name=create_game,json=createGame,oneof"` // Send to host to initialize game.
}

type Request_JoinGame struct {
	JoinGame *RequestJoinGame `protobuf:"bytes,2,opt,name=join_game,json=joinGame,oneof"` // Send to host and all clients for game to begin.
}

type Request_RestartGame struct {
	RestartGame *RequestRestartGame `protobuf:"bytes,3,opt,name=restart_game,json=restartGame,oneof"` // Single player only. Reinitializes the game with the same player setup.
}

type Request_StartReplay struct {
	StartReplay *RequestStartReplay `protobuf:"bytes,4,opt,name=start_replay,json=startReplay,oneof"` // Start playing a replay.
}

type Request_LeaveGame struct {
	LeaveGame *RequestLeaveGame `protobuf:"bytes,5,opt,name=leave_game,json=leaveGame,oneof"` // Multiplayer only. Disconnects from a multiplayer game, equivalent to surrender.
}

type Request_QuickSave struct {
	QuickSave *RequestQuickSave `protobuf:"bytes,6,opt,name=quick_save,json=quickSave,oneof"` // Saves game to an in-memory bookmark.
}

type Request_QuickLoad struct {
	QuickLoad *RequestQuickLoad `protobuf:"bytes,7,opt,name=quick_load,json=quickLoad,oneof"` // Loads from an in-memory bookmark.
}

type Request_Quit struct {
	Quit *RequestQuit `protobuf:"bytes,8,opt,name=quit,oneof"` // Terminates the application.
}

type Request_GameInfo struct {
	// During Game
	GameInfo *RequestGameInfo `protobuf:"bytes,9,opt,name=game_info,json=gameInfo,oneof"` // Static data about the current game and map.
}

type Request_Observation struct {
	Observation *RequestObservation `protobuf:"bytes,10,opt,name=observation,oneof"` // Snapshot of the current game state.
}

type Request_Action struct {
	Action *RequestAction `protobuf:"bytes,11,opt,name=action,oneof"` // Executes an action for a participant.
}

type Request_ObsAction struct {
	ObsAction *RequestObserverAction `protobuf:"bytes,21,opt,name=obs_action,json=obsAction,oneof"` // Executes an action for an observer.
}

type Request_Step struct {
	Step *RequestStep `protobuf:"bytes,12,opt,name=step,oneof"` // Advances the game simulation.
}

type Request_Data struct {
	Data *RequestData `protobuf:"bytes,13,opt,name=data,oneof"` // Data about different gameplay elements. May be different for different games.
}

type Request_Query struct {
	Query *RequestQuery `protobuf:"bytes,14,opt,name=query,oneof"` // Additional methods for inspecting game state.
}

type Request_SaveReplay struct {
	SaveReplay *RequestSaveReplay `protobuf:"bytes,15,opt,name=save_replay,json=saveReplay,oneof"` // Generates a replay.
}

type Request_MapCommand struct {
	MapCommand *RequestMapCommand `protobuf:"bytes,22,opt,name=map_command,json=mapCommand,oneof"` // Execute a particular trigger through a string interface
}

type Request_ReplayInfo struct {
	// Other.
	ReplayInfo *RequestReplayInfo `protobuf:"bytes,16,opt,name=replay_info,json=replayInfo,oneof"` // Returns metadata about a replay file. Does not load the replay.
}

type Request_AvailableMaps struct {
	AvailableMaps *RequestAvailableMaps `protobuf:"bytes,17,opt,name=available_maps,json=availableMaps,oneof"` // Returns directory of maps that can be played on.
}

type Request_SaveMap struct {
	SaveMap *RequestSaveMap `protobuf:"bytes,18,opt,name=save_map,json=saveMap,oneof"` // Saves binary map data to the local temp directory.
}

type Request_Ping struct {
	// Debugging
	Ping *RequestPing `protobuf:"bytes,19,opt,name=ping,oneof"` // Network ping for testing connection.
}

type Request_Debug struct {
	Debug *RequestDebug `protobuf:"bytes,20,opt,name=debug,oneof"` // Display debug information and execute debug actions.
}

func (*Request_CreateGame) isRequest_Request() {}

func (*Request_JoinGame) isRequest_Request() {}

func (*Request_RestartGame) isRequest_Request() {}

func (*Request_StartReplay) isRequest_Request() {}

func (*Request_LeaveGame) isRequest_Request() {}

func (*Request_QuickSave) isRequest_Request() {}

func (*Request_QuickLoad) isRequest_Request() {}

func (*Request_Quit) isRequest_Request() {}

func (*Request_GameInfo) isRequest_Request() {}

func (*Request_Observation) isRequest_Request() {}

func (*Request_Action) isRequest_Request() {}

func (*Request_ObsAction) isRequest_Request() {}

func (*Request_Step) isRequest_Request() {}

func (*Request_Data) isRequest_Request() {}

func (*Request_Query) isRequest_Request() {}

func (*Request_SaveReplay) isRequest_Request() {}

func (*Request_MapCommand) isRequest_Request() {}

func (*Request_ReplayInfo) isRequest_Request() {}

func (*Request_AvailableMaps) isRequest_Request() {}

func (*Request_SaveMap) isRequest_Request() {}

func (*Request_Ping) isRequest_Request() {}

func (*Request_Debug) isRequest_Request() {}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//	*Response_CreateGame
	//	*Response_JoinGame
	//	*Response_RestartGame
	//	*Response_StartReplay
	//	*Response_LeaveGame
	//	*Response_QuickSave
	//	*Response_QuickLoad
	//	*Response_Quit
	//	*Response_GameInfo
	//	*Response_Observation
	//	*Response_Action
	//	*Response_ObsAction
	//	*Response_Step
	//	*Response_Data
	//	*Response_Query
	//	*Response_SaveReplay
	//	*Response_ReplayInfo
	//	*Response_AvailableMaps
	//	*Response_SaveMap
	//	*Response_MapCommand
	//	*Response_Ping
	//	*Response_Debug
	Response isResponse_Response `protobuf_oneof:"response"`
	Id       *uint32             `protobuf:"varint,97,opt,name=id" json:"id,omitempty"`
	Error    []string            `protobuf:"bytes,98,rep,name=error" json:"error,omitempty"`                         // If command is missing, this will contain the error. Otherwise this will contain any warnings.
	Status   *Status             `protobuf:"varint,99,opt,name=status,enum=sc2proto.Status" json:"status,omitempty"` // Should be sent back with all responses.
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{1}
}

func (m *Response) GetResponse() isResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *Response) GetCreateGame() *ResponseCreateGame {
	if x, ok := x.GetResponse().(*Response_CreateGame); ok {
		return x.CreateGame
	}
	return nil
}

func (x *Response) GetJoinGame() *ResponseJoinGame {
	if x, ok := x.GetResponse().(*Response_JoinGame); ok {
		return x.JoinGame
	}
	return nil
}

func (x *Response) GetRestartGame() *ResponseRestartGame {
	if x, ok := x.GetResponse().(*Response_RestartGame); ok {
		return x.RestartGame
	}
	return nil
}

func (x *Response) GetStartReplay() *ResponseStartReplay {
	if x, ok := x.GetResponse().(*Response_StartReplay); ok {
		return x.StartReplay
	}
	return nil
}

func (x *Response) GetLeaveGame() *ResponseLeaveGame {
	if x, ok := x.GetResponse().(*Response_LeaveGame); ok {
		return x.LeaveGame
	}
	return nil
}

func (x *Response) GetQuickSave() *ResponseQuickSave {
	if x, ok := x.GetResponse().(*Response_QuickSave); ok {
		return x.QuickSave
	}
	return nil
}

func (x *Response) GetQuickLoad() *ResponseQuickLoad {
	if x, ok := x.GetResponse().(*Response_QuickLoad); ok {
		return x.QuickLoad
	}
	return nil
}

func (x *Response) GetQuit() *ResponseQuit {
	if x, ok := x.GetResponse().(*Response_Quit); ok {
		return x.Quit
	}
	return nil
}

func (x *Response) GetGameInfo() *ResponseGameInfo {
	if x, ok := x.GetResponse().(*Response_GameInfo); ok {
		return x.GameInfo
	}
	return nil
}

func (x *Response) GetObservation() *ResponseObservation {
	if x, ok := x.GetResponse().(*Response_Observation); ok {
		return x.Observation
	}
	return nil
}

func (x *Response) GetAction() *ResponseAction {
	if x, ok := x.GetResponse().(*Response_Action); ok {
		return x.Action
	}
	return nil
}

func (x *Response) GetObsAction() *ResponseObserverAction {
	if x, ok := x.GetResponse().(*Response_ObsAction); ok {
		return x.ObsAction
	}
	return nil
}

func (x *Response) GetStep() *ResponseStep {
	if x, ok := x.GetResponse().(*Response_Step); ok {
		return x.Step
	}
	return nil
}

func (x *Response) GetData() *ResponseData {
	if x, ok := x.GetResponse().(*Response_Data); ok {
		return x.Data
	}
	return nil
}

func (x *Response) GetQuery() *ResponseQuery {
	if x, ok := x.GetResponse().(*Response_Query); ok {
		return x.Query
	}
	return nil
}

func (x *Response) GetSaveReplay() *ResponseSaveReplay {
	if x, ok := x.GetResponse().(*Response_SaveReplay); ok {
		return x.SaveReplay
	}
	return nil
}

func (x *Response) GetReplayInfo() *ResponseReplayInfo {
	if x, ok := x.GetResponse().(*Response_ReplayInfo); ok {
		return x.ReplayInfo
	}
	return nil
}

func (x *Response) GetAvailableMaps() *ResponseAvailableMaps {
	if x, ok := x.GetResponse().(*Response_AvailableMaps); ok {
		return x.AvailableMaps
	}
	return nil
}

func (x *Response) GetSaveMap() *ResponseSaveMap {
	if x, ok := x.GetResponse().(*Response_SaveMap); ok {
		return x.SaveMap
	}
	return nil
}

func (x *Response) GetMapCommand() *ResponseMapCommand {
	if x, ok := x.GetResponse().(*Response_MapCommand); ok {
		return x.MapCommand
	}
	return nil
}

func (x *Response) GetPing() *ResponsePing {
	if x, ok := x.GetResponse().(*Response_Ping); ok {
		return x.Ping
	}
	return nil
}

func (x *Response) GetDebug() *ResponseDebug {
	if x, ok := x.GetResponse().(*Response_Debug); ok {
		return x.Debug
	}
	return nil
}

func (x *Response) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Response) GetError() []string {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *Response) GetStatus() Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Status_launched
}

type isResponse_Response interface {
	isResponse_Response()
}

type Response_CreateGame struct {
	CreateGame *ResponseCreateGame `protobuf:"bytes,1,opt,name=create_game,json=createGame,oneof"`
}

type Response_JoinGame struct {
	JoinGame *ResponseJoinGame `protobuf:"bytes,2,opt,name=join_game,json=joinGame,oneof"`
}

type Response_RestartGame struct {
	RestartGame *ResponseRestartGame `protobuf:"bytes,3,opt,name=restart_game,json=restartGame,oneof"`
}

type Response_StartReplay struct {
	StartReplay *ResponseStartReplay `protobuf:"bytes,4,opt,name=start_replay,json=startReplay,oneof"`
}

type Response_LeaveGame struct {
	LeaveGame *ResponseLeaveGame `protobuf:"bytes,5,opt,name=leave_game,json=leaveGame,oneof"`
}

type Response_QuickSave struct {
	QuickSave *ResponseQuickSave `protobuf:"bytes,6,opt,name=quick_save,json=quickSave,oneof"`
}

type Response_QuickLoad struct {
	QuickLoad *ResponseQuickLoad `protobuf:"bytes,7,opt,name=quick_load,json=quickLoad,oneof"`
}

type Response_Quit struct {
	Quit *ResponseQuit `protobuf:"bytes,8,opt,name=quit,oneof"`
}

type Response_GameInfo struct {
	GameInfo *ResponseGameInfo `protobuf:"bytes,9,opt,name=game_info,json=gameInfo,oneof"`
}

type Response_Observation struct {
	Observation *ResponseObservation `protobuf:"bytes,10,opt,name=observation,oneof"`
}

type Response_Action struct {
	Action *ResponseAction `protobuf:"bytes,11,opt,name=action,oneof"`
}

type Response_ObsAction struct {
	ObsAction *ResponseObserverAction `protobuf:"bytes,21,opt,name=obs_action,json=obsAction,oneof"`
}

type Response_Step struct {
	Step *ResponseStep `protobuf:"bytes,12,opt,name=step,oneof"`
}

type Response_Data struct {
	Data *ResponseData `protobuf:"bytes,13,opt,name=data,oneof"`
}

type Response_Query struct {
	Query *ResponseQuery `protobuf:"bytes,14,opt,name=query,oneof"`
}

type Response_SaveReplay struct {
	SaveReplay *ResponseSaveReplay `protobuf:"bytes,15,opt,name=save_replay,json=saveReplay,oneof"`
}

type Response_ReplayInfo struct {
	ReplayInfo *ResponseReplayInfo `protobuf:"bytes,16,opt,name=replay_info,json=replayInfo,oneof"`
}

type Response_AvailableMaps struct {
	AvailableMaps *ResponseAvailableMaps `protobuf:"bytes,17,opt,name=available_maps,json=availableMaps,oneof"`
}

type Response_SaveMap struct {
	SaveMap *ResponseSaveMap `protobuf:"bytes,18,opt,name=save_map,json=saveMap,oneof"`
}

type Response_MapCommand struct {
	MapCommand *ResponseMapCommand `protobuf:"bytes,22,opt,name=map_command,json=mapCommand,oneof"`
}

type Response_Ping struct {
	// Debugging
	Ping *ResponsePing `protobuf:"bytes,19,opt,name=ping,oneof"`
}

type Response_Debug struct {
	Debug *ResponseDebug `protobuf:"bytes,20,opt,name=debug,oneof"`
}

func (*Response_CreateGame) isResponse_Response() {}

func (*Response_JoinGame) isResponse_Response() {}

func (*Response_RestartGame) isResponse_Response() {}

func (*Response_StartReplay) isResponse_Response() {}

func (*Response_LeaveGame) isResponse_Response() {}

func (*Response_QuickSave) isResponse_Response() {}

func (*Response_QuickLoad) isResponse_Response() {}

func (*Response_Quit) isResponse_Response() {}

func (*Response_GameInfo) isResponse_Response() {}

func (*Response_Observation) isResponse_Response() {}

func (*Response_Action) isResponse_Response() {}

func (*Response_ObsAction) isResponse_Response() {}

func (*Response_Step) isResponse_Response() {}

func (*Response_Data) isResponse_Response() {}

func (*Response_Query) isResponse_Response() {}

func (*Response_SaveReplay) isResponse_Response() {}

func (*Response_ReplayInfo) isResponse_Response() {}

func (*Response_AvailableMaps) isResponse_Response() {}

func (*Response_SaveMap) isResponse_Response() {}

func (*Response_MapCommand) isResponse_Response() {}

func (*Response_Ping) isResponse_Response() {}

func (*Response_Debug) isResponse_Response() {}

//-----------------------------------------------------------------------------
// If successful, puts the game into the status: init_game.
// The next expected request should be RequestJoinGame. Can also quit (exit).
type RequestCreateGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Map:
	//	*RequestCreateGame_LocalMap
	//	*RequestCreateGame_BattlenetMapName
	Map         isRequestCreateGame_Map `protobuf_oneof:"Map"`
	PlayerSetup []*PlayerSetup          `protobuf:"bytes,3,rep,name=player_setup,json=playerSetup" json:"player_setup,omitempty"`
	DisableFog  *bool                   `protobuf:"varint,4,opt,name=disable_fog,json=disableFog" json:"disable_fog,omitempty"`
	RandomSeed  *uint32                 `protobuf:"varint,5,opt,name=random_seed,json=randomSeed" json:"random_seed,omitempty"` // Sets the pseudo-random seed for the game.
	Realtime    *bool                   `protobuf:"varint,6,opt,name=realtime" json:"realtime,omitempty"`                       // If set, the game plays in real time.
}

func (x *RequestCreateGame) Reset() {
	*x = RequestCreateGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestCreateGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestCreateGame) ProtoMessage() {}

func (x *RequestCreateGame) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestCreateGame.ProtoReflect.Descriptor instead.
func (*RequestCreateGame) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{2}
}

func (m *RequestCreateGame) GetMap() isRequestCreateGame_Map {
	if m != nil {
		return m.Map
	}
	return nil
}

func (x *RequestCreateGame) GetLocalMap() *LocalMap {
	if x, ok := x.GetMap().(*RequestCreateGame_LocalMap); ok {
		return x.LocalMap
	}
	return nil
}

func (x *RequestCreateGame) GetBattlenetMapName() string {
	if x, ok := x.GetMap().(*RequestCreateGame_BattlenetMapName); ok {
		return x.BattlenetMapName
	}
	return ""
}

func (x *RequestCreateGame) GetPlayerSetup() []*PlayerSetup {
	if x != nil {
		return x.PlayerSetup
	}
	return nil
}

func (x *RequestCreateGame) GetDisableFog() bool {
	if x != nil && x.DisableFog != nil {
		return *x.DisableFog
	}
	return false
}

func (x *RequestCreateGame) GetRandomSeed() uint32 {
	if x != nil && x.RandomSeed != nil {
		return *x.RandomSeed
	}
	return 0
}

func (x *RequestCreateGame) GetRealtime() bool {
	if x != nil && x.Realtime != nil {
		return *x.Realtime
	}
	return false
}

type isRequestCreateGame_Map interface {
	isRequestCreateGame_Map()
}

type RequestCreateGame_LocalMap struct {
	LocalMap *LocalMap `protobuf:"bytes,1,opt,name=local_map,json=localMap,oneof"` // Local .SC2Map file
}

type RequestCreateGame_BattlenetMapName struct {
	BattlenetMapName string `protobuf:"bytes,2,opt,name=battlenet_map_name,json=battlenetMapName,oneof"` // Map published to BattleNet
}

func (*RequestCreateGame_LocalMap) isRequestCreateGame_Map() {}

func (*RequestCreateGame_BattlenetMapName) isRequestCreateGame_Map() {}

type LocalMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A map can be specified either by a file path or the data of the .SC2Map file.
	// If you provide both, it will play the game using map_data and store map_path
	// into the replay. (260 character max)
	MapPath *string `protobuf:"bytes,1,opt,name=map_path,json=mapPath" json:"map_path,omitempty"`
	MapData []byte  `protobuf:"bytes,7,opt,name=map_data,json=mapData" json:"map_data,omitempty"`
}

func (x *LocalMap) Reset() {
	*x = LocalMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalMap) ProtoMessage() {}

func (x *LocalMap) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalMap.ProtoReflect.Descriptor instead.
func (*LocalMap) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{3}
}

func (x *LocalMap) GetMapPath() string {
	if x != nil && x.MapPath != nil {
		return *x.MapPath
	}
	return ""
}

func (x *LocalMap) GetMapData() []byte {
	if x != nil {
		return x.MapData
	}
	return nil
}

type ResponseCreateGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error        *ResponseCreateGame_Error `protobuf:"varint,1,opt,name=error,enum=sc2proto.ResponseCreateGame_Error" json:"error,omitempty"`
	ErrorDetails *string                   `protobuf:"bytes,2,opt,name=error_details,json=errorDetails" json:"error_details,omitempty"`
}

func (x *ResponseCreateGame) Reset() {
	*x = ResponseCreateGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseCreateGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseCreateGame) ProtoMessage() {}

func (x *ResponseCreateGame) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseCreateGame.ProtoReflect.Descriptor instead.
func (*ResponseCreateGame) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{4}
}

func (x *ResponseCreateGame) GetError() ResponseCreateGame_Error {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ResponseCreateGame_MissingMap
}

func (x *ResponseCreateGame) GetErrorDetails() string {
	if x != nil && x.ErrorDetails != nil {
		return *x.ErrorDetails
	}
	return ""
}

//-----------------------------------------------------------------------------
// If successful, puts the game into the status: in_game. Will be able to
// request actions, observations and step the game.
type RequestJoinGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Participation:
	//	*RequestJoinGame_Race
	//	*RequestJoinGame_ObservedPlayerId
	Participation isRequestJoinGame_Participation `protobuf_oneof:"participation"`
	Options       *InterfaceOptions               `protobuf:"bytes,3,opt,name=options" json:"options,omitempty"`                            // This is limited to what is specified in RequestCreateGame, but you can request less information if you want.
	ServerPorts   *PortSet                        `protobuf:"bytes,4,opt,name=server_ports,json=serverPorts" json:"server_ports,omitempty"` // Do not set in the single-player case. This is the port a server will use.
	ClientPorts   []*PortSet                      `protobuf:"bytes,5,rep,name=client_ports,json=clientPorts" json:"client_ports,omitempty"` // Do not set in the single-player case. These are the ports clients will use to initialize communication.
	// Currently only a singe client is supported.
	SharedPort *int32  `protobuf:"varint,6,opt,name=shared_port,json=sharedPort" json:"shared_port,omitempty"` // deprecated
	PlayerName *string `protobuf:"bytes,7,opt,name=player_name,json=playerName" json:"player_name,omitempty"`  // Use this to set the player's name to something other than autogenerated name.
	HostIp     *string `protobuf:"bytes,8,opt,name=host_ip,json=hostIp" json:"host_ip,omitempty"`              // Both game creator and joiner should provide the ip address of the game creator in order to play remotely. Defaults to localhost.
}

func (x *RequestJoinGame) Reset() {
	*x = RequestJoinGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestJoinGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestJoinGame) ProtoMessage() {}

func (x *RequestJoinGame) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestJoinGame.ProtoReflect.Descriptor instead.
func (*RequestJoinGame) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{5}
}

func (m *RequestJoinGame) GetParticipation() isRequestJoinGame_Participation {
	if m != nil {
		return m.Participation
	}
	return nil
}

func (x *RequestJoinGame) GetRace() Race {
	if x, ok := x.GetParticipation().(*RequestJoinGame_Race); ok {
		return x.Race
	}
	return Race_NoRace
}

func (x *RequestJoinGame) GetObservedPlayerId() uint32 {
	if x, ok := x.GetParticipation().(*RequestJoinGame_ObservedPlayerId); ok {
		return x.ObservedPlayerId
	}
	return 0
}

func (x *RequestJoinGame) GetOptions() *InterfaceOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *RequestJoinGame) GetServerPorts() *PortSet {
	if x != nil {
		return x.ServerPorts
	}
	return nil
}

func (x *RequestJoinGame) GetClientPorts() []*PortSet {
	if x != nil {
		return x.ClientPorts
	}
	return nil
}

func (x *RequestJoinGame) GetSharedPort() int32 {
	if x != nil && x.SharedPort != nil {
		return *x.SharedPort
	}
	return 0
}

func (x *RequestJoinGame) GetPlayerName() string {
	if x != nil && x.PlayerName != nil {
		return *x.PlayerName
	}
	return ""
}

func (x *RequestJoinGame) GetHostIp() string {
	if x != nil && x.HostIp != nil {
		return *x.HostIp
	}
	return ""
}

type isRequestJoinGame_Participation interface {
	isRequestJoinGame_Participation()
}

type RequestJoinGame_Race struct {
	Race Race `protobuf:"varint,1,opt,name=race,enum=sc2proto.Race,oneof"` // Join as participant
}

type RequestJoinGame_ObservedPlayerId struct {
	ObservedPlayerId uint32 `protobuf:"varint,2,opt,name=observed_player_id,json=observedPlayerId,oneof"` // Join as observer
}

func (*RequestJoinGame_Race) isRequestJoinGame_Participation() {}

func (*RequestJoinGame_ObservedPlayerId) isRequestJoinGame_Participation() {}

type PortSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GamePort *int32 `protobuf:"varint,1,opt,name=game_port,json=gamePort" json:"game_port,omitempty"` // Game right now needs two internal ports to establish a multiplay game on the local host.
	BasePort *int32 `protobuf:"varint,2,opt,name=base_port,json=basePort" json:"base_port,omitempty"`
}

func (x *PortSet) Reset() {
	*x = PortSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortSet) ProtoMessage() {}

func (x *PortSet) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortSet.ProtoReflect.Descriptor instead.
func (*PortSet) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{6}
}

func (x *PortSet) GetGamePort() int32 {
	if x != nil && x.GamePort != nil {
		return *x.GamePort
	}
	return 0
}

func (x *PortSet) GetBasePort() int32 {
	if x != nil && x.BasePort != nil {
		return *x.BasePort
	}
	return 0
}

type ResponseJoinGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId     *uint32                 `protobuf:"varint,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	Error        *ResponseJoinGame_Error `protobuf:"varint,2,opt,name=error,enum=sc2proto.ResponseJoinGame_Error" json:"error,omitempty"`
	ErrorDetails *string                 `protobuf:"bytes,3,opt,name=error_details,json=errorDetails" json:"error_details,omitempty"`
}

func (x *ResponseJoinGame) Reset() {
	*x = ResponseJoinGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseJoinGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseJoinGame) ProtoMessage() {}

func (x *ResponseJoinGame) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseJoinGame.ProtoReflect.Descriptor instead.
func (*ResponseJoinGame) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{7}
}

func (x *ResponseJoinGame) GetPlayerId() uint32 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *ResponseJoinGame) GetError() ResponseJoinGame_Error {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ResponseJoinGame_MissingParticipation
}

func (x *ResponseJoinGame) GetErrorDetails() string {
	if x != nil && x.ErrorDetails != nil {
		return *x.ErrorDetails
	}
	return ""
}

//-----------------------------------------------------------------------------
type RequestRestartGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RequestRestartGame) Reset() {
	*x = RequestRestartGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestRestartGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestRestartGame) ProtoMessage() {}

func (x *RequestRestartGame) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestRestartGame.ProtoReflect.Descriptor instead.
func (*RequestRestartGame) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{8}
}

// The defaultRestartGameLoops is specified to be (1<<18) by default
type ResponseRestartGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error         *ResponseRestartGame_Error `protobuf:"varint,1,opt,name=error,enum=sc2proto.ResponseRestartGame_Error" json:"error,omitempty"`
	ErrorDetails  *string                    `protobuf:"bytes,2,opt,name=error_details,json=errorDetails" json:"error_details,omitempty"`
	NeedHardReset *bool                      `protobuf:"varint,3,opt,name=need_hard_reset,json=needHardReset" json:"need_hard_reset,omitempty"` // This will occur once the simulation_loop is greater then defaultRestartGameLoops
}

func (x *ResponseRestartGame) Reset() {
	*x = ResponseRestartGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseRestartGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseRestartGame) ProtoMessage() {}

func (x *ResponseRestartGame) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseRestartGame.ProtoReflect.Descriptor instead.
func (*ResponseRestartGame) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{9}
}

func (x *ResponseRestartGame) GetError() ResponseRestartGame_Error {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ResponseRestartGame_LaunchError
}

func (x *ResponseRestartGame) GetErrorDetails() string {
	if x != nil && x.ErrorDetails != nil {
		return *x.ErrorDetails
	}
	return ""
}

func (x *ResponseRestartGame) GetNeedHardReset() bool {
	if x != nil && x.NeedHardReset != nil {
		return *x.NeedHardReset
	}
	return false
}

//-----------------------------------------------------------------------------
type RequestStartReplay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Replay:
	//	*RequestStartReplay_ReplayPath
	//	*RequestStartReplay_ReplayData
	Replay           isRequestStartReplay_Replay `protobuf_oneof:"replay"`
	MapData          []byte                      `protobuf:"bytes,6,opt,name=map_data,json=mapData" json:"map_data,omitempty"` // Overrides the map path stored in the replay.
	ObservedPlayerId *int32                      `protobuf:"varint,2,opt,name=observed_player_id,json=observedPlayerId" json:"observed_player_id,omitempty"`
	Options          *InterfaceOptions           `protobuf:"bytes,3,opt,name=options" json:"options,omitempty"`
	DisableFog       *bool                       `protobuf:"varint,4,opt,name=disable_fog,json=disableFog" json:"disable_fog,omitempty"`
	Realtime         *bool                       `protobuf:"varint,7,opt,name=realtime" json:"realtime,omitempty"`
	RecordReplay     *bool                       `protobuf:"varint,8,opt,name=record_replay,json=recordReplay" json:"record_replay,omitempty"` // Allow RequestSaveReplay from a replay. Useful for truncating a replay, or restoring tracker.events.
}

func (x *RequestStartReplay) Reset() {
	*x = RequestStartReplay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestStartReplay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestStartReplay) ProtoMessage() {}

func (x *RequestStartReplay) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestStartReplay.ProtoReflect.Descriptor instead.
func (*RequestStartReplay) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{10}
}

func (m *RequestStartReplay) GetReplay() isRequestStartReplay_Replay {
	if m != nil {
		return m.Replay
	}
	return nil
}

func (x *RequestStartReplay) GetReplayPath() string {
	if x, ok := x.GetReplay().(*RequestStartReplay_ReplayPath); ok {
		return x.ReplayPath
	}
	return ""
}

func (x *RequestStartReplay) GetReplayData() []byte {
	if x, ok := x.GetReplay().(*RequestStartReplay_ReplayData); ok {
		return x.ReplayData
	}
	return nil
}

func (x *RequestStartReplay) GetMapData() []byte {
	if x != nil {
		return x.MapData
	}
	return nil
}

func (x *RequestStartReplay) GetObservedPlayerId() int32 {
	if x != nil && x.ObservedPlayerId != nil {
		return *x.ObservedPlayerId
	}
	return 0
}

func (x *RequestStartReplay) GetOptions() *InterfaceOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *RequestStartReplay) GetDisableFog() bool {
	if x != nil && x.DisableFog != nil {
		return *x.DisableFog
	}
	return false
}

func (x *RequestStartReplay) GetRealtime() bool {
	if x != nil && x.Realtime != nil {
		return *x.Realtime
	}
	return false
}

func (x *RequestStartReplay) GetRecordReplay() bool {
	if x != nil && x.RecordReplay != nil {
		return *x.RecordReplay
	}
	return false
}

type isRequestStartReplay_Replay interface {
	isRequestStartReplay_Replay()
}

type RequestStartReplay_ReplayPath struct {
	ReplayPath string `protobuf:"bytes,1,opt,name=replay_path,json=replayPath,oneof"`
}

type RequestStartReplay_ReplayData struct {
	ReplayData []byte `protobuf:"bytes,5,opt,name=replay_data,json=replayData,oneof"`
}

func (*RequestStartReplay_ReplayPath) isRequestStartReplay_Replay() {}

func (*RequestStartReplay_ReplayData) isRequestStartReplay_Replay() {}

type ResponseStartReplay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error        *ResponseStartReplay_Error `protobuf:"varint,1,opt,name=error,enum=sc2proto.ResponseStartReplay_Error" json:"error,omitempty"`
	ErrorDetails *string                    `protobuf:"bytes,2,opt,name=error_details,json=errorDetails" json:"error_details,omitempty"`
}

func (x *ResponseStartReplay) Reset() {
	*x = ResponseStartReplay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseStartReplay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseStartReplay) ProtoMessage() {}

func (x *ResponseStartReplay) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseStartReplay.ProtoReflect.Descriptor instead.
func (*ResponseStartReplay) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{11}
}

func (x *ResponseStartReplay) GetError() ResponseStartReplay_Error {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ResponseStartReplay_MissingReplay
}

func (x *ResponseStartReplay) GetErrorDetails() string {
	if x != nil && x.ErrorDetails != nil {
		return *x.ErrorDetails
	}
	return ""
}

//-----------------------------------------------------------------------------
type RequestMapCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TriggerCmd *string `protobuf:"bytes,1,opt,name=trigger_cmd,json=triggerCmd" json:"trigger_cmd,omitempty"`
}

func (x *RequestMapCommand) Reset() {
	*x = RequestMapCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestMapCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestMapCommand) ProtoMessage() {}

func (x *RequestMapCommand) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestMapCommand.ProtoReflect.Descriptor instead.
func (*RequestMapCommand) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{12}
}

func (x *RequestMapCommand) GetTriggerCmd() string {
	if x != nil && x.TriggerCmd != nil {
		return *x.TriggerCmd
	}
	return ""
}

type ResponseMapCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error        *ResponseMapCommand_Error `protobuf:"varint,1,opt,name=error,enum=sc2proto.ResponseMapCommand_Error" json:"error,omitempty"`
	ErrorDetails *string                   `protobuf:"bytes,2,opt,name=error_details,json=errorDetails" json:"error_details,omitempty"`
}

func (x *ResponseMapCommand) Reset() {
	*x = ResponseMapCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseMapCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseMapCommand) ProtoMessage() {}

func (x *ResponseMapCommand) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseMapCommand.ProtoReflect.Descriptor instead.
func (*ResponseMapCommand) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{13}
}

func (x *ResponseMapCommand) GetError() ResponseMapCommand_Error {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ResponseMapCommand_NoTriggerError
}

func (x *ResponseMapCommand) GetErrorDetails() string {
	if x != nil && x.ErrorDetails != nil {
		return *x.ErrorDetails
	}
	return ""
}

//-----------------------------------------------------------------------------
type RequestLeaveGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RequestLeaveGame) Reset() {
	*x = RequestLeaveGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestLeaveGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestLeaveGame) ProtoMessage() {}

func (x *RequestLeaveGame) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestLeaveGame.ProtoReflect.Descriptor instead.
func (*RequestLeaveGame) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{14}
}

type ResponseLeaveGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResponseLeaveGame) Reset() {
	*x = ResponseLeaveGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseLeaveGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseLeaveGame) ProtoMessage() {}

func (x *ResponseLeaveGame) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseLeaveGame.ProtoReflect.Descriptor instead.
func (*ResponseLeaveGame) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{15}
}

//-----------------------------------------------------------------------------
type RequestQuickSave struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RequestQuickSave) Reset() {
	*x = RequestQuickSave{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestQuickSave) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestQuickSave) ProtoMessage() {}

func (x *RequestQuickSave) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestQuickSave.ProtoReflect.Descriptor instead.
func (*RequestQuickSave) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{16}
}

//-----------------------------------------------------------------------------
type ResponseQuickSave struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResponseQuickSave) Reset() {
	*x = ResponseQuickSave{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseQuickSave) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseQuickSave) ProtoMessage() {}

func (x *ResponseQuickSave) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseQuickSave.ProtoReflect.Descriptor instead.
func (*ResponseQuickSave) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{17}
}

//-----------------------------------------------------------------------------
type RequestQuickLoad struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RequestQuickLoad) Reset() {
	*x = RequestQuickLoad{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestQuickLoad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestQuickLoad) ProtoMessage() {}

func (x *RequestQuickLoad) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestQuickLoad.ProtoReflect.Descriptor instead.
func (*RequestQuickLoad) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{18}
}

//-----------------------------------------------------------------------------
type ResponseQuickLoad struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResponseQuickLoad) Reset() {
	*x = ResponseQuickLoad{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseQuickLoad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseQuickLoad) ProtoMessage() {}

func (x *ResponseQuickLoad) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseQuickLoad.ProtoReflect.Descriptor instead.
func (*ResponseQuickLoad) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{19}
}

//-----------------------------------------------------------------------------
type RequestQuit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RequestQuit) Reset() {
	*x = RequestQuit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestQuit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestQuit) ProtoMessage() {}

func (x *RequestQuit) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestQuit.ProtoReflect.Descriptor instead.
func (*RequestQuit) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{20}
}

type ResponseQuit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResponseQuit) Reset() {
	*x = ResponseQuit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseQuit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseQuit) ProtoMessage() {}

func (x *ResponseQuit) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseQuit.ProtoReflect.Descriptor instead.
func (*ResponseQuit) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{21}
}

//-----------------------------------------------------------------------------
type RequestGameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RequestGameInfo) Reset() {
	*x = RequestGameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestGameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestGameInfo) ProtoMessage() {}

func (x *RequestGameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestGameInfo.ProtoReflect.Descriptor instead.
func (*RequestGameInfo) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{22}
}

type ResponseGameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapName      *string           `protobuf:"bytes,1,opt,name=map_name,json=mapName" json:"map_name,omitempty"`
	ModNames     []string          `protobuf:"bytes,6,rep,name=mod_names,json=modNames" json:"mod_names,omitempty"`
	LocalMapPath *string           `protobuf:"bytes,2,opt,name=local_map_path,json=localMapPath" json:"local_map_path,omitempty"`
	PlayerInfo   []*PlayerInfo     `protobuf:"bytes,3,rep,name=player_info,json=playerInfo" json:"player_info,omitempty"`
	StartRaw     *StartRaw         `protobuf:"bytes,4,opt,name=start_raw,json=startRaw" json:"start_raw,omitempty"` // Populated if Raw interface is enabled.
	Options      *InterfaceOptions `protobuf:"bytes,5,opt,name=options" json:"options,omitempty"`
}

func (x *ResponseGameInfo) Reset() {
	*x = ResponseGameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseGameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseGameInfo) ProtoMessage() {}

func (x *ResponseGameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseGameInfo.ProtoReflect.Descriptor instead.
func (*ResponseGameInfo) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{23}
}

func (x *ResponseGameInfo) GetMapName() string {
	if x != nil && x.MapName != nil {
		return *x.MapName
	}
	return ""
}

func (x *ResponseGameInfo) GetModNames() []string {
	if x != nil {
		return x.ModNames
	}
	return nil
}

func (x *ResponseGameInfo) GetLocalMapPath() string {
	if x != nil && x.LocalMapPath != nil {
		return *x.LocalMapPath
	}
	return ""
}

func (x *ResponseGameInfo) GetPlayerInfo() []*PlayerInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

func (x *ResponseGameInfo) GetStartRaw() *StartRaw {
	if x != nil {
		return x.StartRaw
	}
	return nil
}

func (x *ResponseGameInfo) GetOptions() *InterfaceOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

//-----------------------------------------------------------------------------
type RequestObservation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisableFog *bool   `protobuf:"varint,1,opt,name=disable_fog,json=disableFog" json:"disable_fog,omitempty"`
	GameLoop   *uint32 `protobuf:"varint,2,opt,name=game_loop,json=gameLoop" json:"game_loop,omitempty"` // In realtime the request will only return once the simulation game loop has reached this value. When not realtime this value is ignored.
}

func (x *RequestObservation) Reset() {
	*x = RequestObservation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestObservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestObservation) ProtoMessage() {}

func (x *RequestObservation) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestObservation.ProtoReflect.Descriptor instead.
func (*RequestObservation) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{24}
}

func (x *RequestObservation) GetDisableFog() bool {
	if x != nil && x.DisableFog != nil {
		return *x.DisableFog
	}
	return false
}

func (x *RequestObservation) GetGameLoop() uint32 {
	if x != nil && x.GameLoop != nil {
		return *x.GameLoop
	}
	return 0
}

type ResponseObservation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actions      []*Action       `protobuf:"bytes,1,rep,name=actions" json:"actions,omitempty"`                               // Actions this player did since the last Observation.
	ActionErrors []*ActionError  `protobuf:"bytes,2,rep,name=action_errors,json=actionErrors" json:"action_errors,omitempty"` // Equivalent of UI "red text" errors.
	Observation  *Observation    `protobuf:"bytes,3,opt,name=observation" json:"observation,omitempty"`
	PlayerResult []*PlayerResult `protobuf:"bytes,4,rep,name=player_result,json=playerResult" json:"player_result,omitempty"` // Only populated if the game ended during this step.
	Chat         []*ChatReceived `protobuf:"bytes,5,rep,name=chat" json:"chat,omitempty"`
}

func (x *ResponseObservation) Reset() {
	*x = ResponseObservation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseObservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseObservation) ProtoMessage() {}

func (x *ResponseObservation) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseObservation.ProtoReflect.Descriptor instead.
func (*ResponseObservation) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{25}
}

func (x *ResponseObservation) GetActions() []*Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *ResponseObservation) GetActionErrors() []*ActionError {
	if x != nil {
		return x.ActionErrors
	}
	return nil
}

func (x *ResponseObservation) GetObservation() *Observation {
	if x != nil {
		return x.Observation
	}
	return nil
}

func (x *ResponseObservation) GetPlayerResult() []*PlayerResult {
	if x != nil {
		return x.PlayerResult
	}
	return nil
}

func (x *ResponseObservation) GetChat() []*ChatReceived {
	if x != nil {
		return x.Chat
	}
	return nil
}

type ChatReceived struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId *uint32 `protobuf:"varint,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	Message  *string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (x *ChatReceived) Reset() {
	*x = ChatReceived{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatReceived) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatReceived) ProtoMessage() {}

func (x *ChatReceived) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatReceived.ProtoReflect.Descriptor instead.
func (*ChatReceived) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{26}
}

func (x *ChatReceived) GetPlayerId() uint32 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *ChatReceived) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

//-----------------------------------------------------------------------------
type RequestAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actions []*Action `protobuf:"bytes,1,rep,name=actions" json:"actions,omitempty"`
}

func (x *RequestAction) Reset() {
	*x = RequestAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestAction) ProtoMessage() {}

func (x *RequestAction) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestAction.ProtoReflect.Descriptor instead.
func (*RequestAction) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{27}
}

func (x *RequestAction) GetActions() []*Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

type ResponseAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []ActionResult `protobuf:"varint,1,rep,name=result,enum=sc2proto.ActionResult" json:"result,omitempty"`
}

func (x *ResponseAction) Reset() {
	*x = ResponseAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseAction) ProtoMessage() {}

func (x *ResponseAction) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseAction.ProtoReflect.Descriptor instead.
func (*ResponseAction) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{28}
}

func (x *ResponseAction) GetResult() []ActionResult {
	if x != nil {
		return x.Result
	}
	return nil
}

//-----------------------------------------------------------------------------
type RequestObserverAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actions []*ObserverAction `protobuf:"bytes,1,rep,name=actions" json:"actions,omitempty"`
}

func (x *RequestObserverAction) Reset() {
	*x = RequestObserverAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestObserverAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestObserverAction) ProtoMessage() {}

func (x *RequestObserverAction) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestObserverAction.ProtoReflect.Descriptor instead.
func (*RequestObserverAction) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{29}
}

func (x *RequestObserverAction) GetActions() []*ObserverAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

type ResponseObserverAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResponseObserverAction) Reset() {
	*x = ResponseObserverAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseObserverAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseObserverAction) ProtoMessage() {}

func (x *ResponseObserverAction) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseObserverAction.ProtoReflect.Descriptor instead.
func (*ResponseObserverAction) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{30}
}

//-----------------------------------------------------------------------------
type RequestStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count *uint32 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"` // Number of game loops to simulate for the next frame.
}

func (x *RequestStep) Reset() {
	*x = RequestStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestStep) ProtoMessage() {}

func (x *RequestStep) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestStep.ProtoReflect.Descriptor instead.
func (*RequestStep) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{31}
}

func (x *RequestStep) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type ResponseStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//  Max simulation_loop is (1<<19) before "end of time" will occur
	//  The "end of time" is classified as the maximum number of game loops or absolute game time
	//  representable as a positive fixed point number.
	//  When we reach the "end of time", permanently pause the game and end the game for all.
	SimulationLoop *uint32 `protobuf:"varint,1,opt,name=simulation_loop,json=simulationLoop" json:"simulation_loop,omitempty"`
}

func (x *ResponseStep) Reset() {
	*x = ResponseStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseStep) ProtoMessage() {}

func (x *ResponseStep) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseStep.ProtoReflect.Descriptor instead.
func (*ResponseStep) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{32}
}

func (x *ResponseStep) GetSimulationLoop() uint32 {
	if x != nil && x.SimulationLoop != nil {
		return *x.SimulationLoop
	}
	return 0
}

//-----------------------------------------------------------------------------
type RequestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AbilityId  *bool `protobuf:"varint,1,opt,name=ability_id,json=abilityId" json:"ability_id,omitempty"`
	UnitTypeId *bool `protobuf:"varint,2,opt,name=unit_type_id,json=unitTypeId" json:"unit_type_id,omitempty"`
	UpgradeId  *bool `protobuf:"varint,3,opt,name=upgrade_id,json=upgradeId" json:"upgrade_id,omitempty"`
	BuffId     *bool `protobuf:"varint,4,opt,name=buff_id,json=buffId" json:"buff_id,omitempty"`
	EffectId   *bool `protobuf:"varint,5,opt,name=effect_id,json=effectId" json:"effect_id,omitempty"`
}

func (x *RequestData) Reset() {
	*x = RequestData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestData) ProtoMessage() {}

func (x *RequestData) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestData.ProtoReflect.Descriptor instead.
func (*RequestData) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{33}
}

func (x *RequestData) GetAbilityId() bool {
	if x != nil && x.AbilityId != nil {
		return *x.AbilityId
	}
	return false
}

func (x *RequestData) GetUnitTypeId() bool {
	if x != nil && x.UnitTypeId != nil {
		return *x.UnitTypeId
	}
	return false
}

func (x *RequestData) GetUpgradeId() bool {
	if x != nil && x.UpgradeId != nil {
		return *x.UpgradeId
	}
	return false
}

func (x *RequestData) GetBuffId() bool {
	if x != nil && x.BuffId != nil {
		return *x.BuffId
	}
	return false
}

func (x *RequestData) GetEffectId() bool {
	if x != nil && x.EffectId != nil {
		return *x.EffectId
	}
	return false
}

type ResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Abilities []*AbilityData  `protobuf:"bytes,1,rep,name=abilities" json:"abilities,omitempty"`
	Units     []*UnitTypeData `protobuf:"bytes,2,rep,name=units" json:"units,omitempty"`
	Upgrades  []*UpgradeData  `protobuf:"bytes,3,rep,name=upgrades" json:"upgrades,omitempty"`
	Buffs     []*BuffData     `protobuf:"bytes,4,rep,name=buffs" json:"buffs,omitempty"`
	Effects   []*EffectData   `protobuf:"bytes,5,rep,name=effects" json:"effects,omitempty"`
}

func (x *ResponseData) Reset() {
	*x = ResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseData) ProtoMessage() {}

func (x *ResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseData.ProtoReflect.Descriptor instead.
func (*ResponseData) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{34}
}

func (x *ResponseData) GetAbilities() []*AbilityData {
	if x != nil {
		return x.Abilities
	}
	return nil
}

func (x *ResponseData) GetUnits() []*UnitTypeData {
	if x != nil {
		return x.Units
	}
	return nil
}

func (x *ResponseData) GetUpgrades() []*UpgradeData {
	if x != nil {
		return x.Upgrades
	}
	return nil
}

func (x *ResponseData) GetBuffs() []*BuffData {
	if x != nil {
		return x.Buffs
	}
	return nil
}

func (x *ResponseData) GetEffects() []*EffectData {
	if x != nil {
		return x.Effects
	}
	return nil
}

//-----------------------------------------------------------------------------
type RequestSaveReplay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RequestSaveReplay) Reset() {
	*x = RequestSaveReplay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestSaveReplay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestSaveReplay) ProtoMessage() {}

func (x *RequestSaveReplay) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestSaveReplay.ProtoReflect.Descriptor instead.
func (*RequestSaveReplay) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{35}
}

type ResponseSaveReplay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (x *ResponseSaveReplay) Reset() {
	*x = ResponseSaveReplay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseSaveReplay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseSaveReplay) ProtoMessage() {}

func (x *ResponseSaveReplay) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseSaveReplay.ProtoReflect.Descriptor instead.
func (*ResponseSaveReplay) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{36}
}

func (x *ResponseSaveReplay) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

//-----------------------------------------------------------------------------
type RequestReplayInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Replay:
	//	*RequestReplayInfo_ReplayPath
	//	*RequestReplayInfo_ReplayData
	Replay       isRequestReplayInfo_Replay `protobuf_oneof:"replay"`
	DownloadData *bool                      `protobuf:"varint,3,opt,name=download_data,json=downloadData" json:"download_data,omitempty"` // Ensure the data and binary are downloaded if this is an old version replay.
}

func (x *RequestReplayInfo) Reset() {
	*x = RequestReplayInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestReplayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestReplayInfo) ProtoMessage() {}

func (x *RequestReplayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestReplayInfo.ProtoReflect.Descriptor instead.
func (*RequestReplayInfo) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{37}
}

func (m *RequestReplayInfo) GetReplay() isRequestReplayInfo_Replay {
	if m != nil {
		return m.Replay
	}
	return nil
}

func (x *RequestReplayInfo) GetReplayPath() string {
	if x, ok := x.GetReplay().(*RequestReplayInfo_ReplayPath); ok {
		return x.ReplayPath
	}
	return ""
}

func (x *RequestReplayInfo) GetReplayData() []byte {
	if x, ok := x.GetReplay().(*RequestReplayInfo_ReplayData); ok {
		return x.ReplayData
	}
	return nil
}

func (x *RequestReplayInfo) GetDownloadData() bool {
	if x != nil && x.DownloadData != nil {
		return *x.DownloadData
	}
	return false
}

type isRequestReplayInfo_Replay interface {
	isRequestReplayInfo_Replay()
}

type RequestReplayInfo_ReplayPath struct {
	ReplayPath string `protobuf:"bytes,1,opt,name=replay_path,json=replayPath,oneof"` // Limitation: might fail if the replay file is currently loaded.
}

type RequestReplayInfo_ReplayData struct {
	ReplayData []byte `protobuf:"bytes,2,opt,name=replay_data,json=replayData,oneof"`
}

func (*RequestReplayInfo_ReplayPath) isRequestReplayInfo_Replay() {}

func (*RequestReplayInfo_ReplayData) isRequestReplayInfo_Replay() {}

type PlayerInfoExtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerInfo   *PlayerInfo   `protobuf:"bytes,1,opt,name=player_info,json=playerInfo" json:"player_info,omitempty"`
	PlayerResult *PlayerResult `protobuf:"bytes,2,opt,name=player_result,json=playerResult" json:"player_result,omitempty"`
	PlayerMmr    *int32        `protobuf:"varint,3,opt,name=player_mmr,json=playerMmr" json:"player_mmr,omitempty"`
	PlayerApm    *int32        `protobuf:"varint,4,opt,name=player_apm,json=playerApm" json:"player_apm,omitempty"`
}

func (x *PlayerInfoExtra) Reset() {
	*x = PlayerInfoExtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerInfoExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerInfoExtra) ProtoMessage() {}

func (x *PlayerInfoExtra) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerInfoExtra.ProtoReflect.Descriptor instead.
func (*PlayerInfoExtra) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{38}
}

func (x *PlayerInfoExtra) GetPlayerInfo() *PlayerInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

func (x *PlayerInfoExtra) GetPlayerResult() *PlayerResult {
	if x != nil {
		return x.PlayerResult
	}
	return nil
}

func (x *PlayerInfoExtra) GetPlayerMmr() int32 {
	if x != nil && x.PlayerMmr != nil {
		return *x.PlayerMmr
	}
	return 0
}

func (x *PlayerInfoExtra) GetPlayerApm() int32 {
	if x != nil && x.PlayerApm != nil {
		return *x.PlayerApm
	}
	return 0
}

type ResponseReplayInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapName             *string                   `protobuf:"bytes,1,opt,name=map_name,json=mapName" json:"map_name,omitempty"`
	LocalMapPath        *string                   `protobuf:"bytes,2,opt,name=local_map_path,json=localMapPath" json:"local_map_path,omitempty"`
	PlayerInfo          []*PlayerInfoExtra        `protobuf:"bytes,3,rep,name=player_info,json=playerInfo" json:"player_info,omitempty"`
	GameDurationLoops   *uint32                   `protobuf:"varint,4,opt,name=game_duration_loops,json=gameDurationLoops" json:"game_duration_loops,omitempty"`
	GameDurationSeconds *float32                  `protobuf:"fixed32,5,opt,name=game_duration_seconds,json=gameDurationSeconds" json:"game_duration_seconds,omitempty"`
	GameVersion         *string                   `protobuf:"bytes,6,opt,name=game_version,json=gameVersion" json:"game_version,omitempty"`
	DataVersion         *string                   `protobuf:"bytes,11,opt,name=data_version,json=dataVersion" json:"data_version,omitempty"`
	DataBuild           *uint32                   `protobuf:"varint,7,opt,name=data_build,json=dataBuild" json:"data_build,omitempty"`
	BaseBuild           *uint32                   `protobuf:"varint,8,opt,name=base_build,json=baseBuild" json:"base_build,omitempty"`
	Error               *ResponseReplayInfo_Error `protobuf:"varint,9,opt,name=error,enum=sc2proto.ResponseReplayInfo_Error" json:"error,omitempty"`
	ErrorDetails        *string                   `protobuf:"bytes,10,opt,name=error_details,json=errorDetails" json:"error_details,omitempty"`
}

func (x *ResponseReplayInfo) Reset() {
	*x = ResponseReplayInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseReplayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseReplayInfo) ProtoMessage() {}

func (x *ResponseReplayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseReplayInfo.ProtoReflect.Descriptor instead.
func (*ResponseReplayInfo) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{39}
}

func (x *ResponseReplayInfo) GetMapName() string {
	if x != nil && x.MapName != nil {
		return *x.MapName
	}
	return ""
}

func (x *ResponseReplayInfo) GetLocalMapPath() string {
	if x != nil && x.LocalMapPath != nil {
		return *x.LocalMapPath
	}
	return ""
}

func (x *ResponseReplayInfo) GetPlayerInfo() []*PlayerInfoExtra {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

func (x *ResponseReplayInfo) GetGameDurationLoops() uint32 {
	if x != nil && x.GameDurationLoops != nil {
		return *x.GameDurationLoops
	}
	return 0
}

func (x *ResponseReplayInfo) GetGameDurationSeconds() float32 {
	if x != nil && x.GameDurationSeconds != nil {
		return *x.GameDurationSeconds
	}
	return 0
}

func (x *ResponseReplayInfo) GetGameVersion() string {
	if x != nil && x.GameVersion != nil {
		return *x.GameVersion
	}
	return ""
}

func (x *ResponseReplayInfo) GetDataVersion() string {
	if x != nil && x.DataVersion != nil {
		return *x.DataVersion
	}
	return ""
}

func (x *ResponseReplayInfo) GetDataBuild() uint32 {
	if x != nil && x.DataBuild != nil {
		return *x.DataBuild
	}
	return 0
}

func (x *ResponseReplayInfo) GetBaseBuild() uint32 {
	if x != nil && x.BaseBuild != nil {
		return *x.BaseBuild
	}
	return 0
}

func (x *ResponseReplayInfo) GetError() ResponseReplayInfo_Error {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ResponseReplayInfo_MissingReplay
}

func (x *ResponseReplayInfo) GetErrorDetails() string {
	if x != nil && x.ErrorDetails != nil {
		return *x.ErrorDetails
	}
	return ""
}

//-----------------------------------------------------------------------------
type RequestAvailableMaps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RequestAvailableMaps) Reset() {
	*x = RequestAvailableMaps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestAvailableMaps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestAvailableMaps) ProtoMessage() {}

func (x *RequestAvailableMaps) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestAvailableMaps.ProtoReflect.Descriptor instead.
func (*RequestAvailableMaps) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{40}
}

// This will only contain locally cached BattleNet maps.
// To download all ladder maps, log in and queue into a ladder match.
// To download any other map, play a custom game on that map.
type ResponseAvailableMaps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalMapPaths     []string `protobuf:"bytes,1,rep,name=local_map_paths,json=localMapPaths" json:"local_map_paths,omitempty"`             // All the maps in the "Maps/" directory.
	BattlenetMapNames []string `protobuf:"bytes,2,rep,name=battlenet_map_names,json=battlenetMapNames" json:"battlenet_map_names,omitempty"` // All the maps in the BattleNet cache.
}

func (x *ResponseAvailableMaps) Reset() {
	*x = ResponseAvailableMaps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseAvailableMaps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseAvailableMaps) ProtoMessage() {}

func (x *ResponseAvailableMaps) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseAvailableMaps.ProtoReflect.Descriptor instead.
func (*ResponseAvailableMaps) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{41}
}

func (x *ResponseAvailableMaps) GetLocalMapPaths() []string {
	if x != nil {
		return x.LocalMapPaths
	}
	return nil
}

func (x *ResponseAvailableMaps) GetBattlenetMapNames() []string {
	if x != nil {
		return x.BattlenetMapNames
	}
	return nil
}

//-----------------------------------------------------------------------------
// Copies map data into the path specified.
type RequestSaveMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapPath *string `protobuf:"bytes,1,opt,name=map_path,json=mapPath" json:"map_path,omitempty"` // Path the game process will write to, relative to the temp directory. (260 character max)
	MapData []byte  `protobuf:"bytes,2,opt,name=map_data,json=mapData" json:"map_data,omitempty"` // Binary map data of a .SC2Map.
}

func (x *RequestSaveMap) Reset() {
	*x = RequestSaveMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestSaveMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestSaveMap) ProtoMessage() {}

func (x *RequestSaveMap) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestSaveMap.ProtoReflect.Descriptor instead.
func (*RequestSaveMap) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{42}
}

func (x *RequestSaveMap) GetMapPath() string {
	if x != nil && x.MapPath != nil {
		return *x.MapPath
	}
	return ""
}

func (x *RequestSaveMap) GetMapData() []byte {
	if x != nil {
		return x.MapData
	}
	return nil
}

type ResponseSaveMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *ResponseSaveMap_Error `protobuf:"varint,1,opt,name=error,enum=sc2proto.ResponseSaveMap_Error" json:"error,omitempty"`
}

func (x *ResponseSaveMap) Reset() {
	*x = ResponseSaveMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseSaveMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseSaveMap) ProtoMessage() {}

func (x *ResponseSaveMap) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseSaveMap.ProtoReflect.Descriptor instead.
func (*ResponseSaveMap) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{43}
}

func (x *ResponseSaveMap) GetError() ResponseSaveMap_Error {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ResponseSaveMap_InvalidMapData
}

//-----------------------------------------------------------------------------
type RequestPing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RequestPing) Reset() {
	*x = RequestPing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestPing) ProtoMessage() {}

func (x *RequestPing) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestPing.ProtoReflect.Descriptor instead.
func (*RequestPing) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{44}
}

type ResponsePing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameVersion *string `protobuf:"bytes,1,opt,name=game_version,json=gameVersion" json:"game_version,omitempty"`
	DataVersion *string `protobuf:"bytes,2,opt,name=data_version,json=dataVersion" json:"data_version,omitempty"`
	DataBuild   *uint32 `protobuf:"varint,3,opt,name=data_build,json=dataBuild" json:"data_build,omitempty"`
	BaseBuild   *uint32 `protobuf:"varint,4,opt,name=base_build,json=baseBuild" json:"base_build,omitempty"`
}

func (x *ResponsePing) Reset() {
	*x = ResponsePing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponsePing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsePing) ProtoMessage() {}

func (x *ResponsePing) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsePing.ProtoReflect.Descriptor instead.
func (*ResponsePing) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{45}
}

func (x *ResponsePing) GetGameVersion() string {
	if x != nil && x.GameVersion != nil {
		return *x.GameVersion
	}
	return ""
}

func (x *ResponsePing) GetDataVersion() string {
	if x != nil && x.DataVersion != nil {
		return *x.DataVersion
	}
	return ""
}

func (x *ResponsePing) GetDataBuild() uint32 {
	if x != nil && x.DataBuild != nil {
		return *x.DataBuild
	}
	return 0
}

func (x *ResponsePing) GetBaseBuild() uint32 {
	if x != nil && x.BaseBuild != nil {
		return *x.BaseBuild
	}
	return 0
}

//-----------------------------------------------------------------------------
type RequestDebug struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debug []*DebugCommand `protobuf:"bytes,1,rep,name=debug" json:"debug,omitempty"`
}

func (x *RequestDebug) Reset() {
	*x = RequestDebug{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestDebug) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestDebug) ProtoMessage() {}

func (x *RequestDebug) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestDebug.ProtoReflect.Descriptor instead.
func (*RequestDebug) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{46}
}

func (x *RequestDebug) GetDebug() []*DebugCommand {
	if x != nil {
		return x.Debug
	}
	return nil
}

type ResponseDebug struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResponseDebug) Reset() {
	*x = ResponseDebug{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseDebug) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseDebug) ProtoMessage() {}

func (x *ResponseDebug) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseDebug.ProtoReflect.Descriptor instead.
func (*ResponseDebug) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{47}
}

type PlayerSetup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *PlayerType `protobuf:"varint,1,opt,name=type,enum=sc2proto.PlayerType" json:"type,omitempty"`
	// Only used for a computer player.
	Race       *Race       `protobuf:"varint,2,opt,name=race,enum=sc2proto.Race" json:"race,omitempty"`
	Difficulty *Difficulty `protobuf:"varint,3,opt,name=difficulty,enum=sc2proto.Difficulty" json:"difficulty,omitempty"`
	PlayerName *string     `protobuf:"bytes,4,opt,name=player_name,json=playerName" json:"player_name,omitempty"`
	AiBuild    *AIBuild    `protobuf:"varint,5,opt,name=ai_build,json=aiBuild,enum=sc2proto.AIBuild" json:"ai_build,omitempty"`
}

func (x *PlayerSetup) Reset() {
	*x = PlayerSetup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSetup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSetup) ProtoMessage() {}

func (x *PlayerSetup) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSetup.ProtoReflect.Descriptor instead.
func (*PlayerSetup) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{48}
}

func (x *PlayerSetup) GetType() PlayerType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return PlayerType_Participant
}

func (x *PlayerSetup) GetRace() Race {
	if x != nil && x.Race != nil {
		return *x.Race
	}
	return Race_NoRace
}

func (x *PlayerSetup) GetDifficulty() Difficulty {
	if x != nil && x.Difficulty != nil {
		return *x.Difficulty
	}
	return Difficulty_VeryEasy
}

func (x *PlayerSetup) GetPlayerName() string {
	if x != nil && x.PlayerName != nil {
		return *x.PlayerName
	}
	return ""
}

func (x *PlayerSetup) GetAiBuild() AIBuild {
	if x != nil && x.AiBuild != nil {
		return *x.AiBuild
	}
	return AIBuild_RandomBuild
}

type SpatialCameraSetup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resolution        *Size2DI `protobuf:"bytes,2,opt,name=resolution" json:"resolution,omitempty"`
	MinimapResolution *Size2DI `protobuf:"bytes,3,opt,name=minimap_resolution,json=minimapResolution" json:"minimap_resolution,omitempty"`
	// Below are only relevant for feature layers.
	Width               *float32 `protobuf:"fixed32,1,opt,name=width" json:"width,omitempty"`                                                         // Set the screen camera width in world units.
	CropToPlayableArea  *bool    `protobuf:"varint,4,opt,name=crop_to_playable_area,json=cropToPlayableArea" json:"crop_to_playable_area,omitempty"`  // Crop minimap to the playable area.
	AllowCheatingLayers *bool    `protobuf:"varint,5,opt,name=allow_cheating_layers,json=allowCheatingLayers" json:"allow_cheating_layers,omitempty"` // Return unit_type on the minimap, and potentially other cheating layers.
}

func (x *SpatialCameraSetup) Reset() {
	*x = SpatialCameraSetup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpatialCameraSetup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpatialCameraSetup) ProtoMessage() {}

func (x *SpatialCameraSetup) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpatialCameraSetup.ProtoReflect.Descriptor instead.
func (*SpatialCameraSetup) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{49}
}

func (x *SpatialCameraSetup) GetResolution() *Size2DI {
	if x != nil {
		return x.Resolution
	}
	return nil
}

func (x *SpatialCameraSetup) GetMinimapResolution() *Size2DI {
	if x != nil {
		return x.MinimapResolution
	}
	return nil
}

func (x *SpatialCameraSetup) GetWidth() float32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *SpatialCameraSetup) GetCropToPlayableArea() bool {
	if x != nil && x.CropToPlayableArea != nil {
		return *x.CropToPlayableArea
	}
	return false
}

func (x *SpatialCameraSetup) GetAllowCheatingLayers() bool {
	if x != nil && x.AllowCheatingLayers != nil {
		return *x.AllowCheatingLayers
	}
	return false
}

type InterfaceOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interface options
	Raw                 *bool               `protobuf:"varint,1,opt,name=raw" json:"raw,omitempty"`
	Score               *bool               `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
	FeatureLayer        *SpatialCameraSetup `protobuf:"bytes,3,opt,name=feature_layer,json=featureLayer" json:"feature_layer,omitempty"`                         // Omit to disable.
	Render              *SpatialCameraSetup `protobuf:"bytes,4,opt,name=render" json:"render,omitempty"`                                                         // Omit to disable.
	ShowCloaked         *bool               `protobuf:"varint,5,opt,name=show_cloaked,json=showCloaked" json:"show_cloaked,omitempty"`                           // By default cloaked units are completely hidden. This shows some details.
	ShowBurrowedShadows *bool               `protobuf:"varint,9,opt,name=show_burrowed_shadows,json=showBurrowedShadows" json:"show_burrowed_shadows,omitempty"` // By default burrowed units are completely hidden. This shows some details for those that produce a shadow.
	ShowPlaceholders    *bool               `protobuf:"varint,8,opt,name=show_placeholders,json=showPlaceholders" json:"show_placeholders,omitempty"`            // Return placeholder units (buildings to be constructed), both for raw and feature layers.
	// By default raw actions select, act and revert the selection. This is useful
	// if you're playing simultaneously with the agent so it doesn't steal your
	// selection. This inflates APM (due to deselect) and makes the actions hard
	// to follow in a replay. Setting this to true will cause raw actions to do
	// select, act, but not revert the selection.
	RawAffectsSelection *bool `protobuf:"varint,6,opt,name=raw_affects_selection,json=rawAffectsSelection" json:"raw_affects_selection,omitempty"`
	// Changes the coordinates in raw.proto to be relative to the playable area.
	// The map_size and playable_area will be the diagonal of the real playable area.
	RawCropToPlayableArea *bool `protobuf:"varint,7,opt,name=raw_crop_to_playable_area,json=rawCropToPlayableArea" json:"raw_crop_to_playable_area,omitempty"`
}

func (x *InterfaceOptions) Reset() {
	*x = InterfaceOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceOptions) ProtoMessage() {}

func (x *InterfaceOptions) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceOptions.ProtoReflect.Descriptor instead.
func (*InterfaceOptions) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{50}
}

func (x *InterfaceOptions) GetRaw() bool {
	if x != nil && x.Raw != nil {
		return *x.Raw
	}
	return false
}

func (x *InterfaceOptions) GetScore() bool {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return false
}

func (x *InterfaceOptions) GetFeatureLayer() *SpatialCameraSetup {
	if x != nil {
		return x.FeatureLayer
	}
	return nil
}

func (x *InterfaceOptions) GetRender() *SpatialCameraSetup {
	if x != nil {
		return x.Render
	}
	return nil
}

func (x *InterfaceOptions) GetShowCloaked() bool {
	if x != nil && x.ShowCloaked != nil {
		return *x.ShowCloaked
	}
	return false
}

func (x *InterfaceOptions) GetShowBurrowedShadows() bool {
	if x != nil && x.ShowBurrowedShadows != nil {
		return *x.ShowBurrowedShadows
	}
	return false
}

func (x *InterfaceOptions) GetShowPlaceholders() bool {
	if x != nil && x.ShowPlaceholders != nil {
		return *x.ShowPlaceholders
	}
	return false
}

func (x *InterfaceOptions) GetRawAffectsSelection() bool {
	if x != nil && x.RawAffectsSelection != nil {
		return *x.RawAffectsSelection
	}
	return false
}

func (x *InterfaceOptions) GetRawCropToPlayableArea() bool {
	if x != nil && x.RawCropToPlayableArea != nil {
		return *x.RawCropToPlayableArea
	}
	return false
}

type PlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier that will be used to reference this player.
	// SC2 will always assign playerIds starting from 1 in standard Melee maps. This may not be true in custom maps.
	PlayerId      *uint32     `protobuf:"varint,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	Type          *PlayerType `protobuf:"varint,2,opt,name=type,enum=sc2proto.PlayerType" json:"type,omitempty"`
	RaceRequested *Race       `protobuf:"varint,3,opt,name=race_requested,json=raceRequested,enum=sc2proto.Race" json:"race_requested,omitempty"`
	RaceActual    *Race       `protobuf:"varint,4,opt,name=race_actual,json=raceActual,enum=sc2proto.Race" json:"race_actual,omitempty"` // Only populated for your player or when watching replay
	Difficulty    *Difficulty `protobuf:"varint,5,opt,name=difficulty,enum=sc2proto.Difficulty" json:"difficulty,omitempty"`
	AiBuild       *AIBuild    `protobuf:"varint,7,opt,name=ai_build,json=aiBuild,enum=sc2proto.AIBuild" json:"ai_build,omitempty"`
	PlayerName    *string     `protobuf:"bytes,6,opt,name=player_name,json=playerName" json:"player_name,omitempty"`
}

func (x *PlayerInfo) Reset() {
	*x = PlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerInfo) ProtoMessage() {}

func (x *PlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerInfo.ProtoReflect.Descriptor instead.
func (*PlayerInfo) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{51}
}

func (x *PlayerInfo) GetPlayerId() uint32 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *PlayerInfo) GetType() PlayerType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return PlayerType_Participant
}

func (x *PlayerInfo) GetRaceRequested() Race {
	if x != nil && x.RaceRequested != nil {
		return *x.RaceRequested
	}
	return Race_NoRace
}

func (x *PlayerInfo) GetRaceActual() Race {
	if x != nil && x.RaceActual != nil {
		return *x.RaceActual
	}
	return Race_NoRace
}

func (x *PlayerInfo) GetDifficulty() Difficulty {
	if x != nil && x.Difficulty != nil {
		return *x.Difficulty
	}
	return Difficulty_VeryEasy
}

func (x *PlayerInfo) GetAiBuild() AIBuild {
	if x != nil && x.AiBuild != nil {
		return *x.AiBuild
	}
	return AIBuild_RandomBuild
}

func (x *PlayerInfo) GetPlayerName() string {
	if x != nil && x.PlayerName != nil {
		return *x.PlayerName
	}
	return ""
}

type PlayerCommon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId        *uint32 `protobuf:"varint,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	Minerals        *uint32 `protobuf:"varint,2,opt,name=minerals" json:"minerals,omitempty"`
	Vespene         *uint32 `protobuf:"varint,3,opt,name=vespene" json:"vespene,omitempty"`
	FoodCap         *uint32 `protobuf:"varint,4,opt,name=food_cap,json=foodCap" json:"food_cap,omitempty"`
	FoodUsed        *uint32 `protobuf:"varint,5,opt,name=food_used,json=foodUsed" json:"food_used,omitempty"`
	FoodArmy        *uint32 `protobuf:"varint,6,opt,name=food_army,json=foodArmy" json:"food_army,omitempty"`
	FoodWorkers     *uint32 `protobuf:"varint,7,opt,name=food_workers,json=foodWorkers" json:"food_workers,omitempty"`
	IdleWorkerCount *uint32 `protobuf:"varint,8,opt,name=idle_worker_count,json=idleWorkerCount" json:"idle_worker_count,omitempty"`
	ArmyCount       *uint32 `protobuf:"varint,9,opt,name=army_count,json=armyCount" json:"army_count,omitempty"`
	WarpGateCount   *uint32 `protobuf:"varint,10,opt,name=warp_gate_count,json=warpGateCount" json:"warp_gate_count,omitempty"`
	LarvaCount      *uint32 `protobuf:"varint,11,opt,name=larva_count,json=larvaCount" json:"larva_count,omitempty"`
}

func (x *PlayerCommon) Reset() {
	*x = PlayerCommon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerCommon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerCommon) ProtoMessage() {}

func (x *PlayerCommon) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerCommon.ProtoReflect.Descriptor instead.
func (*PlayerCommon) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{52}
}

func (x *PlayerCommon) GetPlayerId() uint32 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *PlayerCommon) GetMinerals() uint32 {
	if x != nil && x.Minerals != nil {
		return *x.Minerals
	}
	return 0
}

func (x *PlayerCommon) GetVespene() uint32 {
	if x != nil && x.Vespene != nil {
		return *x.Vespene
	}
	return 0
}

func (x *PlayerCommon) GetFoodCap() uint32 {
	if x != nil && x.FoodCap != nil {
		return *x.FoodCap
	}
	return 0
}

func (x *PlayerCommon) GetFoodUsed() uint32 {
	if x != nil && x.FoodUsed != nil {
		return *x.FoodUsed
	}
	return 0
}

func (x *PlayerCommon) GetFoodArmy() uint32 {
	if x != nil && x.FoodArmy != nil {
		return *x.FoodArmy
	}
	return 0
}

func (x *PlayerCommon) GetFoodWorkers() uint32 {
	if x != nil && x.FoodWorkers != nil {
		return *x.FoodWorkers
	}
	return 0
}

func (x *PlayerCommon) GetIdleWorkerCount() uint32 {
	if x != nil && x.IdleWorkerCount != nil {
		return *x.IdleWorkerCount
	}
	return 0
}

func (x *PlayerCommon) GetArmyCount() uint32 {
	if x != nil && x.ArmyCount != nil {
		return *x.ArmyCount
	}
	return 0
}

func (x *PlayerCommon) GetWarpGateCount() uint32 {
	if x != nil && x.WarpGateCount != nil {
		return *x.WarpGateCount
	}
	return 0
}

func (x *PlayerCommon) GetLarvaCount() uint32 {
	if x != nil && x.LarvaCount != nil {
		return *x.LarvaCount
	}
	return 0
}

type Observation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameLoop         *uint32                  `protobuf:"varint,9,opt,name=game_loop,json=gameLoop" json:"game_loop,omitempty"`
	PlayerCommon     *PlayerCommon            `protobuf:"bytes,1,opt,name=player_common,json=playerCommon" json:"player_common,omitempty"`
	Alerts           []Alert                  `protobuf:"varint,10,rep,name=alerts,enum=sc2proto.Alert" json:"alerts,omitempty"`
	Abilities        []*AvailableAbility      `protobuf:"bytes,3,rep,name=abilities" json:"abilities,omitempty"` // Abilities available in the selection. Enabled if in this list, disabled otherwise.
	Score            *Score                   `protobuf:"bytes,4,opt,name=score" json:"score,omitempty"`
	RawData          *ObservationRaw          `protobuf:"bytes,5,opt,name=raw_data,json=rawData" json:"raw_data,omitempty"`                              // Populated if Raw interface is enabled.
	FeatureLayerData *ObservationFeatureLayer `protobuf:"bytes,6,opt,name=feature_layer_data,json=featureLayerData" json:"feature_layer_data,omitempty"` // Populated if Feature Layer interface is enabled.
	RenderData       *ObservationRender       `protobuf:"bytes,7,opt,name=render_data,json=renderData" json:"render_data,omitempty"`                     // Populated if Render interface is enabled.
	UiData           *ObservationUI           `protobuf:"bytes,8,opt,name=ui_data,json=uiData" json:"ui_data,omitempty"`                                 // Populated if Feature Layer or Render interface is enabled.
}

func (x *Observation) Reset() {
	*x = Observation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Observation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Observation) ProtoMessage() {}

func (x *Observation) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Observation.ProtoReflect.Descriptor instead.
func (*Observation) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{53}
}

func (x *Observation) GetGameLoop() uint32 {
	if x != nil && x.GameLoop != nil {
		return *x.GameLoop
	}
	return 0
}

func (x *Observation) GetPlayerCommon() *PlayerCommon {
	if x != nil {
		return x.PlayerCommon
	}
	return nil
}

func (x *Observation) GetAlerts() []Alert {
	if x != nil {
		return x.Alerts
	}
	return nil
}

func (x *Observation) GetAbilities() []*AvailableAbility {
	if x != nil {
		return x.Abilities
	}
	return nil
}

func (x *Observation) GetScore() *Score {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *Observation) GetRawData() *ObservationRaw {
	if x != nil {
		return x.RawData
	}
	return nil
}

func (x *Observation) GetFeatureLayerData() *ObservationFeatureLayer {
	if x != nil {
		return x.FeatureLayerData
	}
	return nil
}

func (x *Observation) GetRenderData() *ObservationRender {
	if x != nil {
		return x.RenderData
	}
	return nil
}

func (x *Observation) GetUiData() *ObservationUI {
	if x != nil {
		return x.UiData
	}
	return nil
}

type Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionRaw          *ActionRaw     `protobuf:"bytes,1,opt,name=action_raw,json=actionRaw" json:"action_raw,omitempty"`                              // Populated if Raw interface is enabled.
	ActionFeatureLayer *ActionSpatial `protobuf:"bytes,2,opt,name=action_feature_layer,json=actionFeatureLayer" json:"action_feature_layer,omitempty"` // Populated if Feature Layer interface is enabled.
	ActionRender       *ActionSpatial `protobuf:"bytes,3,opt,name=action_render,json=actionRender" json:"action_render,omitempty"`                     // Not implemented. Populated if Render interface is enabled.
	ActionUi           *ActionUI      `protobuf:"bytes,4,opt,name=action_ui,json=actionUi" json:"action_ui,omitempty"`                                 // Populated if Feature Layer or Render interface is enabled.
	ActionChat         *ActionChat    `protobuf:"bytes,6,opt,name=action_chat,json=actionChat" json:"action_chat,omitempty"`                           // Chat messages as a player typing into the chat channel.
	GameLoop           *uint32        `protobuf:"varint,7,opt,name=game_loop,json=gameLoop" json:"game_loop,omitempty"`                                // Populated for actions in ResponseObservation. The game loop on which the action was executed.
}

func (x *Action) Reset() {
	*x = Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{54}
}

func (x *Action) GetActionRaw() *ActionRaw {
	if x != nil {
		return x.ActionRaw
	}
	return nil
}

func (x *Action) GetActionFeatureLayer() *ActionSpatial {
	if x != nil {
		return x.ActionFeatureLayer
	}
	return nil
}

func (x *Action) GetActionRender() *ActionSpatial {
	if x != nil {
		return x.ActionRender
	}
	return nil
}

func (x *Action) GetActionUi() *ActionUI {
	if x != nil {
		return x.ActionUi
	}
	return nil
}

func (x *Action) GetActionChat() *ActionChat {
	if x != nil {
		return x.ActionChat
	}
	return nil
}

func (x *Action) GetGameLoop() uint32 {
	if x != nil && x.GameLoop != nil {
		return *x.GameLoop
	}
	return 0
}

type ActionChat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel *ActionChat_Channel `protobuf:"varint,1,opt,name=channel,enum=sc2proto.ActionChat_Channel" json:"channel,omitempty"`
	Message *string             `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (x *ActionChat) Reset() {
	*x = ActionChat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionChat) ProtoMessage() {}

func (x *ActionChat) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionChat.ProtoReflect.Descriptor instead.
func (*ActionChat) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{55}
}

func (x *ActionChat) GetChannel() ActionChat_Channel {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return ActionChat_Broadcast
}

func (x *ActionChat) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type ActionError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnitTag   *uint64       `protobuf:"varint,1,opt,name=unit_tag,json=unitTag" json:"unit_tag,omitempty"` // Only populated when using raw interface.
	AbilityId *uint64       `protobuf:"varint,2,opt,name=ability_id,json=abilityId" json:"ability_id,omitempty"`
	Result    *ActionResult `protobuf:"varint,3,opt,name=result,enum=sc2proto.ActionResult" json:"result,omitempty"`
}

func (x *ActionError) Reset() {
	*x = ActionError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionError) ProtoMessage() {}

func (x *ActionError) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionError.ProtoReflect.Descriptor instead.
func (*ActionError) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{56}
}

func (x *ActionError) GetUnitTag() uint64 {
	if x != nil && x.UnitTag != nil {
		return *x.UnitTag
	}
	return 0
}

func (x *ActionError) GetAbilityId() uint64 {
	if x != nil && x.AbilityId != nil {
		return *x.AbilityId
	}
	return 0
}

func (x *ActionError) GetResult() ActionResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return ActionResult_Success
}

type ObserverAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Action:
	//	*ObserverAction_PlayerPerspective
	//	*ObserverAction_CameraMove
	//	*ObserverAction_CameraFollowPlayer
	//	*ObserverAction_CameraFollowUnits
	Action isObserverAction_Action `protobuf_oneof:"action"`
}

func (x *ObserverAction) Reset() {
	*x = ObserverAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObserverAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObserverAction) ProtoMessage() {}

func (x *ObserverAction) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObserverAction.ProtoReflect.Descriptor instead.
func (*ObserverAction) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{57}
}

func (m *ObserverAction) GetAction() isObserverAction_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *ObserverAction) GetPlayerPerspective() *ActionObserverPlayerPerspective {
	if x, ok := x.GetAction().(*ObserverAction_PlayerPerspective); ok {
		return x.PlayerPerspective
	}
	return nil
}

func (x *ObserverAction) GetCameraMove() *ActionObserverCameraMove {
	if x, ok := x.GetAction().(*ObserverAction_CameraMove); ok {
		return x.CameraMove
	}
	return nil
}

func (x *ObserverAction) GetCameraFollowPlayer() *ActionObserverCameraFollowPlayer {
	if x, ok := x.GetAction().(*ObserverAction_CameraFollowPlayer); ok {
		return x.CameraFollowPlayer
	}
	return nil
}

func (x *ObserverAction) GetCameraFollowUnits() *ActionObserverCameraFollowUnits {
	if x, ok := x.GetAction().(*ObserverAction_CameraFollowUnits); ok {
		return x.CameraFollowUnits
	}
	return nil
}

type isObserverAction_Action interface {
	isObserverAction_Action()
}

type ObserverAction_PlayerPerspective struct {
	PlayerPerspective *ActionObserverPlayerPerspective `protobuf:"bytes,1,opt,name=player_perspective,json=playerPerspective,oneof"` // Not implemented
}

type ObserverAction_CameraMove struct {
	CameraMove *ActionObserverCameraMove `protobuf:"bytes,2,opt,name=camera_move,json=cameraMove,oneof"`
}

type ObserverAction_CameraFollowPlayer struct {
	CameraFollowPlayer *ActionObserverCameraFollowPlayer `protobuf:"bytes,3,opt,name=camera_follow_player,json=cameraFollowPlayer,oneof"`
}

type ObserverAction_CameraFollowUnits struct {
	CameraFollowUnits *ActionObserverCameraFollowUnits `protobuf:"bytes,4,opt,name=camera_follow_units,json=cameraFollowUnits,oneof"` // Not implemented
}

func (*ObserverAction_PlayerPerspective) isObserverAction_Action() {}

func (*ObserverAction_CameraMove) isObserverAction_Action() {}

func (*ObserverAction_CameraFollowPlayer) isObserverAction_Action() {}

func (*ObserverAction_CameraFollowUnits) isObserverAction_Action() {}

type ActionObserverPlayerPerspective struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId *uint32 `protobuf:"varint,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"` // 0 to observe "Everyone"
}

func (x *ActionObserverPlayerPerspective) Reset() {
	*x = ActionObserverPlayerPerspective{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionObserverPlayerPerspective) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionObserverPlayerPerspective) ProtoMessage() {}

func (x *ActionObserverPlayerPerspective) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionObserverPlayerPerspective.ProtoReflect.Descriptor instead.
func (*ActionObserverPlayerPerspective) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{58}
}

func (x *ActionObserverPlayerPerspective) GetPlayerId() uint32 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

type ActionObserverCameraMove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorldPos *Point2D `protobuf:"bytes,1,opt,name=world_pos,json=worldPos" json:"world_pos,omitempty"`
	// Distance between camera and terrain. Larger value zooms out camera.
	// Defaults to standard camera distance if set to 0.
	Distance *float32 `protobuf:"fixed32,2,opt,name=distance" json:"distance,omitempty"`
}

func (x *ActionObserverCameraMove) Reset() {
	*x = ActionObserverCameraMove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionObserverCameraMove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionObserverCameraMove) ProtoMessage() {}

func (x *ActionObserverCameraMove) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionObserverCameraMove.ProtoReflect.Descriptor instead.
func (*ActionObserverCameraMove) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{59}
}

func (x *ActionObserverCameraMove) GetWorldPos() *Point2D {
	if x != nil {
		return x.WorldPos
	}
	return nil
}

func (x *ActionObserverCameraMove) GetDistance() float32 {
	if x != nil && x.Distance != nil {
		return *x.Distance
	}
	return 0
}

type ActionObserverCameraFollowPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId *uint32 `protobuf:"varint,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"` // Not implemented. Value must be [1, 15]
}

func (x *ActionObserverCameraFollowPlayer) Reset() {
	*x = ActionObserverCameraFollowPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionObserverCameraFollowPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionObserverCameraFollowPlayer) ProtoMessage() {}

func (x *ActionObserverCameraFollowPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionObserverCameraFollowPlayer.ProtoReflect.Descriptor instead.
func (*ActionObserverCameraFollowPlayer) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{60}
}

func (x *ActionObserverCameraFollowPlayer) GetPlayerId() uint32 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

type ActionObserverCameraFollowUnits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnitTags []uint64 `protobuf:"varint,1,rep,name=unit_tags,json=unitTags" json:"unit_tags,omitempty"`
}

func (x *ActionObserverCameraFollowUnits) Reset() {
	*x = ActionObserverCameraFollowUnits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionObserverCameraFollowUnits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionObserverCameraFollowUnits) ProtoMessage() {}

func (x *ActionObserverCameraFollowUnits) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionObserverCameraFollowUnits.ProtoReflect.Descriptor instead.
func (*ActionObserverCameraFollowUnits) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{61}
}

func (x *ActionObserverCameraFollowUnits) GetUnitTags() []uint64 {
	if x != nil {
		return x.UnitTags
	}
	return nil
}

type PlayerResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId *uint32 `protobuf:"varint,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	Result   *Result `protobuf:"varint,2,opt,name=result,enum=sc2proto.Result" json:"result,omitempty"`
}

func (x *PlayerResult) Reset() {
	*x = PlayerResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sc2api_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerResult) ProtoMessage() {}

func (x *PlayerResult) ProtoReflect() protoreflect.Message {
	mi := &file_sc2api_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerResult.ProtoReflect.Descriptor instead.
func (*PlayerResult) Descriptor() ([]byte, []int) {
	return file_sc2api_proto_rawDescGZIP(), []int{62}
}

func (x *PlayerResult) GetPlayerId() uint32 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *PlayerResult) GetResult() Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Result_Victory
}

var File_sc2api_proto protoreflect.FileDescriptor

var file_sc2api_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x63, 0x32, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08,
	0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0b, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x09, 0x72, 0x61, 0x77, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0d, 0x73, 0x70, 0x61, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x08, 0x75, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa0, 0x0a, 0x0a, 0x07, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x63,
	0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x63, 0x32, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4a, 0x6f, 0x69, 0x6e,
	0x47, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65,
	0x12, 0x41, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x47, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x47,
	0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x70,
	0x6c, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x63, 0x32, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x3b, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x63, 0x32,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x47,
	0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x5f, 0x73, 0x61, 0x76,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x53,
	0x61, 0x76, 0x65, 0x48, 0x00, 0x52, 0x09, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x53, 0x61, 0x76, 0x65,
	0x12, 0x3b, 0x0a, 0x0a, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x4c, 0x6f, 0x61, 0x64,
	0x48, 0x00, 0x52, 0x09, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x2b, 0x0a,
	0x04, 0x71, 0x75, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x63,
	0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75,
	0x69, 0x74, 0x48, 0x00, 0x52, 0x04, 0x71, 0x75, 0x69, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x63, 0x32, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0a, 0x6f, 0x62, 0x73,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x09, 0x6f, 0x62, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x04, 0x73,
	0x74, 0x65, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x63, 0x32, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x65, 0x70,
	0x48, 0x00, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3e, 0x0a, 0x0b, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x63, 0x32,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x61, 0x76,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x61, 0x76, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x3e, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x63, 0x32,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x61, 0x70, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x63, 0x32,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x47, 0x0a, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x73, 0x48, 0x00, 0x52,
	0x0d, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x73, 0x12, 0x35,
	0x0a, 0x08, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x61, 0x76, 0x65, 0x4d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x07, 0x73, 0x61,
	0x76, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x2b, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x04, 0x70, 0x69,
	0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67, 0x48, 0x00, 0x52, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x61, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xf8, 0x0a,
	0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x6a,
	0x6f, 0x69, 0x6e, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x6a, 0x6f,
	0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73,
	0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x48,
	0x00, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x3c,
	0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x48,
	0x00, 0x52, 0x09, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0a,
	0x71, 0x75, 0x69, 0x63, 0x6b, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x48, 0x00, 0x52,
	0x09, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x71, 0x75,
	0x69, 0x63, 0x6b, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x09, 0x71,
	0x75, 0x69, 0x63, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x71, 0x75, 0x69, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x51, 0x75, 0x69, 0x74, 0x48, 0x00,
	0x52, 0x04, 0x71, 0x75, 0x69, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x63, 0x32, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x47, 0x61, 0x6d,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0a, 0x6f, 0x62, 0x73, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73,
	0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x09, 0x6f, 0x62, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x04, 0x73,
	0x74, 0x65, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x63, 0x32, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x48, 0x00, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48,
	0x00, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3f, 0x0a, 0x0b, 0x73, 0x61, 0x76, 0x65,
	0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x73,
	0x61, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x3f, 0x0a, 0x0b, 0x72, 0x65, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0a,
	0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x48, 0x0a, 0x0e, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x73, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d,
	0x61, 0x70, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x4d, 0x61, 0x70, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x61, 0x76, 0x65, 0x4d, 0x61,
	0x70, 0x48, 0x00, 0x52, 0x07, 0x73, 0x61, 0x76, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x3f, 0x0a, 0x0b,
	0x6d, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48,
	0x00, 0x52, 0x0a, 0x6d, 0x61, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x2c, 0x0a,
	0x04, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x63,
	0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x63, 0x32,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x48, 0x00, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x61, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x62, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x63, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0a, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x95, 0x02, 0x0a, 0x11, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x31,
	0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x4d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x61,
	0x70, 0x12, 0x2e, 0x0a, 0x12, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x6e, 0x65, 0x74, 0x5f, 0x6d,
	0x61, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x10, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x6e, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x38, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x75,
	0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x0b,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x75, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x67, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x65, 0x65, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x4d, 0x61, 0x70,
	0x22, 0x40, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x61, 0x70, 0x12, 0x19, 0x0a, 0x08,
	0x6d, 0x61, 0x70, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x61, 0x70, 0x50, 0x61, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x44, 0x61,
	0x74, 0x61, 0x22, 0xab, 0x02, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xb5, 0x01, 0x0a, 0x05, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70,
	0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x61, 0x70,
	0x50, 0x61, 0x74, 0x68, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x4d, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x10, 0x04, 0x12, 0x14,
	0x0a, 0x10, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x75, 0x70, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x75, 0x70, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x10, 0x08,
	0x22, 0xf5, 0x02, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4a, 0x6f, 0x69, 0x6e,
	0x47, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x72, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61,
	0x63, 0x65, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x10, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x63,
	0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x34, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x74, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73,
	0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x74, 0x52,
	0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x42, 0x0f, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x43, 0x0a, 0x07, 0x50, 0x6f, 0x72, 0x74,
	0x53, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x9b, 0x03,
	0x0a, 0x10, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x36, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x8c, 0x02, 0x0a,
	0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01,
	0x12, 0x1b, 0x0a, 0x17, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x10, 0x02, 0x12, 0x12, 0x0a,
	0x0e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10,
	0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x10,
	0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x55, 0x6e, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x6f,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x10, 0x08, 0x12, 0x13,
	0x0a, 0x0f, 0x4d, 0x61, 0x70, 0x44, 0x6f, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x4f, 0x70, 0x65,
	0x6e, 0x4d, 0x61, 0x70, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x75, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x0b, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x0c, 0x12, 0x0e, 0x0a, 0x0a, 0x4f,
	0x74, 0x68, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x0d, 0x22, 0x14, 0x0a, 0x12, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x47, 0x61, 0x6d,
	0x65, 0x22, 0xb7, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x65,
	0x64, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x6e, 0x65, 0x65, 0x64, 0x48, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x22, 0x18, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x22, 0xc5, 0x02, 0x0a, 0x12,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x79, 0x12, 0x21, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x34, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x70,
	0x6c, 0x61, 0x79, 0x22, 0x96, 0x02, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x39, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x73, 0x63, 0x32,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x05,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x61, 0x74, 0x68, 0x10, 0x02, 0x12,
	0x15, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x4d, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x4c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x07, 0x22, 0x34, 0x0a, 0x11,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43,
	0x6d, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d,
	0x61, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x70, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x1b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x6f, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x10, 0x01, 0x22, 0x12, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4c, 0x65, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x22, 0x12,
	0x0a, 0x10, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x53, 0x61,
	0x76, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x51, 0x75,
	0x69, 0x63, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x22, 0x12, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x22, 0x13, 0x0a, 0x11, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x4c, 0x6f, 0x61, 0x64,
	0x22, 0x0d, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x69, 0x74, 0x22,
	0x0e, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x51, 0x75, 0x69, 0x74, 0x22,
	0x11, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x8e, 0x02, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x47,
	0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x24, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x61,
	0x70, 0x50, 0x61, 0x74, 0x68, 0x12, 0x35, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x63, 0x32,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x52, 0x61, 0x77, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x61, 0x77, 0x12, 0x34, 0x0a,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x52, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67,
	0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x6f, 0x70, 0x22, 0x9f, 0x02, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2a, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x0d, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73,
	0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3b, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2a, 0x0a,
	0x04, 0x63, 0x68, 0x61, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x63,
	0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x52, 0x04, 0x63, 0x68, 0x61, 0x74, 0x22, 0x45, 0x0a, 0x0c, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x3b, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2a, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x40, 0x0a,
	0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2e, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x4b, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x63, 0x32, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x18, 0x0a, 0x16,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x23, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x65, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x37, 0x0a, 0x0c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x6f, 0x6f, 0x70, 0x22, 0xa3, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x75, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0xfe, 0x01, 0x0a, 0x0c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x09, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x31,
	0x0a, 0x08, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x12, 0x28, 0x0a, 0x05, 0x62, 0x75, 0x66, 0x66, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x66, 0x66,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x62, 0x75, 0x66, 0x66, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73,
	0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x22, 0x13, 0x0a, 0x11, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79,
	0x22, 0x28, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x61, 0x76, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x88, 0x01, 0x0a, 0x11, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x21, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x42, 0x08, 0x0a, 0x06, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x79, 0x22, 0xc3, 0x01, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x35, 0x0a, 0x0b, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x3b, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x6d, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x6d, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x70, 0x6d, 0x22, 0xc7, 0x04, 0x0a, 0x12,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x61, 0x70, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x2e, 0x0a, 0x13, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x67, 0x61,
	0x6d, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x6f, 0x70, 0x73, 0x12,
	0x32, 0x0a, 0x15, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13,
	0x67, 0x61, 0x6d, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61,
	0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64,
	0x61, 0x74, 0x61, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x61,
	0x73, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x6d, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x11, 0x0a, 0x0d, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79,
	0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x79, 0x50, 0x61, 0x74, 0x68, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x61, 0x74, 0x61, 0x10, 0x03,
	0x12, 0x10, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x73, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x10, 0x05, 0x22, 0x16, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x73, 0x22, 0x6f, 0x0a,
	0x15, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x4d, 0x61, 0x70, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x6d, 0x61, 0x70, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x61, 0x70, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x2e,
	0x0a, 0x13, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x6e, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x62, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x6e, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x46,
	0x0a, 0x0e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x61, 0x76, 0x65, 0x4d, 0x61, 0x70,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x50, 0x61, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x61, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d,
	0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x22, 0x65, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x53, 0x61, 0x76, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x61, 0x76, 0x65,
	0x4d, 0x61, 0x70, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x1b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x10, 0x01, 0x22, 0x0d, 0x0a,
	0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x22, 0x92, 0x01, 0x0a,
	0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a,
	0x0c, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x22, 0x3c, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x12, 0x2c, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22,
	0x0f, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x22, 0xe0, 0x01, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x75, 0x70,
	0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x72, 0x61,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x63, 0x65, 0x52, 0x04, 0x72, 0x61, 0x63, 0x65, 0x12, 0x34,
	0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63,
	0x75, 0x6c, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x61, 0x69, 0x5f, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x49, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x07, 0x61, 0x69, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x22, 0x86, 0x02, 0x0a, 0x12, 0x53, 0x70, 0x61, 0x74, 0x69, 0x61, 0x6c, 0x43,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x65, 0x74, 0x75, 0x70, 0x12, 0x31, 0x0a, 0x0a, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x32, 0x44,
	0x49, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a,
	0x12, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x63, 0x32, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x32, 0x44, 0x49, 0x52, 0x11, 0x6d, 0x69,
	0x6e, 0x69, 0x6d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x31, 0x0a, 0x15, 0x63, 0x72, 0x6f, 0x70, 0x5f, 0x74, 0x6f,
	0x5f, 0x70, 0x6c, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x72, 0x6f, 0x70, 0x54, 0x6f, 0x50, 0x6c, 0x61, 0x79,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x65, 0x61, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x63, 0x68, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x68,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22, 0xa5, 0x03, 0x0a,
	0x10, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03,
	0x72, 0x61, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x70, 0x61, 0x74,
	0x69, 0x61, 0x6c, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x0c,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x06,
	0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73,
	0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x70, 0x61, 0x74, 0x69, 0x61, 0x6c, 0x43,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x06, 0x72, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x63, 0x6c, 0x6f, 0x61, 0x6b,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x43, 0x6c,
	0x6f, 0x61, 0x6b, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x62, 0x75,
	0x72, 0x72, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x68, 0x6f, 0x77, 0x42, 0x75, 0x72, 0x72, 0x6f, 0x77,
	0x65, 0x64, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x68, 0x6f,
	0x77, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x77, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x61, 0x77, 0x5f, 0x61, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x72, 0x61, 0x77, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x19, 0x72, 0x61,
	0x77, 0x5f, 0x63, 0x72, 0x6f, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x72,
	0x61, 0x77, 0x43, 0x72, 0x6f, 0x70, 0x54, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65,
	0x41, 0x72, 0x65, 0x61, 0x22, 0xc0, 0x02, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x0e, 0x72, 0x61,
	0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61,
	0x63, 0x65, 0x52, 0x0d, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x12, 0x2f, 0x0a, 0x0b, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x61, 0x63, 0x65, 0x52, 0x0a, 0x72, 0x61, 0x63, 0x65, 0x41, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x12, 0x34, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x52, 0x0a, 0x64, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x08, 0x61, 0x69, 0x5f, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x73, 0x63, 0x32,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x49, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x07, 0x61,
	0x69, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xed, 0x02, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x73, 0x70, 0x65, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x73, 0x70, 0x65, 0x6e, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x66,
	0x6f, 0x6f, 0x64, 0x5f, 0x63, 0x61, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66,
	0x6f, 0x6f, 0x64, 0x43, 0x61, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x75,
	0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x6f, 0x6f, 0x64, 0x55,
	0x73, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x61, 0x72, 0x6d, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x6f, 0x6f, 0x64, 0x41, 0x72, 0x6d, 0x79,
	0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x6f, 0x6f, 0x64, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x69, 0x64, 0x6c, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x72, 0x6d, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x72, 0x6d, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26,
	0x0a, 0x0f, 0x77, 0x61, 0x72, 0x70, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x70, 0x47, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x72, 0x76, 0x61, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x61, 0x72,
	0x76, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe7, 0x03, 0x0a, 0x0b, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x6c, 0x6f, 0x6f, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65,
	0x4c, 0x6f, 0x6f, 0x70, 0x12, 0x3b, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x63,
	0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x12, 0x27, 0x0a, 0x06, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x52, 0x06, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x09, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x72,
	0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x77, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x4f, 0x0a, 0x12, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73,
	0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52,
	0x10, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x3c, 0x0a, 0x0b, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x52, 0x0a, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x30, 0x0a, 0x07, 0x75, 0x69, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x49, 0x52, 0x06, 0x75, 0x69, 0x44, 0x61, 0x74,
	0x61, 0x22, 0xca, 0x02, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x61, 0x77, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x77,
	0x12, 0x49, 0x0a, 0x14, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x70, 0x61, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x12, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0d, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x0c, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x09, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73,
	0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x49,
	0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x69, 0x12, 0x35, 0x0a, 0x0b, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x6f, 0x70, 0x22, 0x82,
	0x01, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x12, 0x36, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x22, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x65, 0x61,
	0x6d, 0x10, 0x02, 0x22, 0x77, 0x0a, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x74, 0x54, 0x61, 0x67, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73,
	0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xfa, 0x02, 0x0a,
	0x0e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x5a, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x63,
	0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x65, 0x72, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x48, 0x00, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x50, 0x65, 0x72, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x63,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x4d, 0x6f, 0x76, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x6f,
	0x76, 0x65, 0x12, 0x5e, 0x0a, 0x14, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x00, 0x52, 0x12,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x12, 0x5b, 0x0a, 0x13, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x46,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x48, 0x00, 0x52, 0x11, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x42,
	0x08, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3e, 0x0a, 0x1f, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x50, 0x65, 0x72, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0x66, 0x0a, 0x18, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x4d, 0x6f, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x70,
	0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x32, 0x44, 0x52, 0x08, 0x77, 0x6f, 0x72,
	0x6c, 0x64, 0x50, 0x6f, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x22, 0x3f, 0x0a, 0x20, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x3e, 0x0a, 0x1f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x54, 0x61,
	0x67, 0x73, 0x22, 0x55, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2a, 0x63, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x0c, 0x0a, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x64, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x69, 0x6e, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x10, 0x03, 0x12, 0x0d, 0x0a,
	0x09, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x71, 0x75, 0x69, 0x74, 0x10,
	0x06, 0x12, 0x0b, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x63, 0x2a, 0x96,
	0x01, 0x0a, 0x0a, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x0c, 0x0a,
	0x08, 0x56, 0x65, 0x72, 0x79, 0x45, 0x61, 0x73, 0x79, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x45,
	0x61, 0x73, 0x79, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x10,
	0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x48, 0x61, 0x72, 0x64, 0x10,
	0x04, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x61, 0x72, 0x64, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x48,
	0x61, 0x72, 0x64, 0x65, 0x72, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x65, 0x72, 0x79, 0x48,
	0x61, 0x72, 0x64, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x68, 0x65, 0x61, 0x74, 0x56, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x68, 0x65, 0x61, 0x74, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x68, 0x65, 0x61, 0x74, 0x49,
	0x6e, 0x73, 0x61, 0x6e, 0x65, 0x10, 0x0a, 0x2a, 0x39, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x72, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x10, 0x03, 0x2a, 0x4f, 0x0a, 0x07, 0x41, 0x49, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x0f, 0x0a,
	0x0b, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x10, 0x01, 0x12, 0x08,
	0x0a, 0x04, 0x52, 0x75, 0x73, 0x68, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x10, 0x04, 0x12,
	0x09, 0x0a, 0x05, 0x4d, 0x61, 0x63, 0x72, 0x6f, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x69,
	0x72, 0x10, 0x06, 0x2a, 0xdb, 0x03, 0x0a, 0x05, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x0e, 0x0a,
	0x0a, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x03, 0x12, 0x11, 0x0a,
	0x0d, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x04,
	0x12, 0x14, 0x0a, 0x10, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x10, 0x06, 0x12,
	0x10, 0x0a, 0x0c, 0x4c, 0x61, 0x72, 0x76, 0x61, 0x48, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x10,
	0x07, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x73,
	0x45, 0x78, 0x68, 0x61, 0x75, 0x73, 0x74, 0x65, 0x64, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x4d,
	0x6f, 0x72, 0x70, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x0a, 0x12, 0x16,
	0x0a, 0x12, 0x4d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x55, 0x4c, 0x45, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0x0c, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x75, 0x63, 0x6c, 0x65,
	0x61, 0x72, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x75, 0x6b, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x10, 0x0d, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x79, 0x64, 0x75, 0x73, 0x57, 0x6f, 0x72,
	0x6d, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x52,
	0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x10,
	0x0e, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10,
	0x0f, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x10, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x69,
	0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x10,
	0x11, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x12, 0x12, 0x13, 0x0a,
	0x0f, 0x55, 0x6e, 0x69, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x10, 0x13, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x14, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x65, 0x73, 0x70, 0x65,
	0x6e, 0x65, 0x45, 0x78, 0x68, 0x61, 0x75, 0x73, 0x74, 0x65, 0x64, 0x10, 0x15, 0x12, 0x12, 0x0a,
	0x0e, 0x57, 0x61, 0x72, 0x70, 0x49, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x10,
	0x16, 0x2a, 0x39, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x56,
	0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x65, 0x66, 0x65,
	0x61, 0x74, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x69, 0x65, 0x10, 0x03, 0x12, 0x0d, 0x0a,
	0x09, 0x55, 0x6e, 0x64, 0x65, 0x63, 0x69, 0x64, 0x65, 0x64, 0x10, 0x04, 0x42, 0x2c, 0x5a, 0x2a,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x69, 0x6e, 0x77, 0x75,
	0x7a, 0x68, 0x61, 0x6f, 0x2f, 0x73, 0x63, 0x32, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x67,
	0x6f, 0x2f, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_sc2api_proto_rawDescOnce sync.Once
	file_sc2api_proto_rawDescData = file_sc2api_proto_rawDesc
)

func file_sc2api_proto_rawDescGZIP() []byte {
	file_sc2api_proto_rawDescOnce.Do(func() {
		file_sc2api_proto_rawDescData = protoimpl.X.CompressGZIP(file_sc2api_proto_rawDescData)
	})
	return file_sc2api_proto_rawDescData
}

var file_sc2api_proto_enumTypes = make([]protoimpl.EnumInfo, 14)
var file_sc2api_proto_msgTypes = make([]protoimpl.MessageInfo, 63)
var file_sc2api_proto_goTypes = []interface{}{
	(Status)(0),                              // 0: sc2proto.Status
	(Difficulty)(0),                          // 1: sc2proto.Difficulty
	(PlayerType)(0),                          // 2: sc2proto.PlayerType
	(AIBuild)(0),                             // 3: sc2proto.AIBuild
	(Alert)(0),                               // 4: sc2proto.Alert
	(Result)(0),                              // 5: sc2proto.Result
	(ResponseCreateGame_Error)(0),            // 6: sc2proto.ResponseCreateGame.Error
	(ResponseJoinGame_Error)(0),              // 7: sc2proto.ResponseJoinGame.Error
	(ResponseRestartGame_Error)(0),           // 8: sc2proto.ResponseRestartGame.Error
	(ResponseStartReplay_Error)(0),           // 9: sc2proto.ResponseStartReplay.Error
	(ResponseMapCommand_Error)(0),            // 10: sc2proto.ResponseMapCommand.Error
	(ResponseReplayInfo_Error)(0),            // 11: sc2proto.ResponseReplayInfo.Error
	(ResponseSaveMap_Error)(0),               // 12: sc2proto.ResponseSaveMap.Error
	(ActionChat_Channel)(0),                  // 13: sc2proto.ActionChat.Channel
	(*Request)(nil),                          // 14: sc2proto.Request
	(*Response)(nil),                         // 15: sc2proto.Response
	(*RequestCreateGame)(nil),                // 16: sc2proto.RequestCreateGame
	(*LocalMap)(nil),                         // 17: sc2proto.LocalMap
	(*ResponseCreateGame)(nil),               // 18: sc2proto.ResponseCreateGame
	(*RequestJoinGame)(nil),                  // 19: sc2proto.RequestJoinGame
	(*PortSet)(nil),                          // 20: sc2proto.PortSet
	(*ResponseJoinGame)(nil),                 // 21: sc2proto.ResponseJoinGame
	(*RequestRestartGame)(nil),               // 22: sc2proto.RequestRestartGame
	(*ResponseRestartGame)(nil),              // 23: sc2proto.ResponseRestartGame
	(*RequestStartReplay)(nil),               // 24: sc2proto.RequestStartReplay
	(*ResponseStartReplay)(nil),              // 25: sc2proto.ResponseStartReplay
	(*RequestMapCommand)(nil),                // 26: sc2proto.RequestMapCommand
	(*ResponseMapCommand)(nil),               // 27: sc2proto.ResponseMapCommand
	(*RequestLeaveGame)(nil),                 // 28: sc2proto.RequestLeaveGame
	(*ResponseLeaveGame)(nil),                // 29: sc2proto.ResponseLeaveGame
	(*RequestQuickSave)(nil),                 // 30: sc2proto.RequestQuickSave
	(*ResponseQuickSave)(nil),                // 31: sc2proto.ResponseQuickSave
	(*RequestQuickLoad)(nil),                 // 32: sc2proto.RequestQuickLoad
	(*ResponseQuickLoad)(nil),                // 33: sc2proto.ResponseQuickLoad
	(*RequestQuit)(nil),                      // 34: sc2proto.RequestQuit
	(*ResponseQuit)(nil),                     // 35: sc2proto.ResponseQuit
	(*RequestGameInfo)(nil),                  // 36: sc2proto.RequestGameInfo
	(*ResponseGameInfo)(nil),                 // 37: sc2proto.ResponseGameInfo
	(*RequestObservation)(nil),               // 38: sc2proto.RequestObservation
	(*ResponseObservation)(nil),              // 39: sc2proto.ResponseObservation
	(*ChatReceived)(nil),                     // 40: sc2proto.ChatReceived
	(*RequestAction)(nil),                    // 41: sc2proto.RequestAction
	(*ResponseAction)(nil),                   // 42: sc2proto.ResponseAction
	(*RequestObserverAction)(nil),            // 43: sc2proto.RequestObserverAction
	(*ResponseObserverAction)(nil),           // 44: sc2proto.ResponseObserverAction
	(*RequestStep)(nil),                      // 45: sc2proto.RequestStep
	(*ResponseStep)(nil),                     // 46: sc2proto.ResponseStep
	(*RequestData)(nil),                      // 47: sc2proto.RequestData
	(*ResponseData)(nil),                     // 48: sc2proto.ResponseData
	(*RequestSaveReplay)(nil),                // 49: sc2proto.RequestSaveReplay
	(*ResponseSaveReplay)(nil),               // 50: sc2proto.ResponseSaveReplay
	(*RequestReplayInfo)(nil),                // 51: sc2proto.RequestReplayInfo
	(*PlayerInfoExtra)(nil),                  // 52: sc2proto.PlayerInfoExtra
	(*ResponseReplayInfo)(nil),               // 53: sc2proto.ResponseReplayInfo
	(*RequestAvailableMaps)(nil),             // 54: sc2proto.RequestAvailableMaps
	(*ResponseAvailableMaps)(nil),            // 55: sc2proto.ResponseAvailableMaps
	(*RequestSaveMap)(nil),                   // 56: sc2proto.RequestSaveMap
	(*ResponseSaveMap)(nil),                  // 57: sc2proto.ResponseSaveMap
	(*RequestPing)(nil),                      // 58: sc2proto.RequestPing
	(*ResponsePing)(nil),                     // 59: sc2proto.ResponsePing
	(*RequestDebug)(nil),                     // 60: sc2proto.RequestDebug
	(*ResponseDebug)(nil),                    // 61: sc2proto.ResponseDebug
	(*PlayerSetup)(nil),                      // 62: sc2proto.PlayerSetup
	(*SpatialCameraSetup)(nil),               // 63: sc2proto.SpatialCameraSetup
	(*InterfaceOptions)(nil),                 // 64: sc2proto.InterfaceOptions
	(*PlayerInfo)(nil),                       // 65: sc2proto.PlayerInfo
	(*PlayerCommon)(nil),                     // 66: sc2proto.PlayerCommon
	(*Observation)(nil),                      // 67: sc2proto.Observation
	(*Action)(nil),                           // 68: sc2proto.Action
	(*ActionChat)(nil),                       // 69: sc2proto.ActionChat
	(*ActionError)(nil),                      // 70: sc2proto.ActionError
	(*ObserverAction)(nil),                   // 71: sc2proto.ObserverAction
	(*ActionObserverPlayerPerspective)(nil),  // 72: sc2proto.ActionObserverPlayerPerspective
	(*ActionObserverCameraMove)(nil),         // 73: sc2proto.ActionObserverCameraMove
	(*ActionObserverCameraFollowPlayer)(nil), // 74: sc2proto.ActionObserverCameraFollowPlayer
	(*ActionObserverCameraFollowUnits)(nil),  // 75: sc2proto.ActionObserverCameraFollowUnits
	(*PlayerResult)(nil),                     // 76: sc2proto.PlayerResult
	(*RequestQuery)(nil),                     // 77: sc2proto.RequestQuery
	(*ResponseQuery)(nil),                    // 78: sc2proto.ResponseQuery
	(Race)(0),                                // 79: sc2proto.Race
	(*StartRaw)(nil),                         // 80: sc2proto.StartRaw
	(ActionResult)(0),                        // 81: sc2proto.ActionResult
	(*AbilityData)(nil),                      // 82: sc2proto.AbilityData
	(*UnitTypeData)(nil),                     // 83: sc2proto.UnitTypeData
	(*UpgradeData)(nil),                      // 84: sc2proto.UpgradeData
	(*BuffData)(nil),                         // 85: sc2proto.BuffData
	(*EffectData)(nil),                       // 86: sc2proto.EffectData
	(*DebugCommand)(nil),                     // 87: sc2proto.DebugCommand
	(*Size2DI)(nil),                          // 88: sc2proto.Size2DI
	(*AvailableAbility)(nil),                 // 89: sc2proto.AvailableAbility
	(*Score)(nil),                            // 90: sc2proto.Score
	(*ObservationRaw)(nil),                   // 91: sc2proto.ObservationRaw
	(*ObservationFeatureLayer)(nil),          // 92: sc2proto.ObservationFeatureLayer
	(*ObservationRender)(nil),                // 93: sc2proto.ObservationRender
	(*ObservationUI)(nil),                    // 94: sc2proto.ObservationUI
	(*ActionRaw)(nil),                        // 95: sc2proto.ActionRaw
	(*ActionSpatial)(nil),                    // 96: sc2proto.ActionSpatial
	(*ActionUI)(nil),                         // 97: sc2proto.ActionUI
	(*Point2D)(nil),                          // 98: sc2proto.Point2D
}
var file_sc2api_proto_depIdxs = []int32{
	16,  // 0: sc2proto.Request.create_game:type_name -> sc2proto.RequestCreateGame
	19,  // 1: sc2proto.Request.join_game:type_name -> sc2proto.RequestJoinGame
	22,  // 2: sc2proto.Request.restart_game:type_name -> sc2proto.RequestRestartGame
	24,  // 3: sc2proto.Request.start_replay:type_name -> sc2proto.RequestStartReplay
	28,  // 4: sc2proto.Request.leave_game:type_name -> sc2proto.RequestLeaveGame
	30,  // 5: sc2proto.Request.quick_save:type_name -> sc2proto.RequestQuickSave
	32,  // 6: sc2proto.Request.quick_load:type_name -> sc2proto.RequestQuickLoad
	34,  // 7: sc2proto.Request.quit:type_name -> sc2proto.RequestQuit
	36,  // 8: sc2proto.Request.game_info:type_name -> sc2proto.RequestGameInfo
	38,  // 9: sc2proto.Request.observation:type_name -> sc2proto.RequestObservation
	41,  // 10: sc2proto.Request.action:type_name -> sc2proto.RequestAction
	43,  // 11: sc2proto.Request.obs_action:type_name -> sc2proto.RequestObserverAction
	45,  // 12: sc2proto.Request.step:type_name -> sc2proto.RequestStep
	47,  // 13: sc2proto.Request.data:type_name -> sc2proto.RequestData
	77,  // 14: sc2proto.Request.query:type_name -> sc2proto.RequestQuery
	49,  // 15: sc2proto.Request.save_replay:type_name -> sc2proto.RequestSaveReplay
	26,  // 16: sc2proto.Request.map_command:type_name -> sc2proto.RequestMapCommand
	51,  // 17: sc2proto.Request.replay_info:type_name -> sc2proto.RequestReplayInfo
	54,  // 18: sc2proto.Request.available_maps:type_name -> sc2proto.RequestAvailableMaps
	56,  // 19: sc2proto.Request.save_map:type_name -> sc2proto.RequestSaveMap
	58,  // 20: sc2proto.Request.ping:type_name -> sc2proto.RequestPing
	60,  // 21: sc2proto.Request.debug:type_name -> sc2proto.RequestDebug
	18,  // 22: sc2proto.Response.create_game:type_name -> sc2proto.ResponseCreateGame
	21,  // 23: sc2proto.Response.join_game:type_name -> sc2proto.ResponseJoinGame
	23,  // 24: sc2proto.Response.restart_game:type_name -> sc2proto.ResponseRestartGame
	25,  // 25: sc2proto.Response.start_replay:type_name -> sc2proto.ResponseStartReplay
	29,  // 26: sc2proto.Response.leave_game:type_name -> sc2proto.ResponseLeaveGame
	31,  // 27: sc2proto.Response.quick_save:type_name -> sc2proto.ResponseQuickSave
	33,  // 28: sc2proto.Response.quick_load:type_name -> sc2proto.ResponseQuickLoad
	35,  // 29: sc2proto.Response.quit:type_name -> sc2proto.ResponseQuit
	37,  // 30: sc2proto.Response.game_info:type_name -> sc2proto.ResponseGameInfo
	39,  // 31: sc2proto.Response.observation:type_name -> sc2proto.ResponseObservation
	42,  // 32: sc2proto.Response.action:type_name -> sc2proto.ResponseAction
	44,  // 33: sc2proto.Response.obs_action:type_name -> sc2proto.ResponseObserverAction
	46,  // 34: sc2proto.Response.step:type_name -> sc2proto.ResponseStep
	48,  // 35: sc2proto.Response.data:type_name -> sc2proto.ResponseData
	78,  // 36: sc2proto.Response.query:type_name -> sc2proto.ResponseQuery
	50,  // 37: sc2proto.Response.save_replay:type_name -> sc2proto.ResponseSaveReplay
	53,  // 38: sc2proto.Response.replay_info:type_name -> sc2proto.ResponseReplayInfo
	55,  // 39: sc2proto.Response.available_maps:type_name -> sc2proto.ResponseAvailableMaps
	57,  // 40: sc2proto.Response.save_map:type_name -> sc2proto.ResponseSaveMap
	27,  // 41: sc2proto.Response.map_command:type_name -> sc2proto.ResponseMapCommand
	59,  // 42: sc2proto.Response.ping:type_name -> sc2proto.ResponsePing
	61,  // 43: sc2proto.Response.debug:type_name -> sc2proto.ResponseDebug
	0,   // 44: sc2proto.Response.status:type_name -> sc2proto.Status
	17,  // 45: sc2proto.RequestCreateGame.local_map:type_name -> sc2proto.LocalMap
	62,  // 46: sc2proto.RequestCreateGame.player_setup:type_name -> sc2proto.PlayerSetup
	6,   // 47: sc2proto.ResponseCreateGame.error:type_name -> sc2proto.ResponseCreateGame.Error
	79,  // 48: sc2proto.RequestJoinGame.race:type_name -> sc2proto.Race
	64,  // 49: sc2proto.RequestJoinGame.options:type_name -> sc2proto.InterfaceOptions
	20,  // 50: sc2proto.RequestJoinGame.server_ports:type_name -> sc2proto.PortSet
	20,  // 51: sc2proto.RequestJoinGame.client_ports:type_name -> sc2proto.PortSet
	7,   // 52: sc2proto.ResponseJoinGame.error:type_name -> sc2proto.ResponseJoinGame.Error
	8,   // 53: sc2proto.ResponseRestartGame.error:type_name -> sc2proto.ResponseRestartGame.Error
	64,  // 54: sc2proto.RequestStartReplay.options:type_name -> sc2proto.InterfaceOptions
	9,   // 55: sc2proto.ResponseStartReplay.error:type_name -> sc2proto.ResponseStartReplay.Error
	10,  // 56: sc2proto.ResponseMapCommand.error:type_name -> sc2proto.ResponseMapCommand.Error
	65,  // 57: sc2proto.ResponseGameInfo.player_info:type_name -> sc2proto.PlayerInfo
	80,  // 58: sc2proto.ResponseGameInfo.start_raw:type_name -> sc2proto.StartRaw
	64,  // 59: sc2proto.ResponseGameInfo.options:type_name -> sc2proto.InterfaceOptions
	68,  // 60: sc2proto.ResponseObservation.actions:type_name -> sc2proto.Action
	70,  // 61: sc2proto.ResponseObservation.action_errors:type_name -> sc2proto.ActionError
	67,  // 62: sc2proto.ResponseObservation.observation:type_name -> sc2proto.Observation
	76,  // 63: sc2proto.ResponseObservation.player_result:type_name -> sc2proto.PlayerResult
	40,  // 64: sc2proto.ResponseObservation.chat:type_name -> sc2proto.ChatReceived
	68,  // 65: sc2proto.RequestAction.actions:type_name -> sc2proto.Action
	81,  // 66: sc2proto.ResponseAction.result:type_name -> sc2proto.ActionResult
	71,  // 67: sc2proto.RequestObserverAction.actions:type_name -> sc2proto.ObserverAction
	82,  // 68: sc2proto.ResponseData.abilities:type_name -> sc2proto.AbilityData
	83,  // 69: sc2proto.ResponseData.units:type_name -> sc2proto.UnitTypeData
	84,  // 70: sc2proto.ResponseData.upgrades:type_name -> sc2proto.UpgradeData
	85,  // 71: sc2proto.ResponseData.buffs:type_name -> sc2proto.BuffData
	86,  // 72: sc2proto.ResponseData.effects:type_name -> sc2proto.EffectData
	65,  // 73: sc2proto.PlayerInfoExtra.player_info:type_name -> sc2proto.PlayerInfo
	76,  // 74: sc2proto.PlayerInfoExtra.player_result:type_name -> sc2proto.PlayerResult
	52,  // 75: sc2proto.ResponseReplayInfo.player_info:type_name -> sc2proto.PlayerInfoExtra
	11,  // 76: sc2proto.ResponseReplayInfo.error:type_name -> sc2proto.ResponseReplayInfo.Error
	12,  // 77: sc2proto.ResponseSaveMap.error:type_name -> sc2proto.ResponseSaveMap.Error
	87,  // 78: sc2proto.RequestDebug.debug:type_name -> sc2proto.DebugCommand
	2,   // 79: sc2proto.PlayerSetup.type:type_name -> sc2proto.PlayerType
	79,  // 80: sc2proto.PlayerSetup.race:type_name -> sc2proto.Race
	1,   // 81: sc2proto.PlayerSetup.difficulty:type_name -> sc2proto.Difficulty
	3,   // 82: sc2proto.PlayerSetup.ai_build:type_name -> sc2proto.AIBuild
	88,  // 83: sc2proto.SpatialCameraSetup.resolution:type_name -> sc2proto.Size2DI
	88,  // 84: sc2proto.SpatialCameraSetup.minimap_resolution:type_name -> sc2proto.Size2DI
	63,  // 85: sc2proto.InterfaceOptions.feature_layer:type_name -> sc2proto.SpatialCameraSetup
	63,  // 86: sc2proto.InterfaceOptions.render:type_name -> sc2proto.SpatialCameraSetup
	2,   // 87: sc2proto.PlayerInfo.type:type_name -> sc2proto.PlayerType
	79,  // 88: sc2proto.PlayerInfo.race_requested:type_name -> sc2proto.Race
	79,  // 89: sc2proto.PlayerInfo.race_actual:type_name -> sc2proto.Race
	1,   // 90: sc2proto.PlayerInfo.difficulty:type_name -> sc2proto.Difficulty
	3,   // 91: sc2proto.PlayerInfo.ai_build:type_name -> sc2proto.AIBuild
	66,  // 92: sc2proto.Observation.player_common:type_name -> sc2proto.PlayerCommon
	4,   // 93: sc2proto.Observation.alerts:type_name -> sc2proto.Alert
	89,  // 94: sc2proto.Observation.abilities:type_name -> sc2proto.AvailableAbility
	90,  // 95: sc2proto.Observation.score:type_name -> sc2proto.Score
	91,  // 96: sc2proto.Observation.raw_data:type_name -> sc2proto.ObservationRaw
	92,  // 97: sc2proto.Observation.feature_layer_data:type_name -> sc2proto.ObservationFeatureLayer
	93,  // 98: sc2proto.Observation.render_data:type_name -> sc2proto.ObservationRender
	94,  // 99: sc2proto.Observation.ui_data:type_name -> sc2proto.ObservationUI
	95,  // 100: sc2proto.Action.action_raw:type_name -> sc2proto.ActionRaw
	96,  // 101: sc2proto.Action.action_feature_layer:type_name -> sc2proto.ActionSpatial
	96,  // 102: sc2proto.Action.action_render:type_name -> sc2proto.ActionSpatial
	97,  // 103: sc2proto.Action.action_ui:type_name -> sc2proto.ActionUI
	69,  // 104: sc2proto.Action.action_chat:type_name -> sc2proto.ActionChat
	13,  // 105: sc2proto.ActionChat.channel:type_name -> sc2proto.ActionChat.Channel
	81,  // 106: sc2proto.ActionError.result:type_name -> sc2proto.ActionResult
	72,  // 107: sc2proto.ObserverAction.player_perspective:type_name -> sc2proto.ActionObserverPlayerPerspective
	73,  // 108: sc2proto.ObserverAction.camera_move:type_name -> sc2proto.ActionObserverCameraMove
	74,  // 109: sc2proto.ObserverAction.camera_follow_player:type_name -> sc2proto.ActionObserverCameraFollowPlayer
	75,  // 110: sc2proto.ObserverAction.camera_follow_units:type_name -> sc2proto.ActionObserverCameraFollowUnits
	98,  // 111: sc2proto.ActionObserverCameraMove.world_pos:type_name -> sc2proto.Point2D
	5,   // 112: sc2proto.PlayerResult.result:type_name -> sc2proto.Result
	113, // [113:113] is the sub-list for method output_type
	113, // [113:113] is the sub-list for method input_type
	113, // [113:113] is the sub-list for extension type_name
	113, // [113:113] is the sub-list for extension extendee
	0,   // [0:113] is the sub-list for field type_name
}

func init() { file_sc2api_proto_init() }
func file_sc2api_proto_init() {
	if File_sc2api_proto != nil {
		return
	}
	file_common_proto_init()
	file_data_proto_init()
	file_debug_proto_init()
	file_error_proto_init()
	file_query_proto_init()
	file_raw_proto_init()
	file_score_proto_init()
	file_spatial_proto_init()
	file_ui_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_sc2api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestCreateGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseCreateGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestJoinGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseJoinGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestRestartGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseRestartGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestStartReplay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseStartReplay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestMapCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseMapCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestLeaveGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseLeaveGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestQuickSave); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseQuickSave); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestQuickLoad); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseQuickLoad); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestQuit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseQuit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestGameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseGameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestObservation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseObservation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatReceived); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestObserverAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseObserverAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestSaveReplay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseSaveReplay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestReplayInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerInfoExtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseReplayInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestAvailableMaps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseAvailableMaps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestSaveMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseSaveMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestPing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponsePing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestDebug); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseDebug); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSetup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpatialCameraSetup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerCommon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Observation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionChat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObserverAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionObserverPlayerPerspective); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionObserverCameraMove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionObserverCameraFollowPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionObserverCameraFollowUnits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sc2api_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sc2api_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Request_CreateGame)(nil),
		(*Request_JoinGame)(nil),
		(*Request_RestartGame)(nil),
		(*Request_StartReplay)(nil),
		(*Request_LeaveGame)(nil),
		(*Request_QuickSave)(nil),
		(*Request_QuickLoad)(nil),
		(*Request_Quit)(nil),
		(*Request_GameInfo)(nil),
		(*Request_Observation)(nil),
		(*Request_Action)(nil),
		(*Request_ObsAction)(nil),
		(*Request_Step)(nil),
		(*Request_Data)(nil),
		(*Request_Query)(nil),
		(*Request_SaveReplay)(nil),
		(*Request_MapCommand)(nil),
		(*Request_ReplayInfo)(nil),
		(*Request_AvailableMaps)(nil),
		(*Request_SaveMap)(nil),
		(*Request_Ping)(nil),
		(*Request_Debug)(nil),
	}
	file_sc2api_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Response_CreateGame)(nil),
		(*Response_JoinGame)(nil),
		(*Response_RestartGame)(nil),
		(*Response_StartReplay)(nil),
		(*Response_LeaveGame)(nil),
		(*Response_QuickSave)(nil),
		(*Response_QuickLoad)(nil),
		(*Response_Quit)(nil),
		(*Response_GameInfo)(nil),
		(*Response_Observation)(nil),
		(*Response_Action)(nil),
		(*Response_ObsAction)(nil),
		(*Response_Step)(nil),
		(*Response_Data)(nil),
		(*Response_Query)(nil),
		(*Response_SaveReplay)(nil),
		(*Response_ReplayInfo)(nil),
		(*Response_AvailableMaps)(nil),
		(*Response_SaveMap)(nil),
		(*Response_MapCommand)(nil),
		(*Response_Ping)(nil),
		(*Response_Debug)(nil),
	}
	file_sc2api_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*RequestCreateGame_LocalMap)(nil),
		(*RequestCreateGame_BattlenetMapName)(nil),
	}
	file_sc2api_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*RequestJoinGame_Race)(nil),
		(*RequestJoinGame_ObservedPlayerId)(nil),
	}
	file_sc2api_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*RequestStartReplay_ReplayPath)(nil),
		(*RequestStartReplay_ReplayData)(nil),
	}
	file_sc2api_proto_msgTypes[37].OneofWrappers = []interface{}{
		(*RequestReplayInfo_ReplayPath)(nil),
		(*RequestReplayInfo_ReplayData)(nil),
	}
	file_sc2api_proto_msgTypes[57].OneofWrappers = []interface{}{
		(*ObserverAction_PlayerPerspective)(nil),
		(*ObserverAction_CameraMove)(nil),
		(*ObserverAction_CameraFollowPlayer)(nil),
		(*ObserverAction_CameraFollowUnits)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sc2api_proto_rawDesc,
			NumEnums:      14,
			NumMessages:   63,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sc2api_proto_goTypes,
		DependencyIndexes: file_sc2api_proto_depIdxs,
		EnumInfos:         file_sc2api_proto_enumTypes,
		MessageInfos:      file_sc2api_proto_msgTypes,
	}.Build()
	File_sc2api_proto = out.File
	file_sc2api_proto_rawDesc = nil
	file_sc2api_proto_goTypes = nil
	file_sc2api_proto_depIdxs = nil
}
