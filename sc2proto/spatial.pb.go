// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.0
// source: spatial.proto

package sc2proto

import (
	"reflect"
	"sync"

	"google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ActionSpatialUnitSelectionPoint_Type int32

const (
	ActionSpatialUnitSelectionPoint_Select     ActionSpatialUnitSelectionPoint_Type = 1 // Equivalent to normal click. Changes selection to unit.
	ActionSpatialUnitSelectionPoint_Toggle     ActionSpatialUnitSelectionPoint_Type = 2 // Equivalent to shift+click. Toggle selection of unit.
	ActionSpatialUnitSelectionPoint_AllType    ActionSpatialUnitSelectionPoint_Type = 3 // Equivalent to control+click. Selects all units of a given type.
	ActionSpatialUnitSelectionPoint_AddAllType ActionSpatialUnitSelectionPoint_Type = 4 // Equivalent to shift+control+click. Selects all units of a given type.
)

// Enum value maps for ActionSpatialUnitSelectionPoint_Type.
var (
	ActionSpatialUnitSelectionPoint_Type_name = map[int32]string{
		1: "Select",
		2: "Toggle",
		3: "AllType",
		4: "AddAllType",
	}
	ActionSpatialUnitSelectionPoint_Type_value = map[string]int32{
		"Select":     1,
		"Toggle":     2,
		"AllType":    3,
		"AddAllType": 4,
	}
)

func (x ActionSpatialUnitSelectionPoint_Type) Enum() *ActionSpatialUnitSelectionPoint_Type {
	p := new(ActionSpatialUnitSelectionPoint_Type)
	*p = x
	return p
}

func (x ActionSpatialUnitSelectionPoint_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionSpatialUnitSelectionPoint_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_spatial_proto_enumTypes[0].Descriptor()
}

func (ActionSpatialUnitSelectionPoint_Type) Type() protoreflect.EnumType {
	return &file_spatial_proto_enumTypes[0]
}

func (x ActionSpatialUnitSelectionPoint_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ActionSpatialUnitSelectionPoint_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ActionSpatialUnitSelectionPoint_Type(num)
	return nil
}

// Deprecated: Use ActionSpatialUnitSelectionPoint_Type.Descriptor instead.
func (ActionSpatialUnitSelectionPoint_Type) EnumDescriptor() ([]byte, []int) {
	return file_spatial_proto_rawDescGZIP(), []int{7, 0}
}

type ObservationFeatureLayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Renders        *FeatureLayers        `protobuf:"bytes,1,opt,name=renders" json:"renders,omitempty"`
	MinimapRenders *FeatureLayersMinimap `protobuf:"bytes,2,opt,name=minimap_renders,json=minimapRenders" json:"minimap_renders,omitempty"`
}

func (x *ObservationFeatureLayer) Reset() {
	*x = ObservationFeatureLayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spatial_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservationFeatureLayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationFeatureLayer) ProtoMessage() {}

func (x *ObservationFeatureLayer) ProtoReflect() protoreflect.Message {
	mi := &file_spatial_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationFeatureLayer.ProtoReflect.Descriptor instead.
func (*ObservationFeatureLayer) Descriptor() ([]byte, []int) {
	return file_spatial_proto_rawDescGZIP(), []int{0}
}

func (x *ObservationFeatureLayer) GetRenders() *FeatureLayers {
	if x != nil {
		return x.Renders
	}
	return nil
}

func (x *ObservationFeatureLayer) GetMinimapRenders() *FeatureLayersMinimap {
	if x != nil {
		return x.MinimapRenders
	}
	return nil
}

type FeatureLayers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeightMap          *ImageData `protobuf:"bytes,1,opt,name=height_map,json=heightMap" json:"height_map,omitempty"`                                 // uint8. Terrain height. World space units of [-200, 200] encoded into [0, 255].
	VisibilityMap      *ImageData `protobuf:"bytes,2,opt,name=visibility_map,json=visibilityMap" json:"visibility_map,omitempty"`                     // uint8. 0=Hidden, 1=Fogged, 2=Visible, 3=FullHidden
	Creep              *ImageData `protobuf:"bytes,3,opt,name=creep" json:"creep,omitempty"`                                                          // 1-bit. Zerg creep.
	Power              *ImageData `protobuf:"bytes,4,opt,name=power" json:"power,omitempty"`                                                          // 1-bit. Protoss power.
	PlayerId           *ImageData `protobuf:"bytes,5,opt,name=player_id,json=playerId" json:"player_id,omitempty"`                                    // uint8. Participants: [1, 15] Neutral: 16
	UnitType           *ImageData `protobuf:"bytes,6,opt,name=unit_type,json=unitType" json:"unit_type,omitempty"`                                    // int32. Unique identifier for type of unit.
	Selected           *ImageData `protobuf:"bytes,7,opt,name=selected" json:"selected,omitempty"`                                                    // 1-bit. Selected units.
	UnitHitPoints      *ImageData `protobuf:"bytes,8,opt,name=unit_hit_points,json=unitHitPoints" json:"unit_hit_points,omitempty"`                   // int32.
	UnitHitPointsRatio *ImageData `protobuf:"bytes,17,opt,name=unit_hit_points_ratio,json=unitHitPointsRatio" json:"unit_hit_points_ratio,omitempty"` // uint8. Ratio of current health to max health. [0%, 100%] encoded into [0, 255].
	UnitEnergy         *ImageData `protobuf:"bytes,9,opt,name=unit_energy,json=unitEnergy" json:"unit_energy,omitempty"`                              // int32.
	UnitEnergyRatio    *ImageData `protobuf:"bytes,18,opt,name=unit_energy_ratio,json=unitEnergyRatio" json:"unit_energy_ratio,omitempty"`            // uint8. Ratio of current energy to max energy. [0%, 100%] encoded into [0, 255].
	UnitShields        *ImageData `protobuf:"bytes,10,opt,name=unit_shields,json=unitShields" json:"unit_shields,omitempty"`                          // int32.
	UnitShieldsRatio   *ImageData `protobuf:"bytes,19,opt,name=unit_shields_ratio,json=unitShieldsRatio" json:"unit_shields_ratio,omitempty"`         // uint8. Ratio of current shields to max shields. [0%, 100%] encoded into [0, 255].
	PlayerRelative     *ImageData `protobuf:"bytes,11,opt,name=player_relative,json=playerRelative" json:"player_relative,omitempty"`                 // uint8. See "Alliance" enum in raw.proto. Range: [1, 4]
	UnitDensityAa      *ImageData `protobuf:"bytes,14,opt,name=unit_density_aa,json=unitDensityAa" json:"unit_density_aa,omitempty"`                  // uint8. Density of units overlapping a pixel, anti-aliased. [0.0, 16.0f] encoded into [0, 255].
	UnitDensity        *ImageData `protobuf:"bytes,15,opt,name=unit_density,json=unitDensity" json:"unit_density,omitempty"`                          // uint8. Count of units overlapping a pixel.
	Effects            *ImageData `protobuf:"bytes,20,opt,name=effects" json:"effects,omitempty"`                                                     // uint8. Visuals of persistent abilities. (eg. Psistorm)
	Hallucinations     *ImageData `protobuf:"bytes,21,opt,name=hallucinations" json:"hallucinations,omitempty"`                                       // 1-bit. Whether the unit here is a hallucination.
	Cloaked            *ImageData `protobuf:"bytes,22,opt,name=cloaked" json:"cloaked,omitempty"`                                                     // 1-bit. Whether the unit here is cloaked. Hidden units will show up too, but with less details in other layers.
	Blip               *ImageData `protobuf:"bytes,23,opt,name=blip" json:"blip,omitempty"`                                                           // 1-bit. Whether the unit here is a blip.
	Buffs              *ImageData `protobuf:"bytes,24,opt,name=buffs" json:"buffs,omitempty"`                                                         // int32. One of the buffs applied to this unit. Extras are ignored.
	BuffDuration       *ImageData `protobuf:"bytes,26,opt,name=buff_duration,json=buffDuration" json:"buff_duration,omitempty"`                       // uint8. Ratio of buff remaining. [0%, 100%] encoded into [0, 255].
	Active             *ImageData `protobuf:"bytes,25,opt,name=active" json:"active,omitempty"`                                                       // 1-bit. Whether the unit here is active.
	BuildProgress      *ImageData `protobuf:"bytes,27,opt,name=build_progress,json=buildProgress" json:"build_progress,omitempty"`                    // uint8. How far along the building is building something. [0%, 100%] encoded into [0, 255].
	Buildable          *ImageData `protobuf:"bytes,28,opt,name=buildable" json:"buildable,omitempty"`                                                 // 1-bit. Whether a building can be built here.
	Pathable           *ImageData `protobuf:"bytes,29,opt,name=pathable" json:"pathable,omitempty"`                                                   // 1-bit. Whether a unit can walk here.
	Placeholder        *ImageData `protobuf:"bytes,30,opt,name=placeholder" json:"placeholder,omitempty"`                                             // 1-bit. Whether the unit here is a placeholder building to be constructed.
}

func (x *FeatureLayers) Reset() {
	*x = FeatureLayers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spatial_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureLayers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureLayers) ProtoMessage() {}

func (x *FeatureLayers) ProtoReflect() protoreflect.Message {
	mi := &file_spatial_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureLayers.ProtoReflect.Descriptor instead.
func (*FeatureLayers) Descriptor() ([]byte, []int) {
	return file_spatial_proto_rawDescGZIP(), []int{1}
}

func (x *FeatureLayers) GetHeightMap() *ImageData {
	if x != nil {
		return x.HeightMap
	}
	return nil
}

func (x *FeatureLayers) GetVisibilityMap() *ImageData {
	if x != nil {
		return x.VisibilityMap
	}
	return nil
}

func (x *FeatureLayers) GetCreep() *ImageData {
	if x != nil {
		return x.Creep
	}
	return nil
}

func (x *FeatureLayers) GetPower() *ImageData {
	if x != nil {
		return x.Power
	}
	return nil
}

func (x *FeatureLayers) GetPlayerId() *ImageData {
	if x != nil {
		return x.PlayerId
	}
	return nil
}

func (x *FeatureLayers) GetUnitType() *ImageData {
	if x != nil {
		return x.UnitType
	}
	return nil
}

func (x *FeatureLayers) GetSelected() *ImageData {
	if x != nil {
		return x.Selected
	}
	return nil
}

func (x *FeatureLayers) GetUnitHitPoints() *ImageData {
	if x != nil {
		return x.UnitHitPoints
	}
	return nil
}

func (x *FeatureLayers) GetUnitHitPointsRatio() *ImageData {
	if x != nil {
		return x.UnitHitPointsRatio
	}
	return nil
}

func (x *FeatureLayers) GetUnitEnergy() *ImageData {
	if x != nil {
		return x.UnitEnergy
	}
	return nil
}

func (x *FeatureLayers) GetUnitEnergyRatio() *ImageData {
	if x != nil {
		return x.UnitEnergyRatio
	}
	return nil
}

func (x *FeatureLayers) GetUnitShields() *ImageData {
	if x != nil {
		return x.UnitShields
	}
	return nil
}

func (x *FeatureLayers) GetUnitShieldsRatio() *ImageData {
	if x != nil {
		return x.UnitShieldsRatio
	}
	return nil
}

func (x *FeatureLayers) GetPlayerRelative() *ImageData {
	if x != nil {
		return x.PlayerRelative
	}
	return nil
}

func (x *FeatureLayers) GetUnitDensityAa() *ImageData {
	if x != nil {
		return x.UnitDensityAa
	}
	return nil
}

func (x *FeatureLayers) GetUnitDensity() *ImageData {
	if x != nil {
		return x.UnitDensity
	}
	return nil
}

func (x *FeatureLayers) GetEffects() *ImageData {
	if x != nil {
		return x.Effects
	}
	return nil
}

func (x *FeatureLayers) GetHallucinations() *ImageData {
	if x != nil {
		return x.Hallucinations
	}
	return nil
}

func (x *FeatureLayers) GetCloaked() *ImageData {
	if x != nil {
		return x.Cloaked
	}
	return nil
}

func (x *FeatureLayers) GetBlip() *ImageData {
	if x != nil {
		return x.Blip
	}
	return nil
}

func (x *FeatureLayers) GetBuffs() *ImageData {
	if x != nil {
		return x.Buffs
	}
	return nil
}

func (x *FeatureLayers) GetBuffDuration() *ImageData {
	if x != nil {
		return x.BuffDuration
	}
	return nil
}

func (x *FeatureLayers) GetActive() *ImageData {
	if x != nil {
		return x.Active
	}
	return nil
}

func (x *FeatureLayers) GetBuildProgress() *ImageData {
	if x != nil {
		return x.BuildProgress
	}
	return nil
}

func (x *FeatureLayers) GetBuildable() *ImageData {
	if x != nil {
		return x.Buildable
	}
	return nil
}

func (x *FeatureLayers) GetPathable() *ImageData {
	if x != nil {
		return x.Pathable
	}
	return nil
}

func (x *FeatureLayers) GetPlaceholder() *ImageData {
	if x != nil {
		return x.Placeholder
	}
	return nil
}

type FeatureLayersMinimap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeightMap      *ImageData `protobuf:"bytes,1,opt,name=height_map,json=heightMap" json:"height_map,omitempty"`                // uint8. Terrain height. World space units of [-200, 200] encoded into [0, 255].
	VisibilityMap  *ImageData `protobuf:"bytes,2,opt,name=visibility_map,json=visibilityMap" json:"visibility_map,omitempty"`    // uint8. 0=Hidden, 1=Fogged, 2=Visible, 3=FullHidden
	Creep          *ImageData `protobuf:"bytes,3,opt,name=creep" json:"creep,omitempty"`                                         // 1-bit. Zerg creep.
	Camera         *ImageData `protobuf:"bytes,4,opt,name=camera" json:"camera,omitempty"`                                       // 1-bit. Area covered by the camera.
	PlayerId       *ImageData `protobuf:"bytes,5,opt,name=player_id,json=playerId" json:"player_id,omitempty"`                   // uint8. Participants: [1, 15] Neutral: 16
	PlayerRelative *ImageData `protobuf:"bytes,6,opt,name=player_relative,json=playerRelative" json:"player_relative,omitempty"` // uint8. See "Alliance" enum in raw.proto. Range: [1, 4]
	Selected       *ImageData `protobuf:"bytes,7,opt,name=selected" json:"selected,omitempty"`                                   // 1-bit. Selected units.
	Alerts         *ImageData `protobuf:"bytes,9,opt,name=alerts" json:"alerts,omitempty"`                                       // 1-bit. Shows 'UnitAttacked' alert location.
	Buildable      *ImageData `protobuf:"bytes,10,opt,name=buildable" json:"buildable,omitempty"`                                // 1-bit. Whether a building can be built here.
	Pathable       *ImageData `protobuf:"bytes,11,opt,name=pathable" json:"pathable,omitempty"`                                  // 1-bit. Whether a unit can walk here.
	// Cheat layers, enable with SpatialCameraSetup.allow_cheating_layers.
	UnitType *ImageData `protobuf:"bytes,8,opt,name=unit_type,json=unitType" json:"unit_type,omitempty"` // int32. Unique identifier for type of unit.
}

func (x *FeatureLayersMinimap) Reset() {
	*x = FeatureLayersMinimap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spatial_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureLayersMinimap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureLayersMinimap) ProtoMessage() {}

func (x *FeatureLayersMinimap) ProtoReflect() protoreflect.Message {
	mi := &file_spatial_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureLayersMinimap.ProtoReflect.Descriptor instead.
func (*FeatureLayersMinimap) Descriptor() ([]byte, []int) {
	return file_spatial_proto_rawDescGZIP(), []int{2}
}

func (x *FeatureLayersMinimap) GetHeightMap() *ImageData {
	if x != nil {
		return x.HeightMap
	}
	return nil
}

func (x *FeatureLayersMinimap) GetVisibilityMap() *ImageData {
	if x != nil {
		return x.VisibilityMap
	}
	return nil
}

func (x *FeatureLayersMinimap) GetCreep() *ImageData {
	if x != nil {
		return x.Creep
	}
	return nil
}

func (x *FeatureLayersMinimap) GetCamera() *ImageData {
	if x != nil {
		return x.Camera
	}
	return nil
}

func (x *FeatureLayersMinimap) GetPlayerId() *ImageData {
	if x != nil {
		return x.PlayerId
	}
	return nil
}

func (x *FeatureLayersMinimap) GetPlayerRelative() *ImageData {
	if x != nil {
		return x.PlayerRelative
	}
	return nil
}

func (x *FeatureLayersMinimap) GetSelected() *ImageData {
	if x != nil {
		return x.Selected
	}
	return nil
}

func (x *FeatureLayersMinimap) GetAlerts() *ImageData {
	if x != nil {
		return x.Alerts
	}
	return nil
}

func (x *FeatureLayersMinimap) GetBuildable() *ImageData {
	if x != nil {
		return x.Buildable
	}
	return nil
}

func (x *FeatureLayersMinimap) GetPathable() *ImageData {
	if x != nil {
		return x.Pathable
	}
	return nil
}

func (x *FeatureLayersMinimap) GetUnitType() *ImageData {
	if x != nil {
		return x.UnitType
	}
	return nil
}

type ObservationRender struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Map     *ImageData `protobuf:"bytes,1,opt,name=map" json:"map,omitempty"`
	Minimap *ImageData `protobuf:"bytes,2,opt,name=minimap" json:"minimap,omitempty"`
}

func (x *ObservationRender) Reset() {
	*x = ObservationRender{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spatial_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservationRender) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationRender) ProtoMessage() {}

func (x *ObservationRender) ProtoReflect() protoreflect.Message {
	mi := &file_spatial_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationRender.ProtoReflect.Descriptor instead.
func (*ObservationRender) Descriptor() ([]byte, []int) {
	return file_spatial_proto_rawDescGZIP(), []int{3}
}

func (x *ObservationRender) GetMap() *ImageData {
	if x != nil {
		return x.Map
	}
	return nil
}

func (x *ObservationRender) GetMinimap() *ImageData {
	if x != nil {
		return x.Minimap
	}
	return nil
}

type ActionSpatial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Action:
	//	*ActionSpatial_UnitCommand
	//	*ActionSpatial_CameraMove
	//	*ActionSpatial_UnitSelectionPoint
	//	*ActionSpatial_UnitSelectionRect
	Action isActionSpatial_Action `protobuf_oneof:"action"`
}

func (x *ActionSpatial) Reset() {
	*x = ActionSpatial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spatial_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionSpatial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionSpatial) ProtoMessage() {}

func (x *ActionSpatial) ProtoReflect() protoreflect.Message {
	mi := &file_spatial_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionSpatial.ProtoReflect.Descriptor instead.
func (*ActionSpatial) Descriptor() ([]byte, []int) {
	return file_spatial_proto_rawDescGZIP(), []int{4}
}

func (m *ActionSpatial) GetAction() isActionSpatial_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *ActionSpatial) GetUnitCommand() *ActionSpatialUnitCommand {
	if x, ok := x.GetAction().(*ActionSpatial_UnitCommand); ok {
		return x.UnitCommand
	}
	return nil
}

func (x *ActionSpatial) GetCameraMove() *ActionSpatialCameraMove {
	if x, ok := x.GetAction().(*ActionSpatial_CameraMove); ok {
		return x.CameraMove
	}
	return nil
}

func (x *ActionSpatial) GetUnitSelectionPoint() *ActionSpatialUnitSelectionPoint {
	if x, ok := x.GetAction().(*ActionSpatial_UnitSelectionPoint); ok {
		return x.UnitSelectionPoint
	}
	return nil
}

func (x *ActionSpatial) GetUnitSelectionRect() *ActionSpatialUnitSelectionRect {
	if x, ok := x.GetAction().(*ActionSpatial_UnitSelectionRect); ok {
		return x.UnitSelectionRect
	}
	return nil
}

type isActionSpatial_Action interface {
	isActionSpatial_Action()
}

type ActionSpatial_UnitCommand struct {
	UnitCommand *ActionSpatialUnitCommand `protobuf:"bytes,1,opt,name=unit_command,json=unitCommand,oneof"`
}

type ActionSpatial_CameraMove struct {
	CameraMove *ActionSpatialCameraMove `protobuf:"bytes,2,opt,name=camera_move,json=cameraMove,oneof"`
}

type ActionSpatial_UnitSelectionPoint struct {
	UnitSelectionPoint *ActionSpatialUnitSelectionPoint `protobuf:"bytes,3,opt,name=unit_selection_point,json=unitSelectionPoint,oneof"`
}

type ActionSpatial_UnitSelectionRect struct {
	UnitSelectionRect *ActionSpatialUnitSelectionRect `protobuf:"bytes,4,opt,name=unit_selection_rect,json=unitSelectionRect,oneof"`
}

func (*ActionSpatial_UnitCommand) isActionSpatial_Action() {}

func (*ActionSpatial_CameraMove) isActionSpatial_Action() {}

func (*ActionSpatial_UnitSelectionPoint) isActionSpatial_Action() {}

func (*ActionSpatial_UnitSelectionRect) isActionSpatial_Action() {}

type ActionSpatialUnitCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AbilityId *int32 `protobuf:"varint,1,opt,name=ability_id,json=abilityId" json:"ability_id,omitempty"`
	// Types that are assignable to Target:
	//	*ActionSpatialUnitCommand_TargetScreenCoord
	//	*ActionSpatialUnitCommand_TargetMinimapCoord
	Target       isActionSpatialUnitCommand_Target `protobuf_oneof:"target"`
	QueueCommand *bool                             `protobuf:"varint,4,opt,name=queue_command,json=queueCommand" json:"queue_command,omitempty"` // Equivalent to shift+command.
}

func (x *ActionSpatialUnitCommand) Reset() {
	*x = ActionSpatialUnitCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spatial_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionSpatialUnitCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionSpatialUnitCommand) ProtoMessage() {}

func (x *ActionSpatialUnitCommand) ProtoReflect() protoreflect.Message {
	mi := &file_spatial_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionSpatialUnitCommand.ProtoReflect.Descriptor instead.
func (*ActionSpatialUnitCommand) Descriptor() ([]byte, []int) {
	return file_spatial_proto_rawDescGZIP(), []int{5}
}

func (x *ActionSpatialUnitCommand) GetAbilityId() int32 {
	if x != nil && x.AbilityId != nil {
		return *x.AbilityId
	}
	return 0
}

func (m *ActionSpatialUnitCommand) GetTarget() isActionSpatialUnitCommand_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (x *ActionSpatialUnitCommand) GetTargetScreenCoord() *PointI {
	if x, ok := x.GetTarget().(*ActionSpatialUnitCommand_TargetScreenCoord); ok {
		return x.TargetScreenCoord
	}
	return nil
}

func (x *ActionSpatialUnitCommand) GetTargetMinimapCoord() *PointI {
	if x, ok := x.GetTarget().(*ActionSpatialUnitCommand_TargetMinimapCoord); ok {
		return x.TargetMinimapCoord
	}
	return nil
}

func (x *ActionSpatialUnitCommand) GetQueueCommand() bool {
	if x != nil && x.QueueCommand != nil {
		return *x.QueueCommand
	}
	return false
}

type isActionSpatialUnitCommand_Target interface {
	isActionSpatialUnitCommand_Target()
}

type ActionSpatialUnitCommand_TargetScreenCoord struct {
	TargetScreenCoord *PointI `protobuf:"bytes,2,opt,name=target_screen_coord,json=targetScreenCoord,oneof"`
}

type ActionSpatialUnitCommand_TargetMinimapCoord struct {
	TargetMinimapCoord *PointI `protobuf:"bytes,3,opt,name=target_minimap_coord,json=targetMinimapCoord,oneof"`
}

func (*ActionSpatialUnitCommand_TargetScreenCoord) isActionSpatialUnitCommand_Target() {}

func (*ActionSpatialUnitCommand_TargetMinimapCoord) isActionSpatialUnitCommand_Target() {}

type ActionSpatialCameraMove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CenterMinimap *PointI `protobuf:"bytes,1,opt,name=center_minimap,json=centerMinimap" json:"center_minimap,omitempty"` // Simulates a click on the minimap to move the camera.
}

func (x *ActionSpatialCameraMove) Reset() {
	*x = ActionSpatialCameraMove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spatial_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionSpatialCameraMove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionSpatialCameraMove) ProtoMessage() {}

func (x *ActionSpatialCameraMove) ProtoReflect() protoreflect.Message {
	mi := &file_spatial_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionSpatialCameraMove.ProtoReflect.Descriptor instead.
func (*ActionSpatialCameraMove) Descriptor() ([]byte, []int) {
	return file_spatial_proto_rawDescGZIP(), []int{6}
}

func (x *ActionSpatialCameraMove) GetCenterMinimap() *PointI {
	if x != nil {
		return x.CenterMinimap
	}
	return nil
}

type ActionSpatialUnitSelectionPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelectionScreenCoord *PointI                               `protobuf:"bytes,1,opt,name=selection_screen_coord,json=selectionScreenCoord" json:"selection_screen_coord,omitempty"`
	Type                 *ActionSpatialUnitSelectionPoint_Type `protobuf:"varint,2,opt,name=type,enum=sc2proto.ActionSpatialUnitSelectionPoint_Type" json:"type,omitempty"`
}

func (x *ActionSpatialUnitSelectionPoint) Reset() {
	*x = ActionSpatialUnitSelectionPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spatial_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionSpatialUnitSelectionPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionSpatialUnitSelectionPoint) ProtoMessage() {}

func (x *ActionSpatialUnitSelectionPoint) ProtoReflect() protoreflect.Message {
	mi := &file_spatial_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionSpatialUnitSelectionPoint.ProtoReflect.Descriptor instead.
func (*ActionSpatialUnitSelectionPoint) Descriptor() ([]byte, []int) {
	return file_spatial_proto_rawDescGZIP(), []int{7}
}

func (x *ActionSpatialUnitSelectionPoint) GetSelectionScreenCoord() *PointI {
	if x != nil {
		return x.SelectionScreenCoord
	}
	return nil
}

func (x *ActionSpatialUnitSelectionPoint) GetType() ActionSpatialUnitSelectionPoint_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ActionSpatialUnitSelectionPoint_Select
}

type ActionSpatialUnitSelectionRect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelectionScreenCoord []*RectangleI `protobuf:"bytes,1,rep,name=selection_screen_coord,json=selectionScreenCoord" json:"selection_screen_coord,omitempty"` // Eventually this should not be an array, but a single field (multiple would be cheating).
	SelectionAdd         *bool         `protobuf:"varint,2,opt,name=selection_add,json=selectionAdd" json:"selection_add,omitempty"`                          // Equivalent to shift+drag. Adds units to selection.
}

func (x *ActionSpatialUnitSelectionRect) Reset() {
	*x = ActionSpatialUnitSelectionRect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spatial_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionSpatialUnitSelectionRect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionSpatialUnitSelectionRect) ProtoMessage() {}

func (x *ActionSpatialUnitSelectionRect) ProtoReflect() protoreflect.Message {
	mi := &file_spatial_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionSpatialUnitSelectionRect.ProtoReflect.Descriptor instead.
func (*ActionSpatialUnitSelectionRect) Descriptor() ([]byte, []int) {
	return file_spatial_proto_rawDescGZIP(), []int{8}
}

func (x *ActionSpatialUnitSelectionRect) GetSelectionScreenCoord() []*RectangleI {
	if x != nil {
		return x.SelectionScreenCoord
	}
	return nil
}

func (x *ActionSpatialUnitSelectionRect) GetSelectionAdd() bool {
	if x != nil && x.SelectionAdd != nil {
		return *x.SelectionAdd
	}
	return false
}

var File_spatial_proto protoreflect.FileDescriptor

var file_spatial_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x70, 0x61, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x08, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x95, 0x01, 0x0a, 0x17, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x07, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x52, 0x07, 0x72,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61,
	0x70, 0x5f, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x70, 0x52,
	0x0e, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x70, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x22,
	0xc1, 0x0b, 0x0a, 0x0d, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x12, 0x32, 0x0a, 0x0a, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x3a, 0x0a, 0x0e, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0d, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x61,
	0x70, 0x12, 0x29, 0x0a, 0x05, 0x63, 0x72, 0x65, 0x65, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x63, 0x72, 0x65, 0x65, 0x70, 0x12, 0x29, 0x0a, 0x05,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63,
	0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x32,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73,
	0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0f,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x68, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x75, 0x6e, 0x69, 0x74,
	0x48, 0x69, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x15, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x68, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x12, 0x75,
	0x6e, 0x69, 0x74, 0x48, 0x69, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x12, 0x34, 0x0a, 0x0b, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x75, 0x6e, 0x69,
	0x74, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x3f, 0x0a, 0x11, 0x75, 0x6e, 0x69, 0x74, 0x5f,
	0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x75, 0x6e, 0x69, 0x74, 0x45, 0x6e, 0x65,
	0x72, 0x67, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x36, 0x0a, 0x0c, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0b, 0x75, 0x6e, 0x69, 0x74, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x41, 0x0a, 0x12, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73,
	0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x10, 0x75, 0x6e, 0x69, 0x74, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x12, 0x3c, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73,
	0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x3b, 0x0a, 0x0f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x6e, 0x73, 0x69, 0x74,
	0x79, 0x5f, 0x61, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x32,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0d, 0x75, 0x6e, 0x69, 0x74, 0x44, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x41, 0x61, 0x12, 0x36,
	0x0a, 0x0c, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x75, 0x6e, 0x69, 0x74, 0x44,
	0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x0e, 0x68, 0x61, 0x6c, 0x6c, 0x75, 0x63, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0e, 0x68, 0x61, 0x6c, 0x6c, 0x75, 0x63, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x65, 0x64, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x65,
	0x64, 0x12, 0x27, 0x0a, 0x04, 0x62, 0x6c, 0x69, 0x70, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x62, 0x6c, 0x69, 0x70, 0x12, 0x29, 0x0a, 0x05, 0x62, 0x75,
	0x66, 0x66, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x32, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05,
	0x62, 0x75, 0x66, 0x66, 0x73, 0x12, 0x38, 0x0a, 0x0d, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73,
	0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0c, 0x62, 0x75, 0x66, 0x66, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2b, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3a, 0x0a, 0x0e,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x31, 0x0a, 0x09, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63,
	0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x70,
	0x61, 0x74, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x70, 0x61, 0x74, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x0b,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x22, 0xc2, 0x04, 0x0a, 0x14, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x70, 0x12, 0x32, 0x0a, 0x0a,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x70,
	0x12, 0x3a, 0x0a, 0x0e, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x12, 0x29, 0x0a, 0x05,
	0x63, 0x72, 0x65, 0x65, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63,
	0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x05, 0x63, 0x72, 0x65, 0x65, 0x70, 0x12, 0x2b, 0x0a, 0x06, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x12, 0x30, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x73, 0x12, 0x31, 0x0a, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x70, 0x61, 0x74, 0x68, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x70, 0x61,
	0x74, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x32, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x75, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x69, 0x0a, 0x11, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x25, 0x0a,
	0x03, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x32,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x03, 0x6d, 0x61, 0x70, 0x12, 0x2d, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x69,
	0x6d, 0x61, 0x70, 0x22, 0xe3, 0x02, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70,
	0x61, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x47, 0x0a, 0x0c, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x63,
	0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61,
	0x74, 0x69, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48,
	0x00, 0x52, 0x0b, 0x75, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x44,
	0x0a, 0x0b, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x4d, 0x6f, 0x76, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x4d, 0x6f, 0x76, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x12, 0x75, 0x6e, 0x69, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x13, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x70, 0x61, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x11, 0x75, 0x6e,
	0x69, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x74, 0x42,
	0x08, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf2, 0x01, 0x0a, 0x18, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x49, 0x48, 0x00, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x12, 0x44, 0x0a, 0x14, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x6f, 0x72,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x48, 0x00, 0x52, 0x12, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x70, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x52,
	0x0a, 0x17, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x74, 0x69, 0x61, 0x6c, 0x43,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x6f, 0x76, 0x65, 0x12, 0x37, 0x0a, 0x0e, 0x63, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x49, 0x52, 0x0d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x69, 0x6d,
	0x61, 0x70, 0x22, 0xea, 0x01, 0x0a, 0x1f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61,
	0x74, 0x69, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x16, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x52, 0x14, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x12, 0x42,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x73,
	0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70,
	0x61, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x3b, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x10, 0x03, 0x12,
	0x0e, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x10, 0x04, 0x22,
	0x91, 0x01, 0x0a, 0x1e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x74, 0x69, 0x61,
	0x6c, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x63, 0x74, 0x12, 0x4a, 0x0a, 0x16, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x49, 0x52, 0x14, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x64, 0x64, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6a, 0x69, 0x6e, 0x77, 0x75, 0x7a, 0x68, 0x61, 0x6f, 0x2f, 0x73, 0x63, 0x32, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74,
	0x6f,
}

var (
	file_spatial_proto_rawDescOnce sync.Once
	file_spatial_proto_rawDescData = file_spatial_proto_rawDesc
)

func file_spatial_proto_rawDescGZIP() []byte {
	file_spatial_proto_rawDescOnce.Do(func() {
		file_spatial_proto_rawDescData = protoimpl.X.CompressGZIP(file_spatial_proto_rawDescData)
	})
	return file_spatial_proto_rawDescData
}

var file_spatial_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_spatial_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_spatial_proto_goTypes = []interface{}{
	(ActionSpatialUnitSelectionPoint_Type)(0), // 0: sc2proto.ActionSpatialUnitSelectionPoint.Type
	(*ObservationFeatureLayer)(nil),           // 1: sc2proto.ObservationFeatureLayer
	(*FeatureLayers)(nil),                     // 2: sc2proto.FeatureLayers
	(*FeatureLayersMinimap)(nil),              // 3: sc2proto.FeatureLayersMinimap
	(*ObservationRender)(nil),                 // 4: sc2proto.ObservationRender
	(*ActionSpatial)(nil),                     // 5: sc2proto.ActionSpatial
	(*ActionSpatialUnitCommand)(nil),          // 6: sc2proto.ActionSpatialUnitCommand
	(*ActionSpatialCameraMove)(nil),           // 7: sc2proto.ActionSpatialCameraMove
	(*ActionSpatialUnitSelectionPoint)(nil),   // 8: sc2proto.ActionSpatialUnitSelectionPoint
	(*ActionSpatialUnitSelectionRect)(nil),    // 9: sc2proto.ActionSpatialUnitSelectionRect
	(*ImageData)(nil),                         // 10: sc2proto.ImageData
	(*PointI)(nil),                            // 11: sc2proto.PointI
	(*RectangleI)(nil),                        // 12: sc2proto.RectangleI
}
var file_spatial_proto_depIdxs = []int32{
	2,  // 0: sc2proto.ObservationFeatureLayer.renders:type_name -> sc2proto.FeatureLayers
	3,  // 1: sc2proto.ObservationFeatureLayer.minimap_renders:type_name -> sc2proto.FeatureLayersMinimap
	10, // 2: sc2proto.FeatureLayers.height_map:type_name -> sc2proto.ImageData
	10, // 3: sc2proto.FeatureLayers.visibility_map:type_name -> sc2proto.ImageData
	10, // 4: sc2proto.FeatureLayers.creep:type_name -> sc2proto.ImageData
	10, // 5: sc2proto.FeatureLayers.power:type_name -> sc2proto.ImageData
	10, // 6: sc2proto.FeatureLayers.player_id:type_name -> sc2proto.ImageData
	10, // 7: sc2proto.FeatureLayers.unit_type:type_name -> sc2proto.ImageData
	10, // 8: sc2proto.FeatureLayers.selected:type_name -> sc2proto.ImageData
	10, // 9: sc2proto.FeatureLayers.unit_hit_points:type_name -> sc2proto.ImageData
	10, // 10: sc2proto.FeatureLayers.unit_hit_points_ratio:type_name -> sc2proto.ImageData
	10, // 11: sc2proto.FeatureLayers.unit_energy:type_name -> sc2proto.ImageData
	10, // 12: sc2proto.FeatureLayers.unit_energy_ratio:type_name -> sc2proto.ImageData
	10, // 13: sc2proto.FeatureLayers.unit_shields:type_name -> sc2proto.ImageData
	10, // 14: sc2proto.FeatureLayers.unit_shields_ratio:type_name -> sc2proto.ImageData
	10, // 15: sc2proto.FeatureLayers.player_relative:type_name -> sc2proto.ImageData
	10, // 16: sc2proto.FeatureLayers.unit_density_aa:type_name -> sc2proto.ImageData
	10, // 17: sc2proto.FeatureLayers.unit_density:type_name -> sc2proto.ImageData
	10, // 18: sc2proto.FeatureLayers.effects:type_name -> sc2proto.ImageData
	10, // 19: sc2proto.FeatureLayers.hallucinations:type_name -> sc2proto.ImageData
	10, // 20: sc2proto.FeatureLayers.cloaked:type_name -> sc2proto.ImageData
	10, // 21: sc2proto.FeatureLayers.blip:type_name -> sc2proto.ImageData
	10, // 22: sc2proto.FeatureLayers.buffs:type_name -> sc2proto.ImageData
	10, // 23: sc2proto.FeatureLayers.buff_duration:type_name -> sc2proto.ImageData
	10, // 24: sc2proto.FeatureLayers.active:type_name -> sc2proto.ImageData
	10, // 25: sc2proto.FeatureLayers.build_progress:type_name -> sc2proto.ImageData
	10, // 26: sc2proto.FeatureLayers.buildable:type_name -> sc2proto.ImageData
	10, // 27: sc2proto.FeatureLayers.pathable:type_name -> sc2proto.ImageData
	10, // 28: sc2proto.FeatureLayers.placeholder:type_name -> sc2proto.ImageData
	10, // 29: sc2proto.FeatureLayersMinimap.height_map:type_name -> sc2proto.ImageData
	10, // 30: sc2proto.FeatureLayersMinimap.visibility_map:type_name -> sc2proto.ImageData
	10, // 31: sc2proto.FeatureLayersMinimap.creep:type_name -> sc2proto.ImageData
	10, // 32: sc2proto.FeatureLayersMinimap.camera:type_name -> sc2proto.ImageData
	10, // 33: sc2proto.FeatureLayersMinimap.player_id:type_name -> sc2proto.ImageData
	10, // 34: sc2proto.FeatureLayersMinimap.player_relative:type_name -> sc2proto.ImageData
	10, // 35: sc2proto.FeatureLayersMinimap.selected:type_name -> sc2proto.ImageData
	10, // 36: sc2proto.FeatureLayersMinimap.alerts:type_name -> sc2proto.ImageData
	10, // 37: sc2proto.FeatureLayersMinimap.buildable:type_name -> sc2proto.ImageData
	10, // 38: sc2proto.FeatureLayersMinimap.pathable:type_name -> sc2proto.ImageData
	10, // 39: sc2proto.FeatureLayersMinimap.unit_type:type_name -> sc2proto.ImageData
	10, // 40: sc2proto.ObservationRender.map:type_name -> sc2proto.ImageData
	10, // 41: sc2proto.ObservationRender.minimap:type_name -> sc2proto.ImageData
	6,  // 42: sc2proto.ActionSpatial.unit_command:type_name -> sc2proto.ActionSpatialUnitCommand
	7,  // 43: sc2proto.ActionSpatial.camera_move:type_name -> sc2proto.ActionSpatialCameraMove
	8,  // 44: sc2proto.ActionSpatial.unit_selection_point:type_name -> sc2proto.ActionSpatialUnitSelectionPoint
	9,  // 45: sc2proto.ActionSpatial.unit_selection_rect:type_name -> sc2proto.ActionSpatialUnitSelectionRect
	11, // 46: sc2proto.ActionSpatialUnitCommand.target_screen_coord:type_name -> sc2proto.PointI
	11, // 47: sc2proto.ActionSpatialUnitCommand.target_minimap_coord:type_name -> sc2proto.PointI
	11, // 48: sc2proto.ActionSpatialCameraMove.center_minimap:type_name -> sc2proto.PointI
	11, // 49: sc2proto.ActionSpatialUnitSelectionPoint.selection_screen_coord:type_name -> sc2proto.PointI
	0,  // 50: sc2proto.ActionSpatialUnitSelectionPoint.type:type_name -> sc2proto.ActionSpatialUnitSelectionPoint.Type
	12, // 51: sc2proto.ActionSpatialUnitSelectionRect.selection_screen_coord:type_name -> sc2proto.RectangleI
	52, // [52:52] is the sub-list for method output_type
	52, // [52:52] is the sub-list for method input_type
	52, // [52:52] is the sub-list for extension type_name
	52, // [52:52] is the sub-list for extension extendee
	0,  // [0:52] is the sub-list for field type_name
}

func init() { file_spatial_proto_init() }
func file_spatial_proto_init() {
	if File_spatial_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_spatial_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservationFeatureLayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spatial_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureLayers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spatial_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureLayersMinimap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spatial_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservationRender); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spatial_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionSpatial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spatial_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionSpatialUnitCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spatial_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionSpatialCameraMove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spatial_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionSpatialUnitSelectionPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spatial_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionSpatialUnitSelectionRect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_spatial_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*ActionSpatial_UnitCommand)(nil),
		(*ActionSpatial_CameraMove)(nil),
		(*ActionSpatial_UnitSelectionPoint)(nil),
		(*ActionSpatial_UnitSelectionRect)(nil),
	}
	file_spatial_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*ActionSpatialUnitCommand_TargetScreenCoord)(nil),
		(*ActionSpatialUnitCommand_TargetMinimapCoord)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spatial_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_spatial_proto_goTypes,
		DependencyIndexes: file_spatial_proto_depIdxs,
		EnumInfos:         file_spatial_proto_enumTypes,
		MessageInfos:      file_spatial_proto_msgTypes,
	}.Build()
	File_spatial_proto = out.File
	file_spatial_proto_rawDesc = nil
	file_spatial_proto_goTypes = nil
	file_spatial_proto_depIdxs = nil
}
