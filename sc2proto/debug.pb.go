// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.0
// source: debug.proto

package sc2proto

import (
	"reflect"
	"sync"

	"google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DebugGameState int32

const (
	DebugGameState_show_map      DebugGameState = 1
	DebugGameState_control_enemy DebugGameState = 2
	DebugGameState_food          DebugGameState = 3
	DebugGameState_free          DebugGameState = 4
	DebugGameState_all_resources DebugGameState = 5
	DebugGameState_god           DebugGameState = 6
	DebugGameState_minerals      DebugGameState = 7
	DebugGameState_gas           DebugGameState = 8
	DebugGameState_cooldown      DebugGameState = 9
	DebugGameState_tech_tree     DebugGameState = 10
	DebugGameState_upgrade       DebugGameState = 11
	DebugGameState_fast_build    DebugGameState = 12
)

// Enum value maps for DebugGameState.
var (
	DebugGameState_name = map[int32]string{
		1:  "show_map",
		2:  "control_enemy",
		3:  "food",
		4:  "free",
		5:  "all_resources",
		6:  "god",
		7:  "minerals",
		8:  "gas",
		9:  "cooldown",
		10: "tech_tree",
		11: "upgrade",
		12: "fast_build",
	}
	DebugGameState_value = map[string]int32{
		"show_map":      1,
		"control_enemy": 2,
		"food":          3,
		"free":          4,
		"all_resources": 5,
		"god":           6,
		"minerals":      7,
		"gas":           8,
		"cooldown":      9,
		"tech_tree":     10,
		"upgrade":       11,
		"fast_build":    12,
	}
)

func (x DebugGameState) Enum() *DebugGameState {
	p := new(DebugGameState)
	*p = x
	return p
}

func (x DebugGameState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DebugGameState) Descriptor() protoreflect.EnumDescriptor {
	return file_debug_proto_enumTypes[0].Descriptor()
}

func (DebugGameState) Type() protoreflect.EnumType {
	return &file_debug_proto_enumTypes[0]
}

func (x DebugGameState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DebugGameState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DebugGameState(num)
	return nil
}

// Deprecated: Use DebugGameState.Descriptor instead.
func (DebugGameState) EnumDescriptor() ([]byte, []int) {
	return file_debug_proto_rawDescGZIP(), []int{0}
}

type DebugTestProcess_Test int32

const (
	DebugTestProcess_hang  DebugTestProcess_Test = 1
	DebugTestProcess_crash DebugTestProcess_Test = 2
	DebugTestProcess_exit  DebugTestProcess_Test = 3
)

// Enum value maps for DebugTestProcess_Test.
var (
	DebugTestProcess_Test_name = map[int32]string{
		1: "hang",
		2: "crash",
		3: "exit",
	}
	DebugTestProcess_Test_value = map[string]int32{
		"hang":  1,
		"crash": 2,
		"exit":  3,
	}
)

func (x DebugTestProcess_Test) Enum() *DebugTestProcess_Test {
	p := new(DebugTestProcess_Test)
	*p = x
	return p
}

func (x DebugTestProcess_Test) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DebugTestProcess_Test) Descriptor() protoreflect.EnumDescriptor {
	return file_debug_proto_enumTypes[1].Descriptor()
}

func (DebugTestProcess_Test) Type() protoreflect.EnumType {
	return &file_debug_proto_enumTypes[1]
}

func (x DebugTestProcess_Test) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DebugTestProcess_Test) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DebugTestProcess_Test(num)
	return nil
}

// Deprecated: Use DebugTestProcess_Test.Descriptor instead.
func (DebugTestProcess_Test) EnumDescriptor() ([]byte, []int) {
	return file_debug_proto_rawDescGZIP(), []int{10, 0}
}

type DebugEndGame_EndResult int32

const (
	DebugEndGame_Surrender      DebugEndGame_EndResult = 1 // Default if nothing is set. The current player admits defeat.
	DebugEndGame_DeclareVictory DebugEndGame_EndResult = 2
)

// Enum value maps for DebugEndGame_EndResult.
var (
	DebugEndGame_EndResult_name = map[int32]string{
		1: "Surrender",
		2: "DeclareVictory",
	}
	DebugEndGame_EndResult_value = map[string]int32{
		"Surrender":      1,
		"DeclareVictory": 2,
	}
)

func (x DebugEndGame_EndResult) Enum() *DebugEndGame_EndResult {
	p := new(DebugEndGame_EndResult)
	*p = x
	return p
}

func (x DebugEndGame_EndResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DebugEndGame_EndResult) Descriptor() protoreflect.EnumDescriptor {
	return file_debug_proto_enumTypes[2].Descriptor()
}

func (DebugEndGame_EndResult) Type() protoreflect.EnumType {
	return &file_debug_proto_enumTypes[2]
}

func (x DebugEndGame_EndResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DebugEndGame_EndResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DebugEndGame_EndResult(num)
	return nil
}

// Deprecated: Use DebugEndGame_EndResult.Descriptor instead.
func (DebugEndGame_EndResult) EnumDescriptor() ([]byte, []int) {
	return file_debug_proto_rawDescGZIP(), []int{12, 0}
}

type DebugSetUnitValue_UnitValue int32

const (
	DebugSetUnitValue_Energy  DebugSetUnitValue_UnitValue = 1
	DebugSetUnitValue_Life    DebugSetUnitValue_UnitValue = 2
	DebugSetUnitValue_Shields DebugSetUnitValue_UnitValue = 3
)

// Enum value maps for DebugSetUnitValue_UnitValue.
var (
	DebugSetUnitValue_UnitValue_name = map[int32]string{
		1: "Energy",
		2: "Life",
		3: "Shields",
	}
	DebugSetUnitValue_UnitValue_value = map[string]int32{
		"Energy":  1,
		"Life":    2,
		"Shields": 3,
	}
)

func (x DebugSetUnitValue_UnitValue) Enum() *DebugSetUnitValue_UnitValue {
	p := new(DebugSetUnitValue_UnitValue)
	*p = x
	return p
}

func (x DebugSetUnitValue_UnitValue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DebugSetUnitValue_UnitValue) Descriptor() protoreflect.EnumDescriptor {
	return file_debug_proto_enumTypes[3].Descriptor()
}

func (DebugSetUnitValue_UnitValue) Type() protoreflect.EnumType {
	return &file_debug_proto_enumTypes[3]
}

func (x DebugSetUnitValue_UnitValue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DebugSetUnitValue_UnitValue) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DebugSetUnitValue_UnitValue(num)
	return nil
}

// Deprecated: Use DebugSetUnitValue_UnitValue.Descriptor instead.
func (DebugSetUnitValue_UnitValue) EnumDescriptor() ([]byte, []int) {
	return file_debug_proto_rawDescGZIP(), []int{13, 0}
}

// Issue various useful commands to the game engine.
type DebugCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Command:
	//	*DebugCommand_Draw
	//	*DebugCommand_GameState
	//	*DebugCommand_CreateUnit
	//	*DebugCommand_KillUnit
	//	*DebugCommand_TestProcess
	//	*DebugCommand_Score
	//	*DebugCommand_EndGame
	//	*DebugCommand_UnitValue
	Command isDebugCommand_Command `protobuf_oneof:"command"`
}

func (x *DebugCommand) Reset() {
	*x = DebugCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debug_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugCommand) ProtoMessage() {}

func (x *DebugCommand) ProtoReflect() protoreflect.Message {
	mi := &file_debug_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugCommand.ProtoReflect.Descriptor instead.
func (*DebugCommand) Descriptor() ([]byte, []int) {
	return file_debug_proto_rawDescGZIP(), []int{0}
}

func (m *DebugCommand) GetCommand() isDebugCommand_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (x *DebugCommand) GetDraw() *DebugDraw {
	if x, ok := x.GetCommand().(*DebugCommand_Draw); ok {
		return x.Draw
	}
	return nil
}

func (x *DebugCommand) GetGameState() DebugGameState {
	if x, ok := x.GetCommand().(*DebugCommand_GameState); ok {
		return x.GameState
	}
	return DebugGameState_show_map
}

func (x *DebugCommand) GetCreateUnit() *DebugCreateUnit {
	if x, ok := x.GetCommand().(*DebugCommand_CreateUnit); ok {
		return x.CreateUnit
	}
	return nil
}

func (x *DebugCommand) GetKillUnit() *DebugKillUnit {
	if x, ok := x.GetCommand().(*DebugCommand_KillUnit); ok {
		return x.KillUnit
	}
	return nil
}

func (x *DebugCommand) GetTestProcess() *DebugTestProcess {
	if x, ok := x.GetCommand().(*DebugCommand_TestProcess); ok {
		return x.TestProcess
	}
	return nil
}

func (x *DebugCommand) GetScore() *DebugSetScore {
	if x, ok := x.GetCommand().(*DebugCommand_Score); ok {
		return x.Score
	}
	return nil
}

func (x *DebugCommand) GetEndGame() *DebugEndGame {
	if x, ok := x.GetCommand().(*DebugCommand_EndGame); ok {
		return x.EndGame
	}
	return nil
}

func (x *DebugCommand) GetUnitValue() *DebugSetUnitValue {
	if x, ok := x.GetCommand().(*DebugCommand_UnitValue); ok {
		return x.UnitValue
	}
	return nil
}

type isDebugCommand_Command interface {
	isDebugCommand_Command()
}

type DebugCommand_Draw struct {
	Draw *DebugDraw `protobuf:"bytes,1,opt,name=draw,oneof"`
}

type DebugCommand_GameState struct {
	GameState DebugGameState `protobuf:"varint,2,opt,name=game_state,json=gameState,enum=sc2proto.DebugGameState,oneof"`
}

type DebugCommand_CreateUnit struct {
	CreateUnit *DebugCreateUnit `protobuf:"bytes,3,opt,name=create_unit,json=createUnit,oneof"`
}

type DebugCommand_KillUnit struct {
	KillUnit *DebugKillUnit `protobuf:"bytes,4,opt,name=kill_unit,json=killUnit,oneof"`
}

type DebugCommand_TestProcess struct {
	TestProcess *DebugTestProcess `protobuf:"bytes,5,opt,name=test_process,json=testProcess,oneof"`
}

type DebugCommand_Score struct {
	Score *DebugSetScore `protobuf:"bytes,6,opt,name=score,oneof"` // Useful only for single-player "curriculum" maps.
}

type DebugCommand_EndGame struct {
	EndGame *DebugEndGame `protobuf:"bytes,7,opt,name=end_game,json=endGame,oneof"`
}

type DebugCommand_UnitValue struct {
	UnitValue *DebugSetUnitValue `protobuf:"bytes,8,opt,name=unit_value,json=unitValue,oneof"`
}

func (*DebugCommand_Draw) isDebugCommand_Command() {}

func (*DebugCommand_GameState) isDebugCommand_Command() {}

func (*DebugCommand_CreateUnit) isDebugCommand_Command() {}

func (*DebugCommand_KillUnit) isDebugCommand_Command() {}

func (*DebugCommand_TestProcess) isDebugCommand_Command() {}

func (*DebugCommand_Score) isDebugCommand_Command() {}

func (*DebugCommand_EndGame) isDebugCommand_Command() {}

func (*DebugCommand_UnitValue) isDebugCommand_Command() {}

type DebugDraw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text    []*DebugText   `protobuf:"bytes,1,rep,name=text" json:"text,omitempty"`
	Lines   []*DebugLine   `protobuf:"bytes,2,rep,name=lines" json:"lines,omitempty"`
	Boxes   []*DebugBox    `protobuf:"bytes,3,rep,name=boxes" json:"boxes,omitempty"`
	Spheres []*DebugSphere `protobuf:"bytes,4,rep,name=spheres" json:"spheres,omitempty"`
}

func (x *DebugDraw) Reset() {
	*x = DebugDraw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debug_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugDraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugDraw) ProtoMessage() {}

func (x *DebugDraw) ProtoReflect() protoreflect.Message {
	mi := &file_debug_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugDraw.ProtoReflect.Descriptor instead.
func (*DebugDraw) Descriptor() ([]byte, []int) {
	return file_debug_proto_rawDescGZIP(), []int{1}
}

func (x *DebugDraw) GetText() []*DebugText {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *DebugDraw) GetLines() []*DebugLine {
	if x != nil {
		return x.Lines
	}
	return nil
}

func (x *DebugDraw) GetBoxes() []*DebugBox {
	if x != nil {
		return x.Boxes
	}
	return nil
}

func (x *DebugDraw) GetSpheres() []*DebugSphere {
	if x != nil {
		return x.Spheres
	}
	return nil
}

type Line struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P0 *Point `protobuf:"bytes,1,opt,name=p0" json:"p0,omitempty"`
	P1 *Point `protobuf:"bytes,2,opt,name=p1" json:"p1,omitempty"`
}

func (x *Line) Reset() {
	*x = Line{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debug_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Line) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Line) ProtoMessage() {}

func (x *Line) ProtoReflect() protoreflect.Message {
	mi := &file_debug_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Line.ProtoReflect.Descriptor instead.
func (*Line) Descriptor() ([]byte, []int) {
	return file_debug_proto_rawDescGZIP(), []int{2}
}

func (x *Line) GetP0() *Point {
	if x != nil {
		return x.P0
	}
	return nil
}

func (x *Line) GetP1() *Point {
	if x != nil {
		return x.P1
	}
	return nil
}

type Color struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	R *uint32 `protobuf:"varint,1,opt,name=r" json:"r,omitempty"`
	G *uint32 `protobuf:"varint,2,opt,name=g" json:"g,omitempty"`
	B *uint32 `protobuf:"varint,3,opt,name=b" json:"b,omitempty"`
}

func (x *Color) Reset() {
	*x = Color{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debug_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Color) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Color) ProtoMessage() {}

func (x *Color) ProtoReflect() protoreflect.Message {
	mi := &file_debug_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Color.ProtoReflect.Descriptor instead.
func (*Color) Descriptor() ([]byte, []int) {
	return file_debug_proto_rawDescGZIP(), []int{3}
}

func (x *Color) GetR() uint32 {
	if x != nil && x.R != nil {
		return *x.R
	}
	return 0
}

func (x *Color) GetG() uint32 {
	if x != nil && x.G != nil {
		return *x.G
	}
	return 0
}

func (x *Color) GetB() uint32 {
	if x != nil && x.B != nil {
		return *x.B
	}
	return 0
}

// Display debug text on screen.
type DebugText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Color      *Color  `protobuf:"bytes,1,opt,name=color" json:"color,omitempty"`
	Text       *string `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`                               // Text to display.
	VirtualPos *Point  `protobuf:"bytes,3,opt,name=virtual_pos,json=virtualPos" json:"virtual_pos,omitempty"` // Virtualized position in 2D (the screen is 0..1, 0..1 for any resolution).
	WorldPos   *Point  `protobuf:"bytes,4,opt,name=world_pos,json=worldPos" json:"world_pos,omitempty"`       // Position in the world.
	Size       *uint32 `protobuf:"varint,5,opt,name=size" json:"size,omitempty"`                              // Pixel height of the text. Defaults to 8px.
}

func (x *DebugText) Reset() {
	*x = DebugText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debug_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugText) ProtoMessage() {}

func (x *DebugText) ProtoReflect() protoreflect.Message {
	mi := &file_debug_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugText.ProtoReflect.Descriptor instead.
func (*DebugText) Descriptor() ([]byte, []int) {
	return file_debug_proto_rawDescGZIP(), []int{4}
}

func (x *DebugText) GetColor() *Color {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *DebugText) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *DebugText) GetVirtualPos() *Point {
	if x != nil {
		return x.VirtualPos
	}
	return nil
}

func (x *DebugText) GetWorldPos() *Point {
	if x != nil {
		return x.WorldPos
	}
	return nil
}

func (x *DebugText) GetSize() uint32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

// Display debug lines on screen.
type DebugLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Color *Color `protobuf:"bytes,1,opt,name=color" json:"color,omitempty"`
	Line  *Line  `protobuf:"bytes,2,opt,name=line" json:"line,omitempty"` // World space line.
}

func (x *DebugLine) Reset() {
	*x = DebugLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debug_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugLine) ProtoMessage() {}

func (x *DebugLine) ProtoReflect() protoreflect.Message {
	mi := &file_debug_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugLine.ProtoReflect.Descriptor instead.
func (*DebugLine) Descriptor() ([]byte, []int) {
	return file_debug_proto_rawDescGZIP(), []int{5}
}

func (x *DebugLine) GetColor() *Color {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *DebugLine) GetLine() *Line {
	if x != nil {
		return x.Line
	}
	return nil
}

// Display debug boxes on screen.
type DebugBox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Color *Color `protobuf:"bytes,1,opt,name=color" json:"color,omitempty"`
	Min   *Point `protobuf:"bytes,2,opt,name=min" json:"min,omitempty"`
	Max   *Point `protobuf:"bytes,3,opt,name=max" json:"max,omitempty"`
}

func (x *DebugBox) Reset() {
	*x = DebugBox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debug_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugBox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugBox) ProtoMessage() {}

func (x *DebugBox) ProtoReflect() protoreflect.Message {
	mi := &file_debug_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugBox.ProtoReflect.Descriptor instead.
func (*DebugBox) Descriptor() ([]byte, []int) {
	return file_debug_proto_rawDescGZIP(), []int{6}
}

func (x *DebugBox) GetColor() *Color {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *DebugBox) GetMin() *Point {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *DebugBox) GetMax() *Point {
	if x != nil {
		return x.Max
	}
	return nil
}

// Display debug spheres on screen.
type DebugSphere struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Color *Color   `protobuf:"bytes,1,opt,name=color" json:"color,omitempty"`
	P     *Point   `protobuf:"bytes,2,opt,name=p" json:"p,omitempty"`
	R     *float32 `protobuf:"fixed32,3,opt,name=r" json:"r,omitempty"`
}

func (x *DebugSphere) Reset() {
	*x = DebugSphere{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debug_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugSphere) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugSphere) ProtoMessage() {}

func (x *DebugSphere) ProtoReflect() protoreflect.Message {
	mi := &file_debug_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugSphere.ProtoReflect.Descriptor instead.
func (*DebugSphere) Descriptor() ([]byte, []int) {
	return file_debug_proto_rawDescGZIP(), []int{7}
}

func (x *DebugSphere) GetColor() *Color {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *DebugSphere) GetP() *Point {
	if x != nil {
		return x.P
	}
	return nil
}

func (x *DebugSphere) GetR() float32 {
	if x != nil && x.R != nil {
		return *x.R
	}
	return 0
}

type DebugCreateUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnitType *uint32  `protobuf:"varint,1,opt,name=unit_type,json=unitType" json:"unit_type,omitempty"`
	Owner    *int32   `protobuf:"varint,2,opt,name=owner" json:"owner,omitempty"`
	Pos      *Point2D `protobuf:"bytes,3,opt,name=pos" json:"pos,omitempty"`
	Quantity *uint32  `protobuf:"varint,4,opt,name=quantity" json:"quantity,omitempty"`
}

func (x *DebugCreateUnit) Reset() {
	*x = DebugCreateUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debug_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugCreateUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugCreateUnit) ProtoMessage() {}

func (x *DebugCreateUnit) ProtoReflect() protoreflect.Message {
	mi := &file_debug_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugCreateUnit.ProtoReflect.Descriptor instead.
func (*DebugCreateUnit) Descriptor() ([]byte, []int) {
	return file_debug_proto_rawDescGZIP(), []int{8}
}

func (x *DebugCreateUnit) GetUnitType() uint32 {
	if x != nil && x.UnitType != nil {
		return *x.UnitType
	}
	return 0
}

func (x *DebugCreateUnit) GetOwner() int32 {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return 0
}

func (x *DebugCreateUnit) GetPos() *Point2D {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *DebugCreateUnit) GetQuantity() uint32 {
	if x != nil && x.Quantity != nil {
		return *x.Quantity
	}
	return 0
}

type DebugKillUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag []uint64 `protobuf:"varint,1,rep,name=tag" json:"tag,omitempty"`
}

func (x *DebugKillUnit) Reset() {
	*x = DebugKillUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debug_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugKillUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugKillUnit) ProtoMessage() {}

func (x *DebugKillUnit) ProtoReflect() protoreflect.Message {
	mi := &file_debug_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugKillUnit.ProtoReflect.Descriptor instead.
func (*DebugKillUnit) Descriptor() ([]byte, []int) {
	return file_debug_proto_rawDescGZIP(), []int{9}
}

func (x *DebugKillUnit) GetTag() []uint64 {
	if x != nil {
		return x.Tag
	}
	return nil
}

type DebugTestProcess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Test    *DebugTestProcess_Test `protobuf:"varint,1,opt,name=test,enum=sc2proto.DebugTestProcess_Test" json:"test,omitempty"`
	DelayMs *int32                 `protobuf:"varint,2,opt,name=delay_ms,json=delayMs" json:"delay_ms,omitempty"`
}

func (x *DebugTestProcess) Reset() {
	*x = DebugTestProcess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debug_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugTestProcess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugTestProcess) ProtoMessage() {}

func (x *DebugTestProcess) ProtoReflect() protoreflect.Message {
	mi := &file_debug_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugTestProcess.ProtoReflect.Descriptor instead.
func (*DebugTestProcess) Descriptor() ([]byte, []int) {
	return file_debug_proto_rawDescGZIP(), []int{10}
}

func (x *DebugTestProcess) GetTest() DebugTestProcess_Test {
	if x != nil && x.Test != nil {
		return *x.Test
	}
	return DebugTestProcess_hang
}

func (x *DebugTestProcess) GetDelayMs() int32 {
	if x != nil && x.DelayMs != nil {
		return *x.DelayMs
	}
	return 0
}

type DebugSetScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score *float32 `protobuf:"fixed32,1,opt,name=score" json:"score,omitempty"`
}

func (x *DebugSetScore) Reset() {
	*x = DebugSetScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debug_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugSetScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugSetScore) ProtoMessage() {}

func (x *DebugSetScore) ProtoReflect() protoreflect.Message {
	mi := &file_debug_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugSetScore.ProtoReflect.Descriptor instead.
func (*DebugSetScore) Descriptor() ([]byte, []int) {
	return file_debug_proto_rawDescGZIP(), []int{11}
}

func (x *DebugSetScore) GetScore() float32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

type DebugEndGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndResult *DebugEndGame_EndResult `protobuf:"varint,1,opt,name=end_result,json=endResult,enum=sc2proto.DebugEndGame_EndResult" json:"end_result,omitempty"`
}

func (x *DebugEndGame) Reset() {
	*x = DebugEndGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debug_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugEndGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugEndGame) ProtoMessage() {}

func (x *DebugEndGame) ProtoReflect() protoreflect.Message {
	mi := &file_debug_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugEndGame.ProtoReflect.Descriptor instead.
func (*DebugEndGame) Descriptor() ([]byte, []int) {
	return file_debug_proto_rawDescGZIP(), []int{12}
}

func (x *DebugEndGame) GetEndResult() DebugEndGame_EndResult {
	if x != nil && x.EndResult != nil {
		return *x.EndResult
	}
	return DebugEndGame_Surrender
}

type DebugSetUnitValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnitValue *DebugSetUnitValue_UnitValue `protobuf:"varint,1,opt,name=unit_value,json=unitValue,enum=sc2proto.DebugSetUnitValue_UnitValue" json:"unit_value,omitempty"`
	Value     *float32                     `protobuf:"fixed32,2,opt,name=value" json:"value,omitempty"`
	UnitTag   *uint64                      `protobuf:"varint,3,opt,name=unit_tag,json=unitTag" json:"unit_tag,omitempty"`
}

func (x *DebugSetUnitValue) Reset() {
	*x = DebugSetUnitValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debug_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugSetUnitValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugSetUnitValue) ProtoMessage() {}

func (x *DebugSetUnitValue) ProtoReflect() protoreflect.Message {
	mi := &file_debug_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugSetUnitValue.ProtoReflect.Descriptor instead.
func (*DebugSetUnitValue) Descriptor() ([]byte, []int) {
	return file_debug_proto_rawDescGZIP(), []int{13}
}

func (x *DebugSetUnitValue) GetUnitValue() DebugSetUnitValue_UnitValue {
	if x != nil && x.UnitValue != nil {
		return *x.UnitValue
	}
	return DebugSetUnitValue_Energy
}

func (x *DebugSetUnitValue) GetValue() float32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *DebugSetUnitValue) GetUnitTag() uint64 {
	if x != nil && x.UnitTag != nil {
		return *x.UnitTag
	}
	return 0
}

var File_debug_proto protoreflect.FileDescriptor

var file_debug_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73,
	0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xda, 0x03, 0x0a, 0x0c, 0x44, 0x65, 0x62, 0x75, 0x67, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x72, 0x61, 0x77, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x44, 0x72, 0x61, 0x77, 0x48, 0x00, 0x52, 0x04, 0x64, 0x72, 0x61,
	0x77, 0x12, 0x39, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4b, 0x69,
	0x6c, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x08, 0x6b, 0x69, 0x6c, 0x6c, 0x55, 0x6e,
	0x69, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x54, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x53, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x48, 0x00, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x45, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x00,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x53, 0x65,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x09, 0x75, 0x6e,
	0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x22, 0xba, 0x01, 0x0a, 0x09, 0x44, 0x65, 0x62, 0x75, 0x67, 0x44, 0x72, 0x61, 0x77,
	0x12, 0x27, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x54,
	0x65, 0x78, 0x74, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x05, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x62, 0x6f, 0x78, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x42, 0x6f, 0x78, 0x52, 0x05, 0x62, 0x6f, 0x78, 0x65, 0x73, 0x12, 0x2f,
	0x0a, 0x07, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x52, 0x07, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x73, 0x22,
	0x48, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x02, 0x70, 0x30, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x02, 0x70, 0x30, 0x12, 0x1f, 0x0a, 0x02, 0x70, 0x31, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x02, 0x70, 0x31, 0x22, 0x31, 0x0a, 0x05, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x72,
	0x12, 0x0c, 0x0a, 0x01, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x67, 0x12, 0x0c,
	0x0a, 0x01, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x62, 0x22, 0xba, 0x01, 0x0a,
	0x09, 0x44, 0x65, 0x62, 0x75, 0x67, 0x54, 0x65, 0x78, 0x74, 0x12, 0x25, 0x0a, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x63, 0x32, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x30, 0x0a, 0x0b, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x5f, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x63, 0x32,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0a, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x12, 0x2c, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6c, 0x64,
	0x5f, 0x70, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x63, 0x32,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x77, 0x6f, 0x72,
	0x6c, 0x64, 0x50, 0x6f, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x56, 0x0a, 0x09, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x22, 0x0a,
	0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x63,
	0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x6e,
	0x65, 0x22, 0x77, 0x0a, 0x08, 0x44, 0x65, 0x62, 0x75, 0x67, 0x42, 0x6f, 0x78, 0x12, 0x25, 0x0a,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73,
	0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x22, 0x61, 0x0a, 0x0b, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x1d, 0x0a, 0x01, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x63,
	0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x01, 0x70, 0x12,
	0x0c, 0x0a, 0x01, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x72, 0x22, 0x85, 0x01,
	0x0a, 0x0f, 0x44, 0x65, 0x62, 0x75, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x32, 0x44, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x21, 0x0a, 0x0d, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4b, 0x69,
	0x6c, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x89, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x54, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x33, 0x0a,
	0x04, 0x74, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x73, 0x63,
	0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x54, 0x65, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x04, 0x74, 0x65,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x73, 0x22, 0x25, 0x0a,
	0x04, 0x54, 0x65, 0x73, 0x74, 0x12, 0x08, 0x0a, 0x04, 0x68, 0x61, 0x6e, 0x67, 0x10, 0x01, 0x12,
	0x09, 0x0a, 0x05, 0x63, 0x72, 0x61, 0x73, 0x68, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x65, 0x78,
	0x69, 0x74, 0x10, 0x03, 0x22, 0x25, 0x0a, 0x0d, 0x44, 0x65, 0x62, 0x75, 0x67, 0x53, 0x65, 0x74,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x7f, 0x0a, 0x0c, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x45, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x65,
	0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x45, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x2e, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x2e, 0x0a, 0x09,
	0x45, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x65, 0x63, 0x6c,
	0x61, 0x72, 0x65, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x10, 0x02, 0x22, 0xba, 0x01, 0x0a,
	0x11, 0x44, 0x65, 0x62, 0x75, 0x67, 0x53, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x53, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x75,
	0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x75, 0x6e, 0x69, 0x74, 0x54, 0x61, 0x67, 0x22, 0x2e, 0x0a, 0x09, 0x55, 0x6e, 0x69,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x69, 0x66, 0x65, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x10, 0x03, 0x2a, 0xb2, 0x01, 0x0a, 0x0e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0c, 0x0a, 0x08,
	0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6d, 0x61, 0x70, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x10, 0x02, 0x12, 0x08, 0x0a,
	0x04, 0x66, 0x6f, 0x6f, 0x64, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x65, 0x10,
	0x04, 0x12, 0x11, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x67, 0x6f, 0x64, 0x10, 0x06, 0x12, 0x0c, 0x0a,
	0x08, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x67,
	0x61, 0x73, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e,
	0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x10,
	0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x10, 0x0b, 0x12, 0x0e,
	0x0a, 0x0a, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x10, 0x0c, 0x42, 0x2c,
	0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x69, 0x6e,
	0x77, 0x75, 0x7a, 0x68, 0x61, 0x6f, 0x2f, 0x73, 0x63, 0x32, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_debug_proto_rawDescOnce sync.Once
	file_debug_proto_rawDescData = file_debug_proto_rawDesc
)

func file_debug_proto_rawDescGZIP() []byte {
	file_debug_proto_rawDescOnce.Do(func() {
		file_debug_proto_rawDescData = protoimpl.X.CompressGZIP(file_debug_proto_rawDescData)
	})
	return file_debug_proto_rawDescData
}

var file_debug_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_debug_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_debug_proto_goTypes = []interface{}{
	(DebugGameState)(0),              // 0: sc2proto.DebugGameState
	(DebugTestProcess_Test)(0),       // 1: sc2proto.DebugTestProcess.Test
	(DebugEndGame_EndResult)(0),      // 2: sc2proto.DebugEndGame.EndResult
	(DebugSetUnitValue_UnitValue)(0), // 3: sc2proto.DebugSetUnitValue.UnitValue
	(*DebugCommand)(nil),             // 4: sc2proto.DebugCommand
	(*DebugDraw)(nil),                // 5: sc2proto.DebugDraw
	(*Line)(nil),                     // 6: sc2proto.Line
	(*Color)(nil),                    // 7: sc2proto.Color
	(*DebugText)(nil),                // 8: sc2proto.DebugText
	(*DebugLine)(nil),                // 9: sc2proto.DebugLine
	(*DebugBox)(nil),                 // 10: sc2proto.DebugBox
	(*DebugSphere)(nil),              // 11: sc2proto.DebugSphere
	(*DebugCreateUnit)(nil),          // 12: sc2proto.DebugCreateUnit
	(*DebugKillUnit)(nil),            // 13: sc2proto.DebugKillUnit
	(*DebugTestProcess)(nil),         // 14: sc2proto.DebugTestProcess
	(*DebugSetScore)(nil),            // 15: sc2proto.DebugSetScore
	(*DebugEndGame)(nil),             // 16: sc2proto.DebugEndGame
	(*DebugSetUnitValue)(nil),        // 17: sc2proto.DebugSetUnitValue
	(*Point)(nil),                    // 18: sc2proto.Point
	(*Point2D)(nil),                  // 19: sc2proto.Point2D
}
var file_debug_proto_depIdxs = []int32{
	5,  // 0: sc2proto.DebugCommand.draw:type_name -> sc2proto.DebugDraw
	0,  // 1: sc2proto.DebugCommand.game_state:type_name -> sc2proto.DebugGameState
	12, // 2: sc2proto.DebugCommand.create_unit:type_name -> sc2proto.DebugCreateUnit
	13, // 3: sc2proto.DebugCommand.kill_unit:type_name -> sc2proto.DebugKillUnit
	14, // 4: sc2proto.DebugCommand.test_process:type_name -> sc2proto.DebugTestProcess
	15, // 5: sc2proto.DebugCommand.score:type_name -> sc2proto.DebugSetScore
	16, // 6: sc2proto.DebugCommand.end_game:type_name -> sc2proto.DebugEndGame
	17, // 7: sc2proto.DebugCommand.unit_value:type_name -> sc2proto.DebugSetUnitValue
	8,  // 8: sc2proto.DebugDraw.text:type_name -> sc2proto.DebugText
	9,  // 9: sc2proto.DebugDraw.lines:type_name -> sc2proto.DebugLine
	10, // 10: sc2proto.DebugDraw.boxes:type_name -> sc2proto.DebugBox
	11, // 11: sc2proto.DebugDraw.spheres:type_name -> sc2proto.DebugSphere
	18, // 12: sc2proto.Line.p0:type_name -> sc2proto.Point
	18, // 13: sc2proto.Line.p1:type_name -> sc2proto.Point
	7,  // 14: sc2proto.DebugText.color:type_name -> sc2proto.Color
	18, // 15: sc2proto.DebugText.virtual_pos:type_name -> sc2proto.Point
	18, // 16: sc2proto.DebugText.world_pos:type_name -> sc2proto.Point
	7,  // 17: sc2proto.DebugLine.color:type_name -> sc2proto.Color
	6,  // 18: sc2proto.DebugLine.line:type_name -> sc2proto.Line
	7,  // 19: sc2proto.DebugBox.color:type_name -> sc2proto.Color
	18, // 20: sc2proto.DebugBox.min:type_name -> sc2proto.Point
	18, // 21: sc2proto.DebugBox.max:type_name -> sc2proto.Point
	7,  // 22: sc2proto.DebugSphere.color:type_name -> sc2proto.Color
	18, // 23: sc2proto.DebugSphere.p:type_name -> sc2proto.Point
	19, // 24: sc2proto.DebugCreateUnit.pos:type_name -> sc2proto.Point2D
	1,  // 25: sc2proto.DebugTestProcess.test:type_name -> sc2proto.DebugTestProcess.Test
	2,  // 26: sc2proto.DebugEndGame.end_result:type_name -> sc2proto.DebugEndGame.EndResult
	3,  // 27: sc2proto.DebugSetUnitValue.unit_value:type_name -> sc2proto.DebugSetUnitValue.UnitValue
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_debug_proto_init() }
func file_debug_proto_init() {
	if File_debug_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_debug_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debug_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugDraw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debug_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Line); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debug_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Color); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debug_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debug_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debug_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugBox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debug_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugSphere); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debug_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugCreateUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debug_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugKillUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debug_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugTestProcess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debug_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugSetScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debug_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugEndGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debug_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugSetUnitValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_debug_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*DebugCommand_Draw)(nil),
		(*DebugCommand_GameState)(nil),
		(*DebugCommand_CreateUnit)(nil),
		(*DebugCommand_KillUnit)(nil),
		(*DebugCommand_TestProcess)(nil),
		(*DebugCommand_Score)(nil),
		(*DebugCommand_EndGame)(nil),
		(*DebugCommand_UnitValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_debug_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_debug_proto_goTypes,
		DependencyIndexes: file_debug_proto_depIdxs,
		EnumInfos:         file_debug_proto_enumTypes,
		MessageInfos:      file_debug_proto_msgTypes,
	}.Build()
	File_debug_proto = out.File
	file_debug_proto_rawDesc = nil
	file_debug_proto_goTypes = nil
	file_debug_proto_depIdxs = nil
}
