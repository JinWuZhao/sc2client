// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.0
// source: data.proto

package sc2proto

import (
	"reflect"
	"sync"

	"google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Attribute int32

const (
	Attribute_Light      Attribute = 1
	Attribute_Armored    Attribute = 2
	Attribute_Biological Attribute = 3
	Attribute_Mechanical Attribute = 4
	Attribute_Robotic    Attribute = 5
	Attribute_Psionic    Attribute = 6
	Attribute_Massive    Attribute = 7
	Attribute_Structure  Attribute = 8
	Attribute_Hover      Attribute = 9
	Attribute_Heroic     Attribute = 10
	Attribute_Summoned   Attribute = 11
)

// Enum value maps for Attribute.
var (
	Attribute_name = map[int32]string{
		1:  "Light",
		2:  "Armored",
		3:  "Biological",
		4:  "Mechanical",
		5:  "Robotic",
		6:  "Psionic",
		7:  "Massive",
		8:  "Structure",
		9:  "Hover",
		10: "Heroic",
		11: "Summoned",
	}
	Attribute_value = map[string]int32{
		"Light":      1,
		"Armored":    2,
		"Biological": 3,
		"Mechanical": 4,
		"Robotic":    5,
		"Psionic":    6,
		"Massive":    7,
		"Structure":  8,
		"Hover":      9,
		"Heroic":     10,
		"Summoned":   11,
	}
)

func (x Attribute) Enum() *Attribute {
	p := new(Attribute)
	*p = x
	return p
}

func (x Attribute) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Attribute) Descriptor() protoreflect.EnumDescriptor {
	return file_data_proto_enumTypes[0].Descriptor()
}

func (Attribute) Type() protoreflect.EnumType {
	return &file_data_proto_enumTypes[0]
}

func (x Attribute) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Attribute) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Attribute(num)
	return nil
}

// Deprecated: Use Attribute.Descriptor instead.
func (Attribute) EnumDescriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{0}
}

type AbilityData_Target int32

const (
	AbilityData_None        AbilityData_Target = 1 // Does not require a target.
	AbilityData_Point       AbilityData_Target = 2 // Requires a target position.
	AbilityData_Unit        AbilityData_Target = 3 // Requires a unit to target. Given by position using feature layers.
	AbilityData_PointOrUnit AbilityData_Target = 4 // Requires either a target point or target unit.
	AbilityData_PointOrNone AbilityData_Target = 5 // Requires either a target point or no target. (eg. building add-ons)
)

// Enum value maps for AbilityData_Target.
var (
	AbilityData_Target_name = map[int32]string{
		1: "None",
		2: "Point",
		3: "Unit",
		4: "PointOrUnit",
		5: "PointOrNone",
	}
	AbilityData_Target_value = map[string]int32{
		"None":        1,
		"Point":       2,
		"Unit":        3,
		"PointOrUnit": 4,
		"PointOrNone": 5,
	}
)

func (x AbilityData_Target) Enum() *AbilityData_Target {
	p := new(AbilityData_Target)
	*p = x
	return p
}

func (x AbilityData_Target) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AbilityData_Target) Descriptor() protoreflect.EnumDescriptor {
	return file_data_proto_enumTypes[1].Descriptor()
}

func (AbilityData_Target) Type() protoreflect.EnumType {
	return &file_data_proto_enumTypes[1]
}

func (x AbilityData_Target) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AbilityData_Target) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AbilityData_Target(num)
	return nil
}

// Deprecated: Use AbilityData_Target.Descriptor instead.
func (AbilityData_Target) EnumDescriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{0, 0}
}

type Weapon_TargetType int32

const (
	Weapon_Ground Weapon_TargetType = 1
	Weapon_Air    Weapon_TargetType = 2
	Weapon_Any    Weapon_TargetType = 3
)

// Enum value maps for Weapon_TargetType.
var (
	Weapon_TargetType_name = map[int32]string{
		1: "Ground",
		2: "Air",
		3: "Any",
	}
	Weapon_TargetType_value = map[string]int32{
		"Ground": 1,
		"Air":    2,
		"Any":    3,
	}
)

func (x Weapon_TargetType) Enum() *Weapon_TargetType {
	p := new(Weapon_TargetType)
	*p = x
	return p
}

func (x Weapon_TargetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Weapon_TargetType) Descriptor() protoreflect.EnumDescriptor {
	return file_data_proto_enumTypes[2].Descriptor()
}

func (Weapon_TargetType) Type() protoreflect.EnumType {
	return &file_data_proto_enumTypes[2]
}

func (x Weapon_TargetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Weapon_TargetType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Weapon_TargetType(num)
	return nil
}

// Deprecated: Use Weapon_TargetType.Descriptor instead.
func (Weapon_TargetType) EnumDescriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{2, 0}
}

// May not relevant: queueable (everything is queueable).
// May not be important: AbilSetId - marine stim, marauder stim.
// Stuff omitted: transient.
// Stuff that may be important: cost, range, Alignment, targetfilters.
type AbilityData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AbilityId          *uint32             `protobuf:"varint,1,opt,name=ability_id,json=abilityId" json:"ability_id,omitempty"`                               // Stable ID.
	LinkName           *string             `protobuf:"bytes,2,opt,name=link_name,json=linkName" json:"link_name,omitempty"`                                   // Catalog name of the ability.
	LinkIndex          *uint32             `protobuf:"varint,3,opt,name=link_index,json=linkIndex" json:"link_index,omitempty"`                               // Catalog index of the ability.
	ButtonName         *string             `protobuf:"bytes,4,opt,name=button_name,json=buttonName" json:"button_name,omitempty"`                             // Name used for the command card. May not always be set.
	FriendlyName       *string             `protobuf:"bytes,5,opt,name=friendly_name,json=friendlyName" json:"friendly_name,omitempty"`                       // A human friendly name when the button name or link name isn't descriptive.
	Hotkey             *string             `protobuf:"bytes,6,opt,name=hotkey" json:"hotkey,omitempty"`                                                       // Hotkey. May not always be set.
	RemapsToAbilityId  *uint32             `protobuf:"varint,7,opt,name=remaps_to_ability_id,json=remapsToAbilityId" json:"remaps_to_ability_id,omitempty"`   // This ability id may be represented by the given more generic id.
	Available          *bool               `protobuf:"varint,8,opt,name=available" json:"available,omitempty"`                                                // If true, the ability may be used by this set of mods/map.
	Target             *AbilityData_Target `protobuf:"varint,9,opt,name=target,enum=sc2proto.AbilityData_Target" json:"target,omitempty"`                     // Determines if a point is optional or required.
	AllowMinimap       *bool               `protobuf:"varint,10,opt,name=allow_minimap,json=allowMinimap" json:"allow_minimap,omitempty"`                     // Can be cast in the minimap.
	AllowAutocast      *bool               `protobuf:"varint,11,opt,name=allow_autocast,json=allowAutocast" json:"allow_autocast,omitempty"`                  // Autocast can be set.
	IsBuilding         *bool               `protobuf:"varint,12,opt,name=is_building,json=isBuilding" json:"is_building,omitempty"`                           // Requires placement to construct a building.
	FootprintRadius    *float32            `protobuf:"fixed32,13,opt,name=footprint_radius,json=footprintRadius" json:"footprint_radius,omitempty"`           // Estimation of the footprint size. Need a better footprint.
	IsInstantPlacement *bool               `protobuf:"varint,14,opt,name=is_instant_placement,json=isInstantPlacement" json:"is_instant_placement,omitempty"` // Placement next to an existing structure, e.g., an add-on like a Tech Lab.
	CastRange          *float32            `protobuf:"fixed32,15,opt,name=cast_range,json=castRange" json:"cast_range,omitempty"`                             // Range unit can cast ability without needing to approach target.
}

func (x *AbilityData) Reset() {
	*x = AbilityData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbilityData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbilityData) ProtoMessage() {}

func (x *AbilityData) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbilityData.ProtoReflect.Descriptor instead.
func (*AbilityData) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{0}
}

func (x *AbilityData) GetAbilityId() uint32 {
	if x != nil && x.AbilityId != nil {
		return *x.AbilityId
	}
	return 0
}

func (x *AbilityData) GetLinkName() string {
	if x != nil && x.LinkName != nil {
		return *x.LinkName
	}
	return ""
}

func (x *AbilityData) GetLinkIndex() uint32 {
	if x != nil && x.LinkIndex != nil {
		return *x.LinkIndex
	}
	return 0
}

func (x *AbilityData) GetButtonName() string {
	if x != nil && x.ButtonName != nil {
		return *x.ButtonName
	}
	return ""
}

func (x *AbilityData) GetFriendlyName() string {
	if x != nil && x.FriendlyName != nil {
		return *x.FriendlyName
	}
	return ""
}

func (x *AbilityData) GetHotkey() string {
	if x != nil && x.Hotkey != nil {
		return *x.Hotkey
	}
	return ""
}

func (x *AbilityData) GetRemapsToAbilityId() uint32 {
	if x != nil && x.RemapsToAbilityId != nil {
		return *x.RemapsToAbilityId
	}
	return 0
}

func (x *AbilityData) GetAvailable() bool {
	if x != nil && x.Available != nil {
		return *x.Available
	}
	return false
}

func (x *AbilityData) GetTarget() AbilityData_Target {
	if x != nil && x.Target != nil {
		return *x.Target
	}
	return AbilityData_None
}

func (x *AbilityData) GetAllowMinimap() bool {
	if x != nil && x.AllowMinimap != nil {
		return *x.AllowMinimap
	}
	return false
}

func (x *AbilityData) GetAllowAutocast() bool {
	if x != nil && x.AllowAutocast != nil {
		return *x.AllowAutocast
	}
	return false
}

func (x *AbilityData) GetIsBuilding() bool {
	if x != nil && x.IsBuilding != nil {
		return *x.IsBuilding
	}
	return false
}

func (x *AbilityData) GetFootprintRadius() float32 {
	if x != nil && x.FootprintRadius != nil {
		return *x.FootprintRadius
	}
	return 0
}

func (x *AbilityData) GetIsInstantPlacement() bool {
	if x != nil && x.IsInstantPlacement != nil {
		return *x.IsInstantPlacement
	}
	return false
}

func (x *AbilityData) GetCastRange() float32 {
	if x != nil && x.CastRange != nil {
		return *x.CastRange
	}
	return 0
}

type DamageBonus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attribute *Attribute `protobuf:"varint,1,opt,name=attribute,enum=sc2proto.Attribute" json:"attribute,omitempty"`
	Bonus     *float32   `protobuf:"fixed32,2,opt,name=bonus" json:"bonus,omitempty"`
}

func (x *DamageBonus) Reset() {
	*x = DamageBonus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DamageBonus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DamageBonus) ProtoMessage() {}

func (x *DamageBonus) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DamageBonus.ProtoReflect.Descriptor instead.
func (*DamageBonus) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{1}
}

func (x *DamageBonus) GetAttribute() Attribute {
	if x != nil && x.Attribute != nil {
		return *x.Attribute
	}
	return Attribute_Light
}

func (x *DamageBonus) GetBonus() float32 {
	if x != nil && x.Bonus != nil {
		return *x.Bonus
	}
	return 0
}

type Weapon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        *Weapon_TargetType `protobuf:"varint,1,opt,name=type,enum=sc2proto.Weapon_TargetType" json:"type,omitempty"`
	Damage      *float32           `protobuf:"fixed32,2,opt,name=damage" json:"damage,omitempty"`
	DamageBonus []*DamageBonus     `protobuf:"bytes,3,rep,name=damage_bonus,json=damageBonus" json:"damage_bonus,omitempty"`
	Attacks     *uint32            `protobuf:"varint,4,opt,name=attacks" json:"attacks,omitempty"` // Number of hits per attack. (eg. Colossus has 2 beams)
	Range       *float32           `protobuf:"fixed32,5,opt,name=range" json:"range,omitempty"`
	Speed       *float32           `protobuf:"fixed32,6,opt,name=speed" json:"speed,omitempty"` // Time between attacks.
}

func (x *Weapon) Reset() {
	*x = Weapon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Weapon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Weapon) ProtoMessage() {}

func (x *Weapon) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Weapon.ProtoReflect.Descriptor instead.
func (*Weapon) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{2}
}

func (x *Weapon) GetType() Weapon_TargetType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Weapon_Ground
}

func (x *Weapon) GetDamage() float32 {
	if x != nil && x.Damage != nil {
		return *x.Damage
	}
	return 0
}

func (x *Weapon) GetDamageBonus() []*DamageBonus {
	if x != nil {
		return x.DamageBonus
	}
	return nil
}

func (x *Weapon) GetAttacks() uint32 {
	if x != nil && x.Attacks != nil {
		return *x.Attacks
	}
	return 0
}

func (x *Weapon) GetRange() float32 {
	if x != nil && x.Range != nil {
		return *x.Range
	}
	return 0
}

func (x *Weapon) GetSpeed() float32 {
	if x != nil && x.Speed != nil {
		return *x.Speed
	}
	return 0
}

type UnitTypeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnitId          *uint32  `protobuf:"varint,1,opt,name=unit_id,json=unitId" json:"unit_id,omitempty"`          // Stable ID.
	Name            *string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`                             // Catalog name of the unit.
	Available       *bool    `protobuf:"varint,3,opt,name=available" json:"available,omitempty"`                  // If true, the ability may be used by this set of mods/map.
	CargoSize       *uint32  `protobuf:"varint,4,opt,name=cargo_size,json=cargoSize" json:"cargo_size,omitempty"` // Number of cargo slots it occupies in transports.
	MineralCost     *uint32  `protobuf:"varint,12,opt,name=mineral_cost,json=mineralCost" json:"mineral_cost,omitempty"`
	VespeneCost     *uint32  `protobuf:"varint,13,opt,name=vespene_cost,json=vespeneCost" json:"vespene_cost,omitempty"`
	FoodRequired    *float32 `protobuf:"fixed32,14,opt,name=food_required,json=foodRequired" json:"food_required,omitempty"`
	FoodProvided    *float32 `protobuf:"fixed32,18,opt,name=food_provided,json=foodProvided" json:"food_provided,omitempty"`
	AbilityId       *uint32  `protobuf:"varint,15,opt,name=ability_id,json=abilityId" json:"ability_id,omitempty"` // The ability that builds this unit.
	Race            *Race    `protobuf:"varint,16,opt,name=race,enum=sc2proto.Race" json:"race,omitempty"`
	BuildTime       *float32 `protobuf:"fixed32,17,opt,name=build_time,json=buildTime" json:"build_time,omitempty"`
	HasVespene      *bool    `protobuf:"varint,19,opt,name=has_vespene,json=hasVespene" json:"has_vespene,omitempty"`
	HasMinerals     *bool    `protobuf:"varint,20,opt,name=has_minerals,json=hasMinerals" json:"has_minerals,omitempty"`
	SightRange      *float32 `protobuf:"fixed32,25,opt,name=sight_range,json=sightRange" json:"sight_range,omitempty"`               // Range unit reveals vision.
	TechAlias       []uint32 `protobuf:"varint,21,rep,name=tech_alias,json=techAlias" json:"tech_alias,omitempty"`                   // Other units that satisfy the same tech requirement.
	UnitAlias       *uint32  `protobuf:"varint,22,opt,name=unit_alias,json=unitAlias" json:"unit_alias,omitempty"`                   // The morphed variant of this unit.
	TechRequirement *uint32  `protobuf:"varint,23,opt,name=tech_requirement,json=techRequirement" json:"tech_requirement,omitempty"` // Structure required to build this unit. (Or any with the same tech_alias)
	RequireAttached *bool    `protobuf:"varint,24,opt,name=require_attached,json=requireAttached" json:"require_attached,omitempty"` // Whether tech_requirement is an add-on.
	// Values include changes from upgrades
	Attributes    []Attribute `protobuf:"varint,8,rep,name=attributes,enum=sc2proto.Attribute" json:"attributes,omitempty"`
	MovementSpeed *float32    `protobuf:"fixed32,9,opt,name=movement_speed,json=movementSpeed" json:"movement_speed,omitempty"`
	Armor         *float32    `protobuf:"fixed32,10,opt,name=armor" json:"armor,omitempty"`
	Weapons       []*Weapon   `protobuf:"bytes,11,rep,name=weapons" json:"weapons,omitempty"`
}

func (x *UnitTypeData) Reset() {
	*x = UnitTypeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnitTypeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnitTypeData) ProtoMessage() {}

func (x *UnitTypeData) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnitTypeData.ProtoReflect.Descriptor instead.
func (*UnitTypeData) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{3}
}

func (x *UnitTypeData) GetUnitId() uint32 {
	if x != nil && x.UnitId != nil {
		return *x.UnitId
	}
	return 0
}

func (x *UnitTypeData) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UnitTypeData) GetAvailable() bool {
	if x != nil && x.Available != nil {
		return *x.Available
	}
	return false
}

func (x *UnitTypeData) GetCargoSize() uint32 {
	if x != nil && x.CargoSize != nil {
		return *x.CargoSize
	}
	return 0
}

func (x *UnitTypeData) GetMineralCost() uint32 {
	if x != nil && x.MineralCost != nil {
		return *x.MineralCost
	}
	return 0
}

func (x *UnitTypeData) GetVespeneCost() uint32 {
	if x != nil && x.VespeneCost != nil {
		return *x.VespeneCost
	}
	return 0
}

func (x *UnitTypeData) GetFoodRequired() float32 {
	if x != nil && x.FoodRequired != nil {
		return *x.FoodRequired
	}
	return 0
}

func (x *UnitTypeData) GetFoodProvided() float32 {
	if x != nil && x.FoodProvided != nil {
		return *x.FoodProvided
	}
	return 0
}

func (x *UnitTypeData) GetAbilityId() uint32 {
	if x != nil && x.AbilityId != nil {
		return *x.AbilityId
	}
	return 0
}

func (x *UnitTypeData) GetRace() Race {
	if x != nil && x.Race != nil {
		return *x.Race
	}
	return Race_NoRace
}

func (x *UnitTypeData) GetBuildTime() float32 {
	if x != nil && x.BuildTime != nil {
		return *x.BuildTime
	}
	return 0
}

func (x *UnitTypeData) GetHasVespene() bool {
	if x != nil && x.HasVespene != nil {
		return *x.HasVespene
	}
	return false
}

func (x *UnitTypeData) GetHasMinerals() bool {
	if x != nil && x.HasMinerals != nil {
		return *x.HasMinerals
	}
	return false
}

func (x *UnitTypeData) GetSightRange() float32 {
	if x != nil && x.SightRange != nil {
		return *x.SightRange
	}
	return 0
}

func (x *UnitTypeData) GetTechAlias() []uint32 {
	if x != nil {
		return x.TechAlias
	}
	return nil
}

func (x *UnitTypeData) GetUnitAlias() uint32 {
	if x != nil && x.UnitAlias != nil {
		return *x.UnitAlias
	}
	return 0
}

func (x *UnitTypeData) GetTechRequirement() uint32 {
	if x != nil && x.TechRequirement != nil {
		return *x.TechRequirement
	}
	return 0
}

func (x *UnitTypeData) GetRequireAttached() bool {
	if x != nil && x.RequireAttached != nil {
		return *x.RequireAttached
	}
	return false
}

func (x *UnitTypeData) GetAttributes() []Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *UnitTypeData) GetMovementSpeed() float32 {
	if x != nil && x.MovementSpeed != nil {
		return *x.MovementSpeed
	}
	return 0
}

func (x *UnitTypeData) GetArmor() float32 {
	if x != nil && x.Armor != nil {
		return *x.Armor
	}
	return 0
}

func (x *UnitTypeData) GetWeapons() []*Weapon {
	if x != nil {
		return x.Weapons
	}
	return nil
}

type UpgradeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpgradeId    *uint32  `protobuf:"varint,1,opt,name=upgrade_id,json=upgradeId" json:"upgrade_id,omitempty"` // Stable ID.
	Name         *string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	MineralCost  *uint32  `protobuf:"varint,3,opt,name=mineral_cost,json=mineralCost" json:"mineral_cost,omitempty"`
	VespeneCost  *uint32  `protobuf:"varint,4,opt,name=vespene_cost,json=vespeneCost" json:"vespene_cost,omitempty"`
	ResearchTime *float32 `protobuf:"fixed32,5,opt,name=research_time,json=researchTime" json:"research_time,omitempty"`
	AbilityId    *uint32  `protobuf:"varint,6,opt,name=ability_id,json=abilityId" json:"ability_id,omitempty"`
}

func (x *UpgradeData) Reset() {
	*x = UpgradeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeData) ProtoMessage() {}

func (x *UpgradeData) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeData.ProtoReflect.Descriptor instead.
func (*UpgradeData) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{4}
}

func (x *UpgradeData) GetUpgradeId() uint32 {
	if x != nil && x.UpgradeId != nil {
		return *x.UpgradeId
	}
	return 0
}

func (x *UpgradeData) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpgradeData) GetMineralCost() uint32 {
	if x != nil && x.MineralCost != nil {
		return *x.MineralCost
	}
	return 0
}

func (x *UpgradeData) GetVespeneCost() uint32 {
	if x != nil && x.VespeneCost != nil {
		return *x.VespeneCost
	}
	return 0
}

func (x *UpgradeData) GetResearchTime() float32 {
	if x != nil && x.ResearchTime != nil {
		return *x.ResearchTime
	}
	return 0
}

func (x *UpgradeData) GetAbilityId() uint32 {
	if x != nil && x.AbilityId != nil {
		return *x.AbilityId
	}
	return 0
}

type BuffData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuffId *uint32 `protobuf:"varint,1,opt,name=buff_id,json=buffId" json:"buff_id,omitempty"` // Stable ID.
	Name   *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (x *BuffData) Reset() {
	*x = BuffData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuffData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuffData) ProtoMessage() {}

func (x *BuffData) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuffData.ProtoReflect.Descriptor instead.
func (*BuffData) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{5}
}

func (x *BuffData) GetBuffId() uint32 {
	if x != nil && x.BuffId != nil {
		return *x.BuffId
	}
	return 0
}

func (x *BuffData) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type EffectData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EffectId     *uint32  `protobuf:"varint,1,opt,name=effect_id,json=effectId" json:"effect_id,omitempty"` // Stable ID.
	Name         *string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	FriendlyName *string  `protobuf:"bytes,3,opt,name=friendly_name,json=friendlyName" json:"friendly_name,omitempty"`
	Radius       *float32 `protobuf:"fixed32,4,opt,name=radius" json:"radius,omitempty"`
}

func (x *EffectData) Reset() {
	*x = EffectData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EffectData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EffectData) ProtoMessage() {}

func (x *EffectData) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EffectData.ProtoReflect.Descriptor instead.
func (*EffectData) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{6}
}

func (x *EffectData) GetEffectId() uint32 {
	if x != nil && x.EffectId != nil {
		return *x.EffectId
	}
	return 0
}

func (x *EffectData) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *EffectData) GetFriendlyName() string {
	if x != nil && x.FriendlyName != nil {
		return *x.FriendlyName
	}
	return ""
}

func (x *EffectData) GetRadius() float32 {
	if x != nil && x.Radius != nil {
		return *x.Radius
	}
	return 0
}

var File_data_proto protoreflect.FileDescriptor

var file_data_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73, 0x63,
	0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xff, 0x04, 0x0a, 0x0b, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x74, 0x6b, 0x65, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x74, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a,
	0x14, 0x72, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x72, 0x65, 0x6d,
	0x61, 0x70, 0x73, 0x54, 0x6f, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x73,
	0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x6e, 0x69,
	0x6d, 0x61, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x61, 0x75, 0x74, 0x6f, 0x63, 0x61, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x75, 0x74, 0x6f, 0x63, 0x61, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x29, 0x0a, 0x10, 0x66, 0x6f, 0x6f, 0x74, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x64,
	0x69, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x66, 0x6f, 0x6f, 0x74, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x73,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x09, 0x63, 0x61, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x49, 0x0a, 0x06, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x01, 0x12,
	0x09, 0x0a, 0x05, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x6e,
	0x69, 0x74, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x72, 0x55,
	0x6e, 0x69, 0x74, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x72,
	0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x05, 0x22, 0x56, 0x0a, 0x0b, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x09, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x6e, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x22, 0xfd,
	0x01, 0x0a, 0x06, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x64, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x6f, 0x6e,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x52,
	0x0b, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x22, 0x2a, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0a, 0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03,
	0x41, 0x69, 0x72, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x6e, 0x79, 0x10, 0x03, 0x22, 0x81,
	0x06, 0x0a, 0x0c, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61,
	0x72, 0x67, 0x6f, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x63, 0x61, 0x72, 0x67, 0x6f, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x76, 0x65, 0x73, 0x70, 0x65, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x76, 0x65, 0x73, 0x70, 0x65, 0x6e, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x66, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x66, 0x6f, 0x6f,
	0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x04, 0x72, 0x61, 0x63, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x61, 0x63, 0x65, 0x52, 0x04, 0x72, 0x61, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x68,
	0x61, 0x73, 0x5f, 0x76, 0x65, 0x73, 0x70, 0x65, 0x6e, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x68, 0x61, 0x73, 0x56, 0x65, 0x73, 0x70, 0x65, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x68, 0x61, 0x73, 0x5f, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x68, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x15,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x65, 0x63, 0x68, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x65, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x6f, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0d, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x05, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x07, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x52, 0x07, 0x77, 0x65, 0x61, 0x70, 0x6f,
	0x6e, 0x73, 0x22, 0xca, 0x01, 0x0a, 0x0b, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x69, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x65, 0x73, 0x70,
	0x65, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x76, 0x65, 0x73, 0x70, 0x65, 0x6e, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22,
	0x37, 0x0a, 0x08, 0x42, 0x75, 0x66, 0x66, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x62,
	0x75, 0x66, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62, 0x75,
	0x66, 0x66, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x7a, 0x0a, 0x0a, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x6c, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x72, 0x61,
	0x64, 0x69, 0x75, 0x73, 0x2a, 0x9e, 0x01, 0x0a, 0x09, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x69,
	0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x65,
	0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x6f,
	0x62, 0x6f, 0x74, 0x69, 0x63, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x73, 0x69, 0x6f, 0x6e,
	0x69, 0x63, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x10,
	0x07, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x10, 0x08,
	0x12, 0x09, 0x0a, 0x05, 0x48, 0x6f, 0x76, 0x65, 0x72, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x48,
	0x65, 0x72, 0x6f, 0x69, 0x63, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x75, 0x6d, 0x6d, 0x6f,
	0x6e, 0x65, 0x64, 0x10, 0x0b, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x69, 0x6e, 0x77, 0x75, 0x7a, 0x68, 0x61, 0x6f, 0x2f, 0x73, 0x63,
	0x32, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x63, 0x32, 0x70, 0x72,
	0x6f, 0x74, 0x6f,
}

var (
	file_data_proto_rawDescOnce sync.Once
	file_data_proto_rawDescData = file_data_proto_rawDesc
)

func file_data_proto_rawDescGZIP() []byte {
	file_data_proto_rawDescOnce.Do(func() {
		file_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_data_proto_rawDescData)
	})
	return file_data_proto_rawDescData
}

var file_data_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_data_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_data_proto_goTypes = []interface{}{
	(Attribute)(0),          // 0: sc2proto.Attribute
	(AbilityData_Target)(0), // 1: sc2proto.AbilityData.Target
	(Weapon_TargetType)(0),  // 2: sc2proto.Weapon.TargetType
	(*AbilityData)(nil),     // 3: sc2proto.AbilityData
	(*DamageBonus)(nil),     // 4: sc2proto.DamageBonus
	(*Weapon)(nil),          // 5: sc2proto.Weapon
	(*UnitTypeData)(nil),    // 6: sc2proto.UnitTypeData
	(*UpgradeData)(nil),     // 7: sc2proto.UpgradeData
	(*BuffData)(nil),        // 8: sc2proto.BuffData
	(*EffectData)(nil),      // 9: sc2proto.EffectData
	(Race)(0),               // 10: sc2proto.Race
}
var file_data_proto_depIdxs = []int32{
	1,  // 0: sc2proto.AbilityData.target:type_name -> sc2proto.AbilityData.Target
	0,  // 1: sc2proto.DamageBonus.attribute:type_name -> sc2proto.Attribute
	2,  // 2: sc2proto.Weapon.type:type_name -> sc2proto.Weapon.TargetType
	4,  // 3: sc2proto.Weapon.damage_bonus:type_name -> sc2proto.DamageBonus
	10, // 4: sc2proto.UnitTypeData.race:type_name -> sc2proto.Race
	0,  // 5: sc2proto.UnitTypeData.attributes:type_name -> sc2proto.Attribute
	5,  // 6: sc2proto.UnitTypeData.weapons:type_name -> sc2proto.Weapon
	7,  // [7:7] is the sub-list for method output_type
	7,  // [7:7] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_data_proto_init() }
func file_data_proto_init() {
	if File_data_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbilityData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DamageBonus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Weapon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnitTypeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuffData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EffectData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_data_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_data_proto_goTypes,
		DependencyIndexes: file_data_proto_depIdxs,
		EnumInfos:         file_data_proto_enumTypes,
		MessageInfos:      file_data_proto_msgTypes,
	}.Build()
	File_data_proto = out.File
	file_data_proto_rawDesc = nil
	file_data_proto_goTypes = nil
	file_data_proto_depIdxs = nil
}
