// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.0
// source: score.proto

package sc2proto

import (
	"reflect"
	"sync"

	"google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Score_ScoreType int32

const (
	Score_Curriculum Score_ScoreType = 1 // map generated score (from curriculum maps with special scoring)
	Score_Melee      Score_ScoreType = 2 // summation of in-progress and current units/buildings value + minerals + vespene
)

// Enum value maps for Score_ScoreType.
var (
	Score_ScoreType_name = map[int32]string{
		1: "Curriculum",
		2: "Melee",
	}
	Score_ScoreType_value = map[string]int32{
		"Curriculum": 1,
		"Melee":      2,
	}
)

func (x Score_ScoreType) Enum() *Score_ScoreType {
	p := new(Score_ScoreType)
	*p = x
	return p
}

func (x Score_ScoreType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Score_ScoreType) Descriptor() protoreflect.EnumDescriptor {
	return file_score_proto_enumTypes[0].Descriptor()
}

func (Score_ScoreType) Type() protoreflect.EnumType {
	return &file_score_proto_enumTypes[0]
}

func (x Score_ScoreType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Score_ScoreType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Score_ScoreType(num)
	return nil
}

// Deprecated: Use Score_ScoreType.Descriptor instead.
func (Score_ScoreType) EnumDescriptor() ([]byte, []int) {
	return file_score_proto_rawDescGZIP(), []int{0, 0}
}

type Score struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScoreType    *Score_ScoreType `protobuf:"varint,6,opt,name=score_type,json=scoreType,enum=sc2proto.Score_ScoreType" json:"score_type,omitempty"`
	Score        *int32           `protobuf:"varint,7,opt,name=score" json:"score,omitempty"` // Note: check score_type to know whether this is a melee score or curriculum score
	ScoreDetails *ScoreDetails    `protobuf:"bytes,8,opt,name=score_details,json=scoreDetails" json:"score_details,omitempty"`
}

func (x *Score) Reset() {
	*x = Score{}
	if protoimpl.UnsafeEnabled {
		mi := &file_score_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Score) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Score) ProtoMessage() {}

func (x *Score) ProtoReflect() protoreflect.Message {
	mi := &file_score_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Score.ProtoReflect.Descriptor instead.
func (*Score) Descriptor() ([]byte, []int) {
	return file_score_proto_rawDescGZIP(), []int{0}
}

func (x *Score) GetScoreType() Score_ScoreType {
	if x != nil && x.ScoreType != nil {
		return *x.ScoreType
	}
	return Score_Curriculum
}

func (x *Score) GetScore() int32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *Score) GetScoreDetails() *ScoreDetails {
	if x != nil {
		return x.ScoreDetails
	}
	return nil
}

type CategoryScoreDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	None       *float32 `protobuf:"fixed32,1,opt,name=none" json:"none,omitempty"` // Used when no other category is configured in game data
	Army       *float32 `protobuf:"fixed32,2,opt,name=army" json:"army,omitempty"`
	Economy    *float32 `protobuf:"fixed32,3,opt,name=economy" json:"economy,omitempty"`
	Technology *float32 `protobuf:"fixed32,4,opt,name=technology" json:"technology,omitempty"`
	Upgrade    *float32 `protobuf:"fixed32,5,opt,name=upgrade" json:"upgrade,omitempty"`
}

func (x *CategoryScoreDetails) Reset() {
	*x = CategoryScoreDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_score_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryScoreDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryScoreDetails) ProtoMessage() {}

func (x *CategoryScoreDetails) ProtoReflect() protoreflect.Message {
	mi := &file_score_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryScoreDetails.ProtoReflect.Descriptor instead.
func (*CategoryScoreDetails) Descriptor() ([]byte, []int) {
	return file_score_proto_rawDescGZIP(), []int{1}
}

func (x *CategoryScoreDetails) GetNone() float32 {
	if x != nil && x.None != nil {
		return *x.None
	}
	return 0
}

func (x *CategoryScoreDetails) GetArmy() float32 {
	if x != nil && x.Army != nil {
		return *x.Army
	}
	return 0
}

func (x *CategoryScoreDetails) GetEconomy() float32 {
	if x != nil && x.Economy != nil {
		return *x.Economy
	}
	return 0
}

func (x *CategoryScoreDetails) GetTechnology() float32 {
	if x != nil && x.Technology != nil {
		return *x.Technology
	}
	return 0
}

func (x *CategoryScoreDetails) GetUpgrade() float32 {
	if x != nil && x.Upgrade != nil {
		return *x.Upgrade
	}
	return 0
}

type VitalScoreDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Life    *float32 `protobuf:"fixed32,1,opt,name=life" json:"life,omitempty"`
	Shields *float32 `protobuf:"fixed32,2,opt,name=shields" json:"shields,omitempty"`
	Energy  *float32 `protobuf:"fixed32,3,opt,name=energy" json:"energy,omitempty"`
}

func (x *VitalScoreDetails) Reset() {
	*x = VitalScoreDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_score_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VitalScoreDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VitalScoreDetails) ProtoMessage() {}

func (x *VitalScoreDetails) ProtoReflect() protoreflect.Message {
	mi := &file_score_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VitalScoreDetails.ProtoReflect.Descriptor instead.
func (*VitalScoreDetails) Descriptor() ([]byte, []int) {
	return file_score_proto_rawDescGZIP(), []int{2}
}

func (x *VitalScoreDetails) GetLife() float32 {
	if x != nil && x.Life != nil {
		return *x.Life
	}
	return 0
}

func (x *VitalScoreDetails) GetShields() float32 {
	if x != nil && x.Shields != nil {
		return *x.Shields
	}
	return 0
}

func (x *VitalScoreDetails) GetEnergy() float32 {
	if x != nil && x.Energy != nil {
		return *x.Energy
	}
	return 0
}

type ScoreDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sum of time any available structure able to produce a unit is not. The time stacks, as in, three idle barracks will increase idle_production_time three times quicker than just one.
	IdleProductionTime *float32 `protobuf:"fixed32,1,opt,name=idle_production_time,json=idleProductionTime" json:"idle_production_time,omitempty"`
	// Sum of time any worker is not mining. Note a worker building is not idle and three idle workers will increase this value three times quicker than just one.
	IdleWorkerTime *float32 `protobuf:"fixed32,2,opt,name=idle_worker_time,json=idleWorkerTime" json:"idle_worker_time,omitempty"`
	// Sum of minerals and vespene spent on completed units.
	TotalValueUnits *float32 `protobuf:"fixed32,3,opt,name=total_value_units,json=totalValueUnits" json:"total_value_units,omitempty"`
	// Sum of minerals and vespene spent on completed structures.
	TotalValueStructures *float32 `protobuf:"fixed32,4,opt,name=total_value_structures,json=totalValueStructures" json:"total_value_structures,omitempty"`
	// Sum of minerals and vespene of units, belonging to the opponent, that the player has destroyed.
	KilledValueUnits *float32 `protobuf:"fixed32,5,opt,name=killed_value_units,json=killedValueUnits" json:"killed_value_units,omitempty"`
	// Sum of minerals and vespene of structures, belonging to the opponent, that the player has destroyed.
	KilledValueStructures *float32 `protobuf:"fixed32,6,opt,name=killed_value_structures,json=killedValueStructures" json:"killed_value_structures,omitempty"`
	// Sum of minerals collected by the player.
	CollectedMinerals *float32 `protobuf:"fixed32,7,opt,name=collected_minerals,json=collectedMinerals" json:"collected_minerals,omitempty"`
	// Sum of vespene collected by the player.
	CollectedVespene *float32 `protobuf:"fixed32,8,opt,name=collected_vespene,json=collectedVespene" json:"collected_vespene,omitempty"`
	// Estimated income of minerals over the next minute based on the players current income. The unit is minerals per minute.
	CollectionRateMinerals *float32 `protobuf:"fixed32,9,opt,name=collection_rate_minerals,json=collectionRateMinerals" json:"collection_rate_minerals,omitempty"`
	// Estimated income of vespene over the next minute based on the players current income. The unit is vespene per minute.
	CollectionRateVespene *float32 `protobuf:"fixed32,10,opt,name=collection_rate_vespene,json=collectionRateVespene" json:"collection_rate_vespene,omitempty"`
	// Sum of spent minerals at the moment it is spent. For example, this number is incremented by 50 the moment an scv is queued in a command center.  It is decremented by 50 if that unit is canceled.
	SpentMinerals *float32 `protobuf:"fixed32,11,opt,name=spent_minerals,json=spentMinerals" json:"spent_minerals,omitempty"`
	// Sum of spent vespene at the moment it is spent. For example, this number is incremented by 50 when a reaper is queued but decremented by 50 if it is canceled.
	SpentVespene *float32 `protobuf:"fixed32,12,opt,name=spent_vespene,json=spentVespene" json:"spent_vespene,omitempty"`
	// Sum of food, or supply, utilized in the categories above.
	FoodUsed *CategoryScoreDetails `protobuf:"bytes,13,opt,name=food_used,json=foodUsed" json:"food_used,omitempty"`
	// Sum of enemies catagories destroyed in minerals.
	KilledMinerals *CategoryScoreDetails `protobuf:"bytes,14,opt,name=killed_minerals,json=killedMinerals" json:"killed_minerals,omitempty"`
	// Sum of enemies catagories destroyed in vespene.
	KilledVespene *CategoryScoreDetails `protobuf:"bytes,15,opt,name=killed_vespene,json=killedVespene" json:"killed_vespene,omitempty"`
	//  Sum of lost minerals for the player in each category.
	LostMinerals *CategoryScoreDetails `protobuf:"bytes,16,opt,name=lost_minerals,json=lostMinerals" json:"lost_minerals,omitempty"`
	// Sum of lost vespene for the player in each category.
	LostVespene *CategoryScoreDetails `protobuf:"bytes,17,opt,name=lost_vespene,json=lostVespene" json:"lost_vespene,omitempty"`
	// Sum of the lost minerals via destroying the players own units/buildings.
	FriendlyFireMinerals *CategoryScoreDetails `protobuf:"bytes,18,opt,name=friendly_fire_minerals,json=friendlyFireMinerals" json:"friendly_fire_minerals,omitempty"`
	// Sum of the lost vespene via destroying the players own units/buildings.
	FriendlyFireVespene *CategoryScoreDetails `protobuf:"bytes,19,opt,name=friendly_fire_vespene,json=friendlyFireVespene" json:"friendly_fire_vespene,omitempty"`
	// Sum of used minerals for the player in each category for each existing unit or upgrade. Therefore if a unit died worth 50 mierals this number will be decremented by 50.
	UsedMinerals *CategoryScoreDetails `protobuf:"bytes,20,opt,name=used_minerals,json=usedMinerals" json:"used_minerals,omitempty"`
	// Sum of used vespene for the player in each category. Therefore if a unit died worth 50 vespene this number will be decremented by 50.
	UsedVespene *CategoryScoreDetails `protobuf:"bytes,21,opt,name=used_vespene,json=usedVespene" json:"used_vespene,omitempty"`
	// Sum of used minerals throughout the entire game for each category. Unliked used_minerals, this value is never decremented.
	TotalUsedMinerals *CategoryScoreDetails `protobuf:"bytes,22,opt,name=total_used_minerals,json=totalUsedMinerals" json:"total_used_minerals,omitempty"`
	// Sum of used vespene throughout the entire game for each category. Unliked used_vespene, this value is never decremented.
	TotalUsedVespene *CategoryScoreDetails `protobuf:"bytes,23,opt,name=total_used_vespene,json=totalUsedVespene" json:"total_used_vespene,omitempty"`
	// Sum of damage dealt to the player's opponent for each category.
	TotalDamageDealt *VitalScoreDetails `protobuf:"bytes,24,opt,name=total_damage_dealt,json=totalDamageDealt" json:"total_damage_dealt,omitempty"`
	// Sum of damage taken by the player for each category.
	TotalDamageTaken *VitalScoreDetails `protobuf:"bytes,25,opt,name=total_damage_taken,json=totalDamageTaken" json:"total_damage_taken,omitempty"`
	// Sum of health healed by the player. Note that technology can be healed (by queens) or repaired (by scvs).
	TotalHealed *VitalScoreDetails `protobuf:"bytes,26,opt,name=total_healed,json=totalHealed" json:"total_healed,omitempty"`
	// Recent raw APM.
	CurrentApm *float32 `protobuf:"fixed32,27,opt,name=current_apm,json=currentApm" json:"current_apm,omitempty"`
	// Recent effective APM.
	CurrentEffectiveApm *float32 `protobuf:"fixed32,28,opt,name=current_effective_apm,json=currentEffectiveApm" json:"current_effective_apm,omitempty"`
}

func (x *ScoreDetails) Reset() {
	*x = ScoreDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_score_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScoreDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreDetails) ProtoMessage() {}

func (x *ScoreDetails) ProtoReflect() protoreflect.Message {
	mi := &file_score_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreDetails.ProtoReflect.Descriptor instead.
func (*ScoreDetails) Descriptor() ([]byte, []int) {
	return file_score_proto_rawDescGZIP(), []int{3}
}

func (x *ScoreDetails) GetIdleProductionTime() float32 {
	if x != nil && x.IdleProductionTime != nil {
		return *x.IdleProductionTime
	}
	return 0
}

func (x *ScoreDetails) GetIdleWorkerTime() float32 {
	if x != nil && x.IdleWorkerTime != nil {
		return *x.IdleWorkerTime
	}
	return 0
}

func (x *ScoreDetails) GetTotalValueUnits() float32 {
	if x != nil && x.TotalValueUnits != nil {
		return *x.TotalValueUnits
	}
	return 0
}

func (x *ScoreDetails) GetTotalValueStructures() float32 {
	if x != nil && x.TotalValueStructures != nil {
		return *x.TotalValueStructures
	}
	return 0
}

func (x *ScoreDetails) GetKilledValueUnits() float32 {
	if x != nil && x.KilledValueUnits != nil {
		return *x.KilledValueUnits
	}
	return 0
}

func (x *ScoreDetails) GetKilledValueStructures() float32 {
	if x != nil && x.KilledValueStructures != nil {
		return *x.KilledValueStructures
	}
	return 0
}

func (x *ScoreDetails) GetCollectedMinerals() float32 {
	if x != nil && x.CollectedMinerals != nil {
		return *x.CollectedMinerals
	}
	return 0
}

func (x *ScoreDetails) GetCollectedVespene() float32 {
	if x != nil && x.CollectedVespene != nil {
		return *x.CollectedVespene
	}
	return 0
}

func (x *ScoreDetails) GetCollectionRateMinerals() float32 {
	if x != nil && x.CollectionRateMinerals != nil {
		return *x.CollectionRateMinerals
	}
	return 0
}

func (x *ScoreDetails) GetCollectionRateVespene() float32 {
	if x != nil && x.CollectionRateVespene != nil {
		return *x.CollectionRateVespene
	}
	return 0
}

func (x *ScoreDetails) GetSpentMinerals() float32 {
	if x != nil && x.SpentMinerals != nil {
		return *x.SpentMinerals
	}
	return 0
}

func (x *ScoreDetails) GetSpentVespene() float32 {
	if x != nil && x.SpentVespene != nil {
		return *x.SpentVespene
	}
	return 0
}

func (x *ScoreDetails) GetFoodUsed() *CategoryScoreDetails {
	if x != nil {
		return x.FoodUsed
	}
	return nil
}

func (x *ScoreDetails) GetKilledMinerals() *CategoryScoreDetails {
	if x != nil {
		return x.KilledMinerals
	}
	return nil
}

func (x *ScoreDetails) GetKilledVespene() *CategoryScoreDetails {
	if x != nil {
		return x.KilledVespene
	}
	return nil
}

func (x *ScoreDetails) GetLostMinerals() *CategoryScoreDetails {
	if x != nil {
		return x.LostMinerals
	}
	return nil
}

func (x *ScoreDetails) GetLostVespene() *CategoryScoreDetails {
	if x != nil {
		return x.LostVespene
	}
	return nil
}

func (x *ScoreDetails) GetFriendlyFireMinerals() *CategoryScoreDetails {
	if x != nil {
		return x.FriendlyFireMinerals
	}
	return nil
}

func (x *ScoreDetails) GetFriendlyFireVespene() *CategoryScoreDetails {
	if x != nil {
		return x.FriendlyFireVespene
	}
	return nil
}

func (x *ScoreDetails) GetUsedMinerals() *CategoryScoreDetails {
	if x != nil {
		return x.UsedMinerals
	}
	return nil
}

func (x *ScoreDetails) GetUsedVespene() *CategoryScoreDetails {
	if x != nil {
		return x.UsedVespene
	}
	return nil
}

func (x *ScoreDetails) GetTotalUsedMinerals() *CategoryScoreDetails {
	if x != nil {
		return x.TotalUsedMinerals
	}
	return nil
}

func (x *ScoreDetails) GetTotalUsedVespene() *CategoryScoreDetails {
	if x != nil {
		return x.TotalUsedVespene
	}
	return nil
}

func (x *ScoreDetails) GetTotalDamageDealt() *VitalScoreDetails {
	if x != nil {
		return x.TotalDamageDealt
	}
	return nil
}

func (x *ScoreDetails) GetTotalDamageTaken() *VitalScoreDetails {
	if x != nil {
		return x.TotalDamageTaken
	}
	return nil
}

func (x *ScoreDetails) GetTotalHealed() *VitalScoreDetails {
	if x != nil {
		return x.TotalHealed
	}
	return nil
}

func (x *ScoreDetails) GetCurrentApm() float32 {
	if x != nil && x.CurrentApm != nil {
		return *x.CurrentApm
	}
	return 0
}

func (x *ScoreDetails) GetCurrentEffectiveApm() float32 {
	if x != nil && x.CurrentEffectiveApm != nil {
		return *x.CurrentEffectiveApm
	}
	return 0
}

var File_score_proto protoreflect.FileDescriptor

var file_score_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73,
	0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbc, 0x01, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x38, 0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x26,
	0x0a, 0x09, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x43,
	0x75, 0x72, 0x72, 0x69, 0x63, 0x75, 0x6c, 0x75, 0x6d, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4d,
	0x65, 0x6c, 0x65, 0x65, 0x10, 0x02, 0x22, 0x92, 0x01, 0x0a, 0x14, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6e,
	0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x6d, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x04, 0x61, 0x72, 0x6d, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x63, 0x6f, 0x6e, 0x6f,
	0x6d, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d,
	0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x07, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x22, 0x59, 0x0a, 0x11, 0x56,
	0x69, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x66, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04,
	0x6c, 0x69, 0x66, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06,
	0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x22, 0x9c, 0x0d, 0x0a, 0x0c, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x64, 0x6c, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x69, 0x64, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x64, 0x6c,
	0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0e, 0x69, 0x64, 0x6c, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12,
	0x34, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x10, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x73, 0x70, 0x65, 0x6e, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x56, 0x65, 0x73, 0x70, 0x65, 0x6e, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x73, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x65, 0x73, 0x70, 0x65, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x15, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61,
	0x74, 0x65, 0x56, 0x65, 0x73, 0x70, 0x65, 0x6e, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x70, 0x65,
	0x6e, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x73, 0x70, 0x65, 0x6e,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x56, 0x65,
	0x73, 0x70, 0x65, 0x6e, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x75, 0x73,
	0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x08, 0x66, 0x6f, 0x6f, 0x64, 0x55, 0x73,
	0x65, 0x64, 0x12, 0x47, 0x0a, 0x0f, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x6d, 0x69, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x63,
	0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0e, 0x6b, 0x69, 0x6c,
	0x6c, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x12, 0x45, 0x0a, 0x0e, 0x6b,
	0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x73, 0x70, 0x65, 0x6e, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x0d, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x56, 0x65, 0x73, 0x70, 0x65,
	0x6e, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x6c, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x63, 0x32, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x6c, 0x6f, 0x73, 0x74, 0x4d,
	0x69, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x12, 0x41, 0x0a, 0x0c, 0x6c, 0x6f, 0x73, 0x74, 0x5f,
	0x76, 0x65, 0x73, 0x70, 0x65, 0x6e, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0b, 0x6c,
	0x6f, 0x73, 0x74, 0x56, 0x65, 0x73, 0x70, 0x65, 0x6e, 0x65, 0x12, 0x54, 0x0a, 0x16, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x63, 0x32,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x14, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x6c, 0x79, 0x46, 0x69, 0x72, 0x65, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x73,
	0x12, 0x52, 0x0a, 0x15, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x5f, 0x66, 0x69, 0x72,
	0x65, 0x5f, 0x76, 0x65, 0x73, 0x70, 0x65, 0x6e, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x13, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x46, 0x69, 0x72, 0x65, 0x56, 0x65, 0x73,
	0x70, 0x65, 0x6e, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x6d, 0x69, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x63,
	0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x75, 0x73, 0x65,
	0x64, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x12, 0x41, 0x0a, 0x0c, 0x75, 0x73, 0x65,
	0x64, 0x5f, 0x76, 0x65, 0x73, 0x70, 0x65, 0x6e, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x0b, 0x75, 0x73, 0x65, 0x64, 0x56, 0x65, 0x73, 0x70, 0x65, 0x6e, 0x65, 0x12, 0x4e, 0x0a, 0x13,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x63, 0x32, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x55, 0x73, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x12, 0x4c, 0x0a, 0x12,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x73, 0x70, 0x65,
	0x6e, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55,
	0x73, 0x65, 0x64, 0x56, 0x65, 0x73, 0x70, 0x65, 0x6e, 0x65, 0x12, 0x49, 0x0a, 0x12, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x74,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x69, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x44, 0x65, 0x61, 0x6c, 0x74, 0x12, 0x49, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x74,
	0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x10,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x6e,
	0x12, 0x3e, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x65, 0x64,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x63, 0x32, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x69, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x65, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x6d, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x70,
	0x6d, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x70, 0x6d, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x41, 0x70, 0x6d, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x69, 0x6e, 0x77, 0x75, 0x7a, 0x68, 0x61, 0x6f, 0x2f, 0x73, 0x63,
	0x32, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x63, 0x32, 0x70, 0x72,
	0x6f, 0x74, 0x6f,
}

var (
	file_score_proto_rawDescOnce sync.Once
	file_score_proto_rawDescData = file_score_proto_rawDesc
)

func file_score_proto_rawDescGZIP() []byte {
	file_score_proto_rawDescOnce.Do(func() {
		file_score_proto_rawDescData = protoimpl.X.CompressGZIP(file_score_proto_rawDescData)
	})
	return file_score_proto_rawDescData
}

var file_score_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_score_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_score_proto_goTypes = []interface{}{
	(Score_ScoreType)(0),         // 0: sc2proto.Score.ScoreType
	(*Score)(nil),                // 1: sc2proto.Score
	(*CategoryScoreDetails)(nil), // 2: sc2proto.CategoryScoreDetails
	(*VitalScoreDetails)(nil),    // 3: sc2proto.VitalScoreDetails
	(*ScoreDetails)(nil),         // 4: sc2proto.ScoreDetails
}
var file_score_proto_depIdxs = []int32{
	0,  // 0: sc2proto.Score.score_type:type_name -> sc2proto.Score.ScoreType
	4,  // 1: sc2proto.Score.score_details:type_name -> sc2proto.ScoreDetails
	2,  // 2: sc2proto.ScoreDetails.food_used:type_name -> sc2proto.CategoryScoreDetails
	2,  // 3: sc2proto.ScoreDetails.killed_minerals:type_name -> sc2proto.CategoryScoreDetails
	2,  // 4: sc2proto.ScoreDetails.killed_vespene:type_name -> sc2proto.CategoryScoreDetails
	2,  // 5: sc2proto.ScoreDetails.lost_minerals:type_name -> sc2proto.CategoryScoreDetails
	2,  // 6: sc2proto.ScoreDetails.lost_vespene:type_name -> sc2proto.CategoryScoreDetails
	2,  // 7: sc2proto.ScoreDetails.friendly_fire_minerals:type_name -> sc2proto.CategoryScoreDetails
	2,  // 8: sc2proto.ScoreDetails.friendly_fire_vespene:type_name -> sc2proto.CategoryScoreDetails
	2,  // 9: sc2proto.ScoreDetails.used_minerals:type_name -> sc2proto.CategoryScoreDetails
	2,  // 10: sc2proto.ScoreDetails.used_vespene:type_name -> sc2proto.CategoryScoreDetails
	2,  // 11: sc2proto.ScoreDetails.total_used_minerals:type_name -> sc2proto.CategoryScoreDetails
	2,  // 12: sc2proto.ScoreDetails.total_used_vespene:type_name -> sc2proto.CategoryScoreDetails
	3,  // 13: sc2proto.ScoreDetails.total_damage_dealt:type_name -> sc2proto.VitalScoreDetails
	3,  // 14: sc2proto.ScoreDetails.total_damage_taken:type_name -> sc2proto.VitalScoreDetails
	3,  // 15: sc2proto.ScoreDetails.total_healed:type_name -> sc2proto.VitalScoreDetails
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_score_proto_init() }
func file_score_proto_init() {
	if File_score_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_score_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Score); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_score_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryScoreDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_score_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VitalScoreDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_score_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScoreDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_score_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_score_proto_goTypes,
		DependencyIndexes: file_score_proto_depIdxs,
		EnumInfos:         file_score_proto_enumTypes,
		MessageInfos:      file_score_proto_msgTypes,
	}.Build()
	File_score_proto = out.File
	file_score_proto_rawDesc = nil
	file_score_proto_goTypes = nil
	file_score_proto_depIdxs = nil
}
